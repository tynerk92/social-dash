var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/@sveltejs/kit/dist/install-fetch.js
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base64 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
async function* toIterator(parts, clone2 = true) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else if (ArrayBuffer.isView(part)) {
      if (clone2) {
        let position = part.byteOffset;
        const end = part.byteOffset + part.byteLength;
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE);
          const chunk = part.buffer.slice(position, position + size);
          position += chunk.byteLength;
          yield new Uint8Array(chunk);
        }
      } else {
        yield part;
      }
    } else {
      let position = 0;
      while (position !== part.size) {
        const chunk = part.slice(position, Math.min(part.size, position + POOL_SIZE));
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
  }
}
function isFormData(object) {
  return typeof object === "object" && typeof object.append === "function" && typeof object.set === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.delete === "function" && typeof object.keys === "function" && typeof object.values === "function" && typeof object.entries === "function" && typeof object.constructor === "function" && object[NAME] === "FormData";
}
function getHeader(boundary, name, field) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name}"`;
  if (isBlob(field)) {
    header += `; filename="${field.name}"${carriage}`;
    header += `Content-Type: ${field.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
async function* formDataIterator(form, boundary) {
  for (const [name, value] of form) {
    yield getHeader(boundary, name, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length = 0;
  for (const [name, value] of form) {
    length += Buffer.byteLength(getHeader(boundary, name, value));
    length += isBlob(value) ? value.size : Buffer.byteLength(String(value));
    length += carriageLength;
  }
  length += Buffer.byteLength(getFooter(boundary));
  return length;
}
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let { body } = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = import_stream.default.Readable.from(body.stream());
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof import_stream.default)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const error2 = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(error2);
        throw error2;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error2) {
    const error_ = error2 instanceof FetchBaseError ? error2 : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error2.message}`, "system", error2);
    throw error_;
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error2) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error2.message}`, "system", error2);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index, array) => {
    if (index % 2 === 0) {
      result.push(array.slice(index, index + 2));
    }
    return result;
  }, []).filter(([name, value]) => {
    try {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return true;
    } catch {
      return false;
    }
  }));
}
async function fetch(url, options_) {
  return new Promise((resolve2, reject) => {
    const request = new Request(url, options_);
    const options2 = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options2.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options2.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options2.protocol === "data:") {
      const data = dataUriToBuffer$1(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve2(response2);
      return;
    }
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error2 = new AbortError("The operation was aborted.");
      reject(error2);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        request.body.destroy(error2);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options2);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (error2) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${error2.message}`, "system", error2));
      finalize();
    });
    fixResponseChunkedTransferBadEnding(request_, (error2) => {
      response.body.destroy(error2);
    });
    if (process.version < "v14") {
      request_.on("socket", (s2) => {
        let endedWithEventsCount;
        s2.prependListener("end", () => {
          endedWithEventsCount = s2._eventsCount;
        });
        s2.prependListener("close", (hadError) => {
          if (response && endedWithEventsCount < s2._eventsCount && !hadError) {
            const error2 = new Error("Premature close");
            error2.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", error2);
          }
        });
      });
    }
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              headers.set("Location", locationURL);
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_stream.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve2(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
          default:
            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      if (signal) {
        response_.once("end", () => {
          signal.removeEventListener("abort", abortAndFinalize);
        });
      }
      let body = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), reject);
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createGunzip(zlibOptions), reject);
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), reject);
        raw.once("data", (chunk) => {
          body = (chunk[0] & 15) === 8 ? (0, import_stream.pipeline)(body, import_zlib.default.createInflate(), reject) : (0, import_stream.pipeline)(body, import_zlib.default.createInflateRaw(), reject);
          response = new Response(body, responseOptions);
          resolve2(response);
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createBrotliDecompress(), reject);
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve2(response);
    });
    writeToStream(request_, request);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  const LAST_CHUNK = Buffer.from("0\r\n\r\n");
  let isChunkedTransfer = false;
  let properLastChunkReceived = false;
  let previousChunk;
  request.on("response", (response) => {
    const { headers } = response;
    isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
  });
  request.on("socket", (socket) => {
    const onSocketClose = () => {
      if (isChunkedTransfer && !properLastChunkReceived) {
        const error2 = new Error("Premature close");
        error2.code = "ERR_STREAM_PREMATURE_CLOSE";
        errorCallback(error2);
      }
    };
    socket.prependListener("close", onSocketClose);
    request.on("abort", () => {
      socket.removeListener("close", onSocketClose);
    });
    socket.on("data", (buf) => {
      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
      if (!properLastChunkReceived && previousChunk) {
        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
      }
      previousChunk = buf;
    });
  });
}
var import_http, import_https, import_zlib, import_stream, import_util, import_crypto, import_url, commonjsGlobal, src, dataUriToBuffer$1, ponyfill_es2018, POOL_SIZE$1, POOL_SIZE, _Blob, Blob3, Blob$1, FetchBaseError, FetchError, NAME, isURLSearchParameters, isBlob, isAbortSignal, carriage, dashes, carriageLength, getFooter, getBoundary, INTERNALS$2, Body, clone, extractContentType, getTotalBytes, writeToStream, validateHeaderName, validateHeaderValue, Headers, redirectStatus, isRedirect, INTERNALS$1, Response, getSearch, INTERNALS, isRequest, Request, getNodeRequestOptions, AbortError, supportedSchemas;
var init_install_fetch = __esm({
  "node_modules/@sveltejs/kit/dist/install-fetch.js"() {
    init_shims();
    import_http = __toModule(require("http"));
    import_https = __toModule(require("https"));
    import_zlib = __toModule(require("zlib"));
    import_stream = __toModule(require("stream"));
    import_util = __toModule(require("util"));
    import_crypto = __toModule(require("crypto"));
    import_url = __toModule(require("url"));
    commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    src = dataUriToBuffer;
    dataUriToBuffer$1 = src;
    ponyfill_es2018 = { exports: {} };
    (function(module2, exports) {
      (function(global2, factory) {
        factory(exports);
      })(commonjsGlobal, function(exports2) {
        const SymbolPolyfill = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol : (description) => `Symbol(${description})`;
        function noop2() {
          return void 0;
        }
        function getGlobals() {
          if (typeof self !== "undefined") {
            return self;
          } else if (typeof window !== "undefined") {
            return window;
          } else if (typeof commonjsGlobal !== "undefined") {
            return commonjsGlobal;
          }
          return void 0;
        }
        const globals = getGlobals();
        function typeIsObject(x) {
          return typeof x === "object" && x !== null || typeof x === "function";
        }
        const rethrowAssertionErrorRejection = noop2;
        const originalPromise = Promise;
        const originalPromiseThen = Promise.prototype.then;
        const originalPromiseResolve = Promise.resolve.bind(originalPromise);
        const originalPromiseReject = Promise.reject.bind(originalPromise);
        function newPromise(executor) {
          return new originalPromise(executor);
        }
        function promiseResolvedWith(value) {
          return originalPromiseResolve(value);
        }
        function promiseRejectedWith(reason) {
          return originalPromiseReject(reason);
        }
        function PerformPromiseThen(promise, onFulfilled, onRejected) {
          return originalPromiseThen.call(promise, onFulfilled, onRejected);
        }
        function uponPromise(promise, onFulfilled, onRejected) {
          PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
        }
        function uponFulfillment(promise, onFulfilled) {
          uponPromise(promise, onFulfilled);
        }
        function uponRejection(promise, onRejected) {
          uponPromise(promise, void 0, onRejected);
        }
        function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
          return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
        }
        function setPromiseIsHandledToTrue(promise) {
          PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
        }
        const queueMicrotask = (() => {
          const globalQueueMicrotask = globals && globals.queueMicrotask;
          if (typeof globalQueueMicrotask === "function") {
            return globalQueueMicrotask;
          }
          const resolvedPromise = promiseResolvedWith(void 0);
          return (fn) => PerformPromiseThen(resolvedPromise, fn);
        })();
        function reflectCall(F, V, args) {
          if (typeof F !== "function") {
            throw new TypeError("Argument is not a function");
          }
          return Function.prototype.apply.call(F, V, args);
        }
        function promiseCall(F, V, args) {
          try {
            return promiseResolvedWith(reflectCall(F, V, args));
          } catch (value) {
            return promiseRejectedWith(value);
          }
        }
        const QUEUE_MAX_ARRAY_SIZE = 16384;
        class SimpleQueue {
          constructor() {
            this._cursor = 0;
            this._size = 0;
            this._front = {
              _elements: [],
              _next: void 0
            };
            this._back = this._front;
            this._cursor = 0;
            this._size = 0;
          }
          get length() {
            return this._size;
          }
          push(element) {
            const oldBack = this._back;
            let newBack = oldBack;
            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
              newBack = {
                _elements: [],
                _next: void 0
              };
            }
            oldBack._elements.push(element);
            if (newBack !== oldBack) {
              this._back = newBack;
              oldBack._next = newBack;
            }
            ++this._size;
          }
          shift() {
            const oldFront = this._front;
            let newFront = oldFront;
            const oldCursor = this._cursor;
            let newCursor = oldCursor + 1;
            const elements = oldFront._elements;
            const element = elements[oldCursor];
            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
              newFront = oldFront._next;
              newCursor = 0;
            }
            --this._size;
            this._cursor = newCursor;
            if (oldFront !== newFront) {
              this._front = newFront;
            }
            elements[oldCursor] = void 0;
            return element;
          }
          forEach(callback) {
            let i = this._cursor;
            let node = this._front;
            let elements = node._elements;
            while (i !== elements.length || node._next !== void 0) {
              if (i === elements.length) {
                node = node._next;
                elements = node._elements;
                i = 0;
                if (elements.length === 0) {
                  break;
                }
              }
              callback(elements[i]);
              ++i;
            }
          }
          peek() {
            const front = this._front;
            const cursor = this._cursor;
            return front._elements[cursor];
          }
        }
        function ReadableStreamReaderGenericInitialize(reader, stream) {
          reader._ownerReadableStream = stream;
          stream._reader = reader;
          if (stream._state === "readable") {
            defaultReaderClosedPromiseInitialize(reader);
          } else if (stream._state === "closed") {
            defaultReaderClosedPromiseInitializeAsResolved(reader);
          } else {
            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
          }
        }
        function ReadableStreamReaderGenericCancel(reader, reason) {
          const stream = reader._ownerReadableStream;
          return ReadableStreamCancel(stream, reason);
        }
        function ReadableStreamReaderGenericRelease(reader) {
          if (reader._ownerReadableStream._state === "readable") {
            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
          } else {
            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
          }
          reader._ownerReadableStream._reader = void 0;
          reader._ownerReadableStream = void 0;
        }
        function readerLockException(name) {
          return new TypeError("Cannot " + name + " a stream using a released reader");
        }
        function defaultReaderClosedPromiseInitialize(reader) {
          reader._closedPromise = newPromise((resolve2, reject) => {
            reader._closedPromise_resolve = resolve2;
            reader._closedPromise_reject = reject;
          });
        }
        function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
          defaultReaderClosedPromiseInitialize(reader);
          defaultReaderClosedPromiseReject(reader, reason);
        }
        function defaultReaderClosedPromiseInitializeAsResolved(reader) {
          defaultReaderClosedPromiseInitialize(reader);
          defaultReaderClosedPromiseResolve(reader);
        }
        function defaultReaderClosedPromiseReject(reader, reason) {
          if (reader._closedPromise_reject === void 0) {
            return;
          }
          setPromiseIsHandledToTrue(reader._closedPromise);
          reader._closedPromise_reject(reason);
          reader._closedPromise_resolve = void 0;
          reader._closedPromise_reject = void 0;
        }
        function defaultReaderClosedPromiseResetToRejected(reader, reason) {
          defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
        }
        function defaultReaderClosedPromiseResolve(reader) {
          if (reader._closedPromise_resolve === void 0) {
            return;
          }
          reader._closedPromise_resolve(void 0);
          reader._closedPromise_resolve = void 0;
          reader._closedPromise_reject = void 0;
        }
        const AbortSteps = SymbolPolyfill("[[AbortSteps]]");
        const ErrorSteps = SymbolPolyfill("[[ErrorSteps]]");
        const CancelSteps = SymbolPolyfill("[[CancelSteps]]");
        const PullSteps = SymbolPolyfill("[[PullSteps]]");
        const NumberIsFinite = Number.isFinite || function(x) {
          return typeof x === "number" && isFinite(x);
        };
        const MathTrunc = Math.trunc || function(v) {
          return v < 0 ? Math.ceil(v) : Math.floor(v);
        };
        function isDictionary(x) {
          return typeof x === "object" || typeof x === "function";
        }
        function assertDictionary(obj, context) {
          if (obj !== void 0 && !isDictionary(obj)) {
            throw new TypeError(`${context} is not an object.`);
          }
        }
        function assertFunction(x, context) {
          if (typeof x !== "function") {
            throw new TypeError(`${context} is not a function.`);
          }
        }
        function isObject(x) {
          return typeof x === "object" && x !== null || typeof x === "function";
        }
        function assertObject(x, context) {
          if (!isObject(x)) {
            throw new TypeError(`${context} is not an object.`);
          }
        }
        function assertRequiredArgument(x, position, context) {
          if (x === void 0) {
            throw new TypeError(`Parameter ${position} is required in '${context}'.`);
          }
        }
        function assertRequiredField(x, field, context) {
          if (x === void 0) {
            throw new TypeError(`${field} is required in '${context}'.`);
          }
        }
        function convertUnrestrictedDouble(value) {
          return Number(value);
        }
        function censorNegativeZero(x) {
          return x === 0 ? 0 : x;
        }
        function integerPart(x) {
          return censorNegativeZero(MathTrunc(x));
        }
        function convertUnsignedLongLongWithEnforceRange(value, context) {
          const lowerBound = 0;
          const upperBound = Number.MAX_SAFE_INTEGER;
          let x = Number(value);
          x = censorNegativeZero(x);
          if (!NumberIsFinite(x)) {
            throw new TypeError(`${context} is not a finite number`);
          }
          x = integerPart(x);
          if (x < lowerBound || x > upperBound) {
            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
          }
          if (!NumberIsFinite(x) || x === 0) {
            return 0;
          }
          return x;
        }
        function assertReadableStream(x, context) {
          if (!IsReadableStream(x)) {
            throw new TypeError(`${context} is not a ReadableStream.`);
          }
        }
        function AcquireReadableStreamDefaultReader(stream) {
          return new ReadableStreamDefaultReader(stream);
        }
        function ReadableStreamAddReadRequest(stream, readRequest) {
          stream._reader._readRequests.push(readRequest);
        }
        function ReadableStreamFulfillReadRequest(stream, chunk, done) {
          const reader = stream._reader;
          const readRequest = reader._readRequests.shift();
          if (done) {
            readRequest._closeSteps();
          } else {
            readRequest._chunkSteps(chunk);
          }
        }
        function ReadableStreamGetNumReadRequests(stream) {
          return stream._reader._readRequests.length;
        }
        function ReadableStreamHasDefaultReader(stream) {
          const reader = stream._reader;
          if (reader === void 0) {
            return false;
          }
          if (!IsReadableStreamDefaultReader(reader)) {
            return false;
          }
          return true;
        }
        class ReadableStreamDefaultReader {
          constructor(stream) {
            assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
            assertReadableStream(stream, "First parameter");
            if (IsReadableStreamLocked(stream)) {
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readRequests = new SimpleQueue();
          }
          get closed() {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
            }
            return this._closedPromise;
          }
          cancel(reason = void 0) {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
            }
            if (this._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("cancel"));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
          }
          read() {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(defaultReaderBrandCheckException("read"));
            }
            if (this._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("read from"));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve2, reject) => {
              resolvePromise = resolve2;
              rejectPromise = reject;
            });
            const readRequest = {
              _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
              _closeSteps: () => resolvePromise({ value: void 0, done: true }),
              _errorSteps: (e) => rejectPromise(e)
            };
            ReadableStreamDefaultReaderRead(this, readRequest);
            return promise;
          }
          releaseLock() {
            if (!IsReadableStreamDefaultReader(this)) {
              throw defaultReaderBrandCheckException("releaseLock");
            }
            if (this._ownerReadableStream === void 0) {
              return;
            }
            if (this._readRequests.length > 0) {
              throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
            }
            ReadableStreamReaderGenericRelease(this);
          }
        }
        Object.defineProperties(ReadableStreamDefaultReader.prototype, {
          cancel: { enumerable: true },
          read: { enumerable: true },
          releaseLock: { enumerable: true },
          closed: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableStreamDefaultReader",
            configurable: true
          });
        }
        function IsReadableStreamDefaultReader(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
            return false;
          }
          return x instanceof ReadableStreamDefaultReader;
        }
        function ReadableStreamDefaultReaderRead(reader, readRequest) {
          const stream = reader._ownerReadableStream;
          stream._disturbed = true;
          if (stream._state === "closed") {
            readRequest._closeSteps();
          } else if (stream._state === "errored") {
            readRequest._errorSteps(stream._storedError);
          } else {
            stream._readableStreamController[PullSteps](readRequest);
          }
        }
        function defaultReaderBrandCheckException(name) {
          return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
        }
        const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
        }).prototype);
        class ReadableStreamAsyncIteratorImpl {
          constructor(reader, preventCancel) {
            this._ongoingPromise = void 0;
            this._isFinished = false;
            this._reader = reader;
            this._preventCancel = preventCancel;
          }
          next() {
            const nextSteps = () => this._nextSteps();
            this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
            return this._ongoingPromise;
          }
          return(value) {
            const returnSteps = () => this._returnSteps(value);
            return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
          }
          _nextSteps() {
            if (this._isFinished) {
              return Promise.resolve({ value: void 0, done: true });
            }
            const reader = this._reader;
            if (reader._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("iterate"));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve2, reject) => {
              resolvePromise = resolve2;
              rejectPromise = reject;
            });
            const readRequest = {
              _chunkSteps: (chunk) => {
                this._ongoingPromise = void 0;
                queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
              },
              _closeSteps: () => {
                this._ongoingPromise = void 0;
                this._isFinished = true;
                ReadableStreamReaderGenericRelease(reader);
                resolvePromise({ value: void 0, done: true });
              },
              _errorSteps: (reason) => {
                this._ongoingPromise = void 0;
                this._isFinished = true;
                ReadableStreamReaderGenericRelease(reader);
                rejectPromise(reason);
              }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promise;
          }
          _returnSteps(value) {
            if (this._isFinished) {
              return Promise.resolve({ value, done: true });
            }
            this._isFinished = true;
            const reader = this._reader;
            if (reader._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("finish iterating"));
            }
            if (!this._preventCancel) {
              const result = ReadableStreamReaderGenericCancel(reader, value);
              ReadableStreamReaderGenericRelease(reader);
              return transformPromiseWith(result, () => ({ value, done: true }));
            }
            ReadableStreamReaderGenericRelease(reader);
            return promiseResolvedWith({ value, done: true });
          }
        }
        const ReadableStreamAsyncIteratorPrototype = {
          next() {
            if (!IsReadableStreamAsyncIterator(this)) {
              return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
            }
            return this._asyncIteratorImpl.next();
          },
          return(value) {
            if (!IsReadableStreamAsyncIterator(this)) {
              return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
            }
            return this._asyncIteratorImpl.return(value);
          }
        };
        if (AsyncIteratorPrototype !== void 0) {
          Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
        }
        function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
          const reader = AcquireReadableStreamDefaultReader(stream);
          const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
          const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
          iterator._asyncIteratorImpl = impl;
          return iterator;
        }
        function IsReadableStreamAsyncIterator(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl")) {
            return false;
          }
          try {
            return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
          } catch (_a) {
            return false;
          }
        }
        function streamAsyncIteratorBrandCheckException(name) {
          return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
        }
        const NumberIsNaN = Number.isNaN || function(x) {
          return x !== x;
        };
        function CreateArrayFromList(elements) {
          return elements.slice();
        }
        function CopyDataBlockBytes(dest, destOffset, src2, srcOffset, n) {
          new Uint8Array(dest).set(new Uint8Array(src2, srcOffset, n), destOffset);
        }
        function TransferArrayBuffer(O) {
          return O;
        }
        function IsDetachedBuffer(O) {
          return false;
        }
        function ArrayBufferSlice(buffer, begin, end) {
          if (buffer.slice) {
            return buffer.slice(begin, end);
          }
          const length = end - begin;
          const slice = new ArrayBuffer(length);
          CopyDataBlockBytes(slice, 0, buffer, begin, length);
          return slice;
        }
        function IsNonNegativeNumber(v) {
          if (typeof v !== "number") {
            return false;
          }
          if (NumberIsNaN(v)) {
            return false;
          }
          if (v < 0) {
            return false;
          }
          return true;
        }
        function CloneAsUint8Array(O) {
          const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
          return new Uint8Array(buffer);
        }
        function DequeueValue(container) {
          const pair = container._queue.shift();
          container._queueTotalSize -= pair.size;
          if (container._queueTotalSize < 0) {
            container._queueTotalSize = 0;
          }
          return pair.value;
        }
        function EnqueueValueWithSize(container, value, size) {
          if (!IsNonNegativeNumber(size) || size === Infinity) {
            throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
          }
          container._queue.push({ value, size });
          container._queueTotalSize += size;
        }
        function PeekQueueValue(container) {
          const pair = container._queue.peek();
          return pair.value;
        }
        function ResetQueue(container) {
          container._queue = new SimpleQueue();
          container._queueTotalSize = 0;
        }
        class ReadableStreamBYOBRequest {
          constructor() {
            throw new TypeError("Illegal constructor");
          }
          get view() {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException("view");
            }
            return this._view;
          }
          respond(bytesWritten) {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException("respond");
            }
            assertRequiredArgument(bytesWritten, 1, "respond");
            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
            if (this._associatedReadableByteStreamController === void 0) {
              throw new TypeError("This BYOB request has been invalidated");
            }
            if (IsDetachedBuffer(this._view.buffer))
              ;
            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
          }
          respondWithNewView(view) {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException("respondWithNewView");
            }
            assertRequiredArgument(view, 1, "respondWithNewView");
            if (!ArrayBuffer.isView(view)) {
              throw new TypeError("You can only respond with array buffer views");
            }
            if (this._associatedReadableByteStreamController === void 0) {
              throw new TypeError("This BYOB request has been invalidated");
            }
            if (IsDetachedBuffer(view.buffer))
              ;
            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
          }
        }
        Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
          respond: { enumerable: true },
          respondWithNewView: { enumerable: true },
          view: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableStreamBYOBRequest",
            configurable: true
          });
        }
        class ReadableByteStreamController {
          constructor() {
            throw new TypeError("Illegal constructor");
          }
          get byobRequest() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException("byobRequest");
            }
            return ReadableByteStreamControllerGetBYOBRequest(this);
          }
          get desiredSize() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException("desiredSize");
            }
            return ReadableByteStreamControllerGetDesiredSize(this);
          }
          close() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException("close");
            }
            if (this._closeRequested) {
              throw new TypeError("The stream has already been closed; do not close it again!");
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== "readable") {
              throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
            }
            ReadableByteStreamControllerClose(this);
          }
          enqueue(chunk) {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException("enqueue");
            }
            assertRequiredArgument(chunk, 1, "enqueue");
            if (!ArrayBuffer.isView(chunk)) {
              throw new TypeError("chunk must be an array buffer view");
            }
            if (chunk.byteLength === 0) {
              throw new TypeError("chunk must have non-zero byteLength");
            }
            if (chunk.buffer.byteLength === 0) {
              throw new TypeError(`chunk's buffer must have non-zero byteLength`);
            }
            if (this._closeRequested) {
              throw new TypeError("stream is closed or draining");
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== "readable") {
              throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
            }
            ReadableByteStreamControllerEnqueue(this, chunk);
          }
          error(e = void 0) {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException("error");
            }
            ReadableByteStreamControllerError(this, e);
          }
          [CancelSteps](reason) {
            ReadableByteStreamControllerClearPendingPullIntos(this);
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableByteStreamControllerClearAlgorithms(this);
            return result;
          }
          [PullSteps](readRequest) {
            const stream = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
              const entry = this._queue.shift();
              this._queueTotalSize -= entry.byteLength;
              ReadableByteStreamControllerHandleQueueDrain(this);
              const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
              readRequest._chunkSteps(view);
              return;
            }
            const autoAllocateChunkSize = this._autoAllocateChunkSize;
            if (autoAllocateChunkSize !== void 0) {
              let buffer;
              try {
                buffer = new ArrayBuffer(autoAllocateChunkSize);
              } catch (bufferE) {
                readRequest._errorSteps(bufferE);
                return;
              }
              const pullIntoDescriptor = {
                buffer,
                bufferByteLength: autoAllocateChunkSize,
                byteOffset: 0,
                byteLength: autoAllocateChunkSize,
                bytesFilled: 0,
                elementSize: 1,
                viewConstructor: Uint8Array,
                readerType: "default"
              };
              this._pendingPullIntos.push(pullIntoDescriptor);
            }
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableByteStreamControllerCallPullIfNeeded(this);
          }
        }
        Object.defineProperties(ReadableByteStreamController.prototype, {
          close: { enumerable: true },
          enqueue: { enumerable: true },
          error: { enumerable: true },
          byobRequest: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableByteStreamController",
            configurable: true
          });
        }
        function IsReadableByteStreamController(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream")) {
            return false;
          }
          return x instanceof ReadableByteStreamController;
        }
        function IsReadableStreamBYOBRequest(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
            return false;
          }
          return x instanceof ReadableStreamBYOBRequest;
        }
        function ReadableByteStreamControllerCallPullIfNeeded(controller) {
          const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
          if (!shouldPull) {
            return;
          }
          if (controller._pulling) {
            controller._pullAgain = true;
            return;
          }
          controller._pulling = true;
          const pullPromise = controller._pullAlgorithm();
          uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
              controller._pullAgain = false;
              ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
          }, (e) => {
            ReadableByteStreamControllerError(controller, e);
          });
        }
        function ReadableByteStreamControllerClearPendingPullIntos(controller) {
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          controller._pendingPullIntos = new SimpleQueue();
        }
        function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
          let done = false;
          if (stream._state === "closed") {
            done = true;
          }
          const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
          if (pullIntoDescriptor.readerType === "default") {
            ReadableStreamFulfillReadRequest(stream, filledView, done);
          } else {
            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
          }
        }
        function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
          const bytesFilled = pullIntoDescriptor.bytesFilled;
          const elementSize = pullIntoDescriptor.elementSize;
          return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
        }
        function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
          controller._queue.push({ buffer, byteOffset, byteLength });
          controller._queueTotalSize += byteLength;
        }
        function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
          const elementSize = pullIntoDescriptor.elementSize;
          const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
          const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
          const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
          const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
          let totalBytesToCopyRemaining = maxBytesToCopy;
          let ready = false;
          if (maxAlignedBytes > currentAlignedBytes) {
            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
            ready = true;
          }
          const queue = controller._queue;
          while (totalBytesToCopyRemaining > 0) {
            const headOfQueue = queue.peek();
            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
            if (headOfQueue.byteLength === bytesToCopy) {
              queue.shift();
            } else {
              headOfQueue.byteOffset += bytesToCopy;
              headOfQueue.byteLength -= bytesToCopy;
            }
            controller._queueTotalSize -= bytesToCopy;
            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
            totalBytesToCopyRemaining -= bytesToCopy;
          }
          return ready;
        }
        function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
          pullIntoDescriptor.bytesFilled += size;
        }
        function ReadableByteStreamControllerHandleQueueDrain(controller) {
          if (controller._queueTotalSize === 0 && controller._closeRequested) {
            ReadableByteStreamControllerClearAlgorithms(controller);
            ReadableStreamClose(controller._controlledReadableByteStream);
          } else {
            ReadableByteStreamControllerCallPullIfNeeded(controller);
          }
        }
        function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
          if (controller._byobRequest === null) {
            return;
          }
          controller._byobRequest._associatedReadableByteStreamController = void 0;
          controller._byobRequest._view = null;
          controller._byobRequest = null;
        }
        function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
          while (controller._pendingPullIntos.length > 0) {
            if (controller._queueTotalSize === 0) {
              return;
            }
            const pullIntoDescriptor = controller._pendingPullIntos.peek();
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
              ReadableByteStreamControllerShiftPendingPullInto(controller);
              ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
            }
          }
        }
        function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
          const stream = controller._controlledReadableByteStream;
          let elementSize = 1;
          if (view.constructor !== DataView) {
            elementSize = view.constructor.BYTES_PER_ELEMENT;
          }
          const ctor = view.constructor;
          const buffer = TransferArrayBuffer(view.buffer);
          const pullIntoDescriptor = {
            buffer,
            bufferByteLength: buffer.byteLength,
            byteOffset: view.byteOffset,
            byteLength: view.byteLength,
            bytesFilled: 0,
            elementSize,
            viewConstructor: ctor,
            readerType: "byob"
          };
          if (controller._pendingPullIntos.length > 0) {
            controller._pendingPullIntos.push(pullIntoDescriptor);
            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
            return;
          }
          if (stream._state === "closed") {
            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
            readIntoRequest._closeSteps(emptyView);
            return;
          }
          if (controller._queueTotalSize > 0) {
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
              const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
              ReadableByteStreamControllerHandleQueueDrain(controller);
              readIntoRequest._chunkSteps(filledView);
              return;
            }
            if (controller._closeRequested) {
              const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
              ReadableByteStreamControllerError(controller, e);
              readIntoRequest._errorSteps(e);
              return;
            }
          }
          controller._pendingPullIntos.push(pullIntoDescriptor);
          ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
        function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
          const stream = controller._controlledReadableByteStream;
          if (ReadableStreamHasBYOBReader(stream)) {
            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
              const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
              ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
            }
          }
        }
        function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
          if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
            return;
          }
          ReadableByteStreamControllerShiftPendingPullInto(controller);
          const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
          if (remainderSize > 0) {
            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
          }
          pullIntoDescriptor.bytesFilled -= remainderSize;
          ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        }
        function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          const state = controller._controlledReadableByteStream._state;
          if (state === "closed") {
            ReadableByteStreamControllerRespondInClosedState(controller);
          } else {
            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
          }
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
        function ReadableByteStreamControllerShiftPendingPullInto(controller) {
          const descriptor = controller._pendingPullIntos.shift();
          return descriptor;
        }
        function ReadableByteStreamControllerShouldCallPull(controller) {
          const stream = controller._controlledReadableByteStream;
          if (stream._state !== "readable") {
            return false;
          }
          if (controller._closeRequested) {
            return false;
          }
          if (!controller._started) {
            return false;
          }
          if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
          }
          if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            return true;
          }
          const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
          if (desiredSize > 0) {
            return true;
          }
          return false;
        }
        function ReadableByteStreamControllerClearAlgorithms(controller) {
          controller._pullAlgorithm = void 0;
          controller._cancelAlgorithm = void 0;
        }
        function ReadableByteStreamControllerClose(controller) {
          const stream = controller._controlledReadableByteStream;
          if (controller._closeRequested || stream._state !== "readable") {
            return;
          }
          if (controller._queueTotalSize > 0) {
            controller._closeRequested = true;
            return;
          }
          if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (firstPendingPullInto.bytesFilled > 0) {
              const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
              ReadableByteStreamControllerError(controller, e);
              throw e;
            }
          }
          ReadableByteStreamControllerClearAlgorithms(controller);
          ReadableStreamClose(stream);
        }
        function ReadableByteStreamControllerEnqueue(controller, chunk) {
          const stream = controller._controlledReadableByteStream;
          if (controller._closeRequested || stream._state !== "readable") {
            return;
          }
          const buffer = chunk.buffer;
          const byteOffset = chunk.byteOffset;
          const byteLength = chunk.byteLength;
          const transferredBuffer = TransferArrayBuffer(buffer);
          if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (IsDetachedBuffer(firstPendingPullInto.buffer))
              ;
            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
          }
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          if (ReadableStreamHasDefaultReader(stream)) {
            if (ReadableStreamGetNumReadRequests(stream) === 0) {
              ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            } else {
              const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
              ReadableStreamFulfillReadRequest(stream, transferredView, false);
            }
          } else if (ReadableStreamHasBYOBReader(stream)) {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
          } else {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          }
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
        function ReadableByteStreamControllerError(controller, e) {
          const stream = controller._controlledReadableByteStream;
          if (stream._state !== "readable") {
            return;
          }
          ReadableByteStreamControllerClearPendingPullIntos(controller);
          ResetQueue(controller);
          ReadableByteStreamControllerClearAlgorithms(controller);
          ReadableStreamError(stream, e);
        }
        function ReadableByteStreamControllerGetBYOBRequest(controller) {
          if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
            const firstDescriptor = controller._pendingPullIntos.peek();
            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
            controller._byobRequest = byobRequest;
          }
          return controller._byobRequest;
        }
        function ReadableByteStreamControllerGetDesiredSize(controller) {
          const state = controller._controlledReadableByteStream._state;
          if (state === "errored") {
            return null;
          }
          if (state === "closed") {
            return 0;
          }
          return controller._strategyHWM - controller._queueTotalSize;
        }
        function ReadableByteStreamControllerRespond(controller, bytesWritten) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          const state = controller._controlledReadableByteStream._state;
          if (state === "closed") {
            if (bytesWritten !== 0) {
              throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
            }
          } else {
            if (bytesWritten === 0) {
              throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
            }
            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
              throw new RangeError("bytesWritten out of range");
            }
          }
          firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
          ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
        }
        function ReadableByteStreamControllerRespondWithNewView(controller, view) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          const state = controller._controlledReadableByteStream._state;
          if (state === "closed") {
            if (view.byteLength !== 0) {
              throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
            }
          } else {
            if (view.byteLength === 0) {
              throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
            }
          }
          if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
            throw new RangeError("The region specified by view does not match byobRequest");
          }
          if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
            throw new RangeError("The buffer of view has different capacity than byobRequest");
          }
          if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
            throw new RangeError("The region specified by view is larger than byobRequest");
          }
          firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
          ReadableByteStreamControllerRespondInternal(controller, view.byteLength);
        }
        function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
          controller._controlledReadableByteStream = stream;
          controller._pullAgain = false;
          controller._pulling = false;
          controller._byobRequest = null;
          controller._queue = controller._queueTotalSize = void 0;
          ResetQueue(controller);
          controller._closeRequested = false;
          controller._started = false;
          controller._strategyHWM = highWaterMark;
          controller._pullAlgorithm = pullAlgorithm;
          controller._cancelAlgorithm = cancelAlgorithm;
          controller._autoAllocateChunkSize = autoAllocateChunkSize;
          controller._pendingPullIntos = new SimpleQueue();
          stream._readableStreamController = controller;
          const startResult = startAlgorithm();
          uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
          }, (r) => {
            ReadableByteStreamControllerError(controller, r);
          });
        }
        function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
          const controller = Object.create(ReadableByteStreamController.prototype);
          let startAlgorithm = () => void 0;
          let pullAlgorithm = () => promiseResolvedWith(void 0);
          let cancelAlgorithm = () => promiseResolvedWith(void 0);
          if (underlyingByteSource.start !== void 0) {
            startAlgorithm = () => underlyingByteSource.start(controller);
          }
          if (underlyingByteSource.pull !== void 0) {
            pullAlgorithm = () => underlyingByteSource.pull(controller);
          }
          if (underlyingByteSource.cancel !== void 0) {
            cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
          }
          const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
          if (autoAllocateChunkSize === 0) {
            throw new TypeError("autoAllocateChunkSize must be greater than 0");
          }
          SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
        }
        function SetUpReadableStreamBYOBRequest(request, controller, view) {
          request._associatedReadableByteStreamController = controller;
          request._view = view;
        }
        function byobRequestBrandCheckException(name) {
          return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
        }
        function byteStreamControllerBrandCheckException(name) {
          return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
        }
        function AcquireReadableStreamBYOBReader(stream) {
          return new ReadableStreamBYOBReader(stream);
        }
        function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
          stream._reader._readIntoRequests.push(readIntoRequest);
        }
        function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
          const reader = stream._reader;
          const readIntoRequest = reader._readIntoRequests.shift();
          if (done) {
            readIntoRequest._closeSteps(chunk);
          } else {
            readIntoRequest._chunkSteps(chunk);
          }
        }
        function ReadableStreamGetNumReadIntoRequests(stream) {
          return stream._reader._readIntoRequests.length;
        }
        function ReadableStreamHasBYOBReader(stream) {
          const reader = stream._reader;
          if (reader === void 0) {
            return false;
          }
          if (!IsReadableStreamBYOBReader(reader)) {
            return false;
          }
          return true;
        }
        class ReadableStreamBYOBReader {
          constructor(stream) {
            assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
            assertReadableStream(stream, "First parameter");
            if (IsReadableStreamLocked(stream)) {
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            }
            if (!IsReadableByteStreamController(stream._readableStreamController)) {
              throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readIntoRequests = new SimpleQueue();
          }
          get closed() {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(byobReaderBrandCheckException("closed"));
            }
            return this._closedPromise;
          }
          cancel(reason = void 0) {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
            }
            if (this._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("cancel"));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
          }
          read(view) {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(byobReaderBrandCheckException("read"));
            }
            if (!ArrayBuffer.isView(view)) {
              return promiseRejectedWith(new TypeError("view must be an array buffer view"));
            }
            if (view.byteLength === 0) {
              return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
            }
            if (view.buffer.byteLength === 0) {
              return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
            }
            if (IsDetachedBuffer(view.buffer))
              ;
            if (this._ownerReadableStream === void 0) {
              return promiseRejectedWith(readerLockException("read from"));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve2, reject) => {
              resolvePromise = resolve2;
              rejectPromise = reject;
            });
            const readIntoRequest = {
              _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
              _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
              _errorSteps: (e) => rejectPromise(e)
            };
            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
            return promise;
          }
          releaseLock() {
            if (!IsReadableStreamBYOBReader(this)) {
              throw byobReaderBrandCheckException("releaseLock");
            }
            if (this._ownerReadableStream === void 0) {
              return;
            }
            if (this._readIntoRequests.length > 0) {
              throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
            }
            ReadableStreamReaderGenericRelease(this);
          }
        }
        Object.defineProperties(ReadableStreamBYOBReader.prototype, {
          cancel: { enumerable: true },
          read: { enumerable: true },
          releaseLock: { enumerable: true },
          closed: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableStreamBYOBReader",
            configurable: true
          });
        }
        function IsReadableStreamBYOBReader(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
            return false;
          }
          return x instanceof ReadableStreamBYOBReader;
        }
        function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
          const stream = reader._ownerReadableStream;
          stream._disturbed = true;
          if (stream._state === "errored") {
            readIntoRequest._errorSteps(stream._storedError);
          } else {
            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
          }
        }
        function byobReaderBrandCheckException(name) {
          return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
        }
        function ExtractHighWaterMark(strategy, defaultHWM) {
          const { highWaterMark } = strategy;
          if (highWaterMark === void 0) {
            return defaultHWM;
          }
          if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
            throw new RangeError("Invalid highWaterMark");
          }
          return highWaterMark;
        }
        function ExtractSizeAlgorithm(strategy) {
          const { size } = strategy;
          if (!size) {
            return () => 1;
          }
          return size;
        }
        function convertQueuingStrategy(init2, context) {
          assertDictionary(init2, context);
          const highWaterMark = init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
          const size = init2 === null || init2 === void 0 ? void 0 : init2.size;
          return {
            highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
            size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)
          };
        }
        function convertQueuingStrategySize(fn, context) {
          assertFunction(fn, context);
          return (chunk) => convertUnrestrictedDouble(fn(chunk));
        }
        function convertUnderlyingSink(original, context) {
          assertDictionary(original, context);
          const abort = original === null || original === void 0 ? void 0 : original.abort;
          const close = original === null || original === void 0 ? void 0 : original.close;
          const start = original === null || original === void 0 ? void 0 : original.start;
          const type = original === null || original === void 0 ? void 0 : original.type;
          const write = original === null || original === void 0 ? void 0 : original.write;
          return {
            abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
            close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
            start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
            write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
            type
          };
        }
        function convertUnderlyingSinkAbortCallback(fn, original, context) {
          assertFunction(fn, context);
          return (reason) => promiseCall(fn, original, [reason]);
        }
        function convertUnderlyingSinkCloseCallback(fn, original, context) {
          assertFunction(fn, context);
          return () => promiseCall(fn, original, []);
        }
        function convertUnderlyingSinkStartCallback(fn, original, context) {
          assertFunction(fn, context);
          return (controller) => reflectCall(fn, original, [controller]);
        }
        function convertUnderlyingSinkWriteCallback(fn, original, context) {
          assertFunction(fn, context);
          return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
        }
        function assertWritableStream(x, context) {
          if (!IsWritableStream(x)) {
            throw new TypeError(`${context} is not a WritableStream.`);
          }
        }
        function isAbortSignal2(value) {
          if (typeof value !== "object" || value === null) {
            return false;
          }
          try {
            return typeof value.aborted === "boolean";
          } catch (_a) {
            return false;
          }
        }
        const supportsAbortController = typeof AbortController === "function";
        function createAbortController() {
          if (supportsAbortController) {
            return new AbortController();
          }
          return void 0;
        }
        class WritableStream {
          constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
            if (rawUnderlyingSink === void 0) {
              rawUnderlyingSink = null;
            } else {
              assertObject(rawUnderlyingSink, "First parameter");
            }
            const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
            InitializeWritableStream(this);
            const type = underlyingSink.type;
            if (type !== void 0) {
              throw new RangeError("Invalid type is specified");
            }
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
          }
          get locked() {
            if (!IsWritableStream(this)) {
              throw streamBrandCheckException$2("locked");
            }
            return IsWritableStreamLocked(this);
          }
          abort(reason = void 0) {
            if (!IsWritableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$2("abort"));
            }
            if (IsWritableStreamLocked(this)) {
              return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
            }
            return WritableStreamAbort(this, reason);
          }
          close() {
            if (!IsWritableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$2("close"));
            }
            if (IsWritableStreamLocked(this)) {
              return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
            }
            if (WritableStreamCloseQueuedOrInFlight(this)) {
              return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
            }
            return WritableStreamClose(this);
          }
          getWriter() {
            if (!IsWritableStream(this)) {
              throw streamBrandCheckException$2("getWriter");
            }
            return AcquireWritableStreamDefaultWriter(this);
          }
        }
        Object.defineProperties(WritableStream.prototype, {
          abort: { enumerable: true },
          close: { enumerable: true },
          getWriter: { enumerable: true },
          locked: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
            value: "WritableStream",
            configurable: true
          });
        }
        function AcquireWritableStreamDefaultWriter(stream) {
          return new WritableStreamDefaultWriter(stream);
        }
        function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
          const stream = Object.create(WritableStream.prototype);
          InitializeWritableStream(stream);
          const controller = Object.create(WritableStreamDefaultController.prototype);
          SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
          return stream;
        }
        function InitializeWritableStream(stream) {
          stream._state = "writable";
          stream._storedError = void 0;
          stream._writer = void 0;
          stream._writableStreamController = void 0;
          stream._writeRequests = new SimpleQueue();
          stream._inFlightWriteRequest = void 0;
          stream._closeRequest = void 0;
          stream._inFlightCloseRequest = void 0;
          stream._pendingAbortRequest = void 0;
          stream._backpressure = false;
        }
        function IsWritableStream(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
            return false;
          }
          return x instanceof WritableStream;
        }
        function IsWritableStreamLocked(stream) {
          if (stream._writer === void 0) {
            return false;
          }
          return true;
        }
        function WritableStreamAbort(stream, reason) {
          var _a;
          if (stream._state === "closed" || stream._state === "errored") {
            return promiseResolvedWith(void 0);
          }
          stream._writableStreamController._abortReason = reason;
          (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();
          const state = stream._state;
          if (state === "closed" || state === "errored") {
            return promiseResolvedWith(void 0);
          }
          if (stream._pendingAbortRequest !== void 0) {
            return stream._pendingAbortRequest._promise;
          }
          let wasAlreadyErroring = false;
          if (state === "erroring") {
            wasAlreadyErroring = true;
            reason = void 0;
          }
          const promise = newPromise((resolve2, reject) => {
            stream._pendingAbortRequest = {
              _promise: void 0,
              _resolve: resolve2,
              _reject: reject,
              _reason: reason,
              _wasAlreadyErroring: wasAlreadyErroring
            };
          });
          stream._pendingAbortRequest._promise = promise;
          if (!wasAlreadyErroring) {
            WritableStreamStartErroring(stream, reason);
          }
          return promise;
        }
        function WritableStreamClose(stream) {
          const state = stream._state;
          if (state === "closed" || state === "errored") {
            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
          }
          const promise = newPromise((resolve2, reject) => {
            const closeRequest = {
              _resolve: resolve2,
              _reject: reject
            };
            stream._closeRequest = closeRequest;
          });
          const writer = stream._writer;
          if (writer !== void 0 && stream._backpressure && state === "writable") {
            defaultWriterReadyPromiseResolve(writer);
          }
          WritableStreamDefaultControllerClose(stream._writableStreamController);
          return promise;
        }
        function WritableStreamAddWriteRequest(stream) {
          const promise = newPromise((resolve2, reject) => {
            const writeRequest = {
              _resolve: resolve2,
              _reject: reject
            };
            stream._writeRequests.push(writeRequest);
          });
          return promise;
        }
        function WritableStreamDealWithRejection(stream, error2) {
          const state = stream._state;
          if (state === "writable") {
            WritableStreamStartErroring(stream, error2);
            return;
          }
          WritableStreamFinishErroring(stream);
        }
        function WritableStreamStartErroring(stream, reason) {
          const controller = stream._writableStreamController;
          stream._state = "erroring";
          stream._storedError = reason;
          const writer = stream._writer;
          if (writer !== void 0) {
            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
          }
          if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
            WritableStreamFinishErroring(stream);
          }
        }
        function WritableStreamFinishErroring(stream) {
          stream._state = "errored";
          stream._writableStreamController[ErrorSteps]();
          const storedError = stream._storedError;
          stream._writeRequests.forEach((writeRequest) => {
            writeRequest._reject(storedError);
          });
          stream._writeRequests = new SimpleQueue();
          if (stream._pendingAbortRequest === void 0) {
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
          }
          const abortRequest = stream._pendingAbortRequest;
          stream._pendingAbortRequest = void 0;
          if (abortRequest._wasAlreadyErroring) {
            abortRequest._reject(storedError);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
          }
          const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
          uponPromise(promise, () => {
            abortRequest._resolve();
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          }, (reason) => {
            abortRequest._reject(reason);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          });
        }
        function WritableStreamFinishInFlightWrite(stream) {
          stream._inFlightWriteRequest._resolve(void 0);
          stream._inFlightWriteRequest = void 0;
        }
        function WritableStreamFinishInFlightWriteWithError(stream, error2) {
          stream._inFlightWriteRequest._reject(error2);
          stream._inFlightWriteRequest = void 0;
          WritableStreamDealWithRejection(stream, error2);
        }
        function WritableStreamFinishInFlightClose(stream) {
          stream._inFlightCloseRequest._resolve(void 0);
          stream._inFlightCloseRequest = void 0;
          const state = stream._state;
          if (state === "erroring") {
            stream._storedError = void 0;
            if (stream._pendingAbortRequest !== void 0) {
              stream._pendingAbortRequest._resolve();
              stream._pendingAbortRequest = void 0;
            }
          }
          stream._state = "closed";
          const writer = stream._writer;
          if (writer !== void 0) {
            defaultWriterClosedPromiseResolve(writer);
          }
        }
        function WritableStreamFinishInFlightCloseWithError(stream, error2) {
          stream._inFlightCloseRequest._reject(error2);
          stream._inFlightCloseRequest = void 0;
          if (stream._pendingAbortRequest !== void 0) {
            stream._pendingAbortRequest._reject(error2);
            stream._pendingAbortRequest = void 0;
          }
          WritableStreamDealWithRejection(stream, error2);
        }
        function WritableStreamCloseQueuedOrInFlight(stream) {
          if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
            return false;
          }
          return true;
        }
        function WritableStreamHasOperationMarkedInFlight(stream) {
          if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
            return false;
          }
          return true;
        }
        function WritableStreamMarkCloseRequestInFlight(stream) {
          stream._inFlightCloseRequest = stream._closeRequest;
          stream._closeRequest = void 0;
        }
        function WritableStreamMarkFirstWriteRequestInFlight(stream) {
          stream._inFlightWriteRequest = stream._writeRequests.shift();
        }
        function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
          if (stream._closeRequest !== void 0) {
            stream._closeRequest._reject(stream._storedError);
            stream._closeRequest = void 0;
          }
          const writer = stream._writer;
          if (writer !== void 0) {
            defaultWriterClosedPromiseReject(writer, stream._storedError);
          }
        }
        function WritableStreamUpdateBackpressure(stream, backpressure) {
          const writer = stream._writer;
          if (writer !== void 0 && backpressure !== stream._backpressure) {
            if (backpressure) {
              defaultWriterReadyPromiseReset(writer);
            } else {
              defaultWriterReadyPromiseResolve(writer);
            }
          }
          stream._backpressure = backpressure;
        }
        class WritableStreamDefaultWriter {
          constructor(stream) {
            assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
            assertWritableStream(stream, "First parameter");
            if (IsWritableStreamLocked(stream)) {
              throw new TypeError("This stream has already been locked for exclusive writing by another writer");
            }
            this._ownerWritableStream = stream;
            stream._writer = this;
            const state = stream._state;
            if (state === "writable") {
              if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                defaultWriterReadyPromiseInitialize(this);
              } else {
                defaultWriterReadyPromiseInitializeAsResolved(this);
              }
              defaultWriterClosedPromiseInitialize(this);
            } else if (state === "erroring") {
              defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
              defaultWriterClosedPromiseInitialize(this);
            } else if (state === "closed") {
              defaultWriterReadyPromiseInitializeAsResolved(this);
              defaultWriterClosedPromiseInitializeAsResolved(this);
            } else {
              const storedError = stream._storedError;
              defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
              defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
            }
          }
          get closed() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
            }
            return this._closedPromise;
          }
          get desiredSize() {
            if (!IsWritableStreamDefaultWriter(this)) {
              throw defaultWriterBrandCheckException("desiredSize");
            }
            if (this._ownerWritableStream === void 0) {
              throw defaultWriterLockException("desiredSize");
            }
            return WritableStreamDefaultWriterGetDesiredSize(this);
          }
          get ready() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
            }
            return this._readyPromise;
          }
          abort(reason = void 0) {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
            }
            if (this._ownerWritableStream === void 0) {
              return promiseRejectedWith(defaultWriterLockException("abort"));
            }
            return WritableStreamDefaultWriterAbort(this, reason);
          }
          close() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(defaultWriterBrandCheckException("close"));
            }
            const stream = this._ownerWritableStream;
            if (stream === void 0) {
              return promiseRejectedWith(defaultWriterLockException("close"));
            }
            if (WritableStreamCloseQueuedOrInFlight(stream)) {
              return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
            }
            return WritableStreamDefaultWriterClose(this);
          }
          releaseLock() {
            if (!IsWritableStreamDefaultWriter(this)) {
              throw defaultWriterBrandCheckException("releaseLock");
            }
            const stream = this._ownerWritableStream;
            if (stream === void 0) {
              return;
            }
            WritableStreamDefaultWriterRelease(this);
          }
          write(chunk = void 0) {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(defaultWriterBrandCheckException("write"));
            }
            if (this._ownerWritableStream === void 0) {
              return promiseRejectedWith(defaultWriterLockException("write to"));
            }
            return WritableStreamDefaultWriterWrite(this, chunk);
          }
        }
        Object.defineProperties(WritableStreamDefaultWriter.prototype, {
          abort: { enumerable: true },
          close: { enumerable: true },
          releaseLock: { enumerable: true },
          write: { enumerable: true },
          closed: { enumerable: true },
          desiredSize: { enumerable: true },
          ready: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
            value: "WritableStreamDefaultWriter",
            configurable: true
          });
        }
        function IsWritableStreamDefaultWriter(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
            return false;
          }
          return x instanceof WritableStreamDefaultWriter;
        }
        function WritableStreamDefaultWriterAbort(writer, reason) {
          const stream = writer._ownerWritableStream;
          return WritableStreamAbort(stream, reason);
        }
        function WritableStreamDefaultWriterClose(writer) {
          const stream = writer._ownerWritableStream;
          return WritableStreamClose(stream);
        }
        function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
          const stream = writer._ownerWritableStream;
          const state = stream._state;
          if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
            return promiseResolvedWith(void 0);
          }
          if (state === "errored") {
            return promiseRejectedWith(stream._storedError);
          }
          return WritableStreamDefaultWriterClose(writer);
        }
        function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error2) {
          if (writer._closedPromiseState === "pending") {
            defaultWriterClosedPromiseReject(writer, error2);
          } else {
            defaultWriterClosedPromiseResetToRejected(writer, error2);
          }
        }
        function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error2) {
          if (writer._readyPromiseState === "pending") {
            defaultWriterReadyPromiseReject(writer, error2);
          } else {
            defaultWriterReadyPromiseResetToRejected(writer, error2);
          }
        }
        function WritableStreamDefaultWriterGetDesiredSize(writer) {
          const stream = writer._ownerWritableStream;
          const state = stream._state;
          if (state === "errored" || state === "erroring") {
            return null;
          }
          if (state === "closed") {
            return 0;
          }
          return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
        }
        function WritableStreamDefaultWriterRelease(writer) {
          const stream = writer._ownerWritableStream;
          const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
          WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
          stream._writer = void 0;
          writer._ownerWritableStream = void 0;
        }
        function WritableStreamDefaultWriterWrite(writer, chunk) {
          const stream = writer._ownerWritableStream;
          const controller = stream._writableStreamController;
          const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
          if (stream !== writer._ownerWritableStream) {
            return promiseRejectedWith(defaultWriterLockException("write to"));
          }
          const state = stream._state;
          if (state === "errored") {
            return promiseRejectedWith(stream._storedError);
          }
          if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
            return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
          }
          if (state === "erroring") {
            return promiseRejectedWith(stream._storedError);
          }
          const promise = WritableStreamAddWriteRequest(stream);
          WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
          return promise;
        }
        const closeSentinel = {};
        class WritableStreamDefaultController {
          constructor() {
            throw new TypeError("Illegal constructor");
          }
          get abortReason() {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2("abortReason");
            }
            return this._abortReason;
          }
          get signal() {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2("signal");
            }
            if (this._abortController === void 0) {
              throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
            }
            return this._abortController.signal;
          }
          error(e = void 0) {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2("error");
            }
            const state = this._controlledWritableStream._state;
            if (state !== "writable") {
              return;
            }
            WritableStreamDefaultControllerError(this, e);
          }
          [AbortSteps](reason) {
            const result = this._abortAlgorithm(reason);
            WritableStreamDefaultControllerClearAlgorithms(this);
            return result;
          }
          [ErrorSteps]() {
            ResetQueue(this);
          }
        }
        Object.defineProperties(WritableStreamDefaultController.prototype, {
          error: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: "WritableStreamDefaultController",
            configurable: true
          });
        }
        function IsWritableStreamDefaultController(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream")) {
            return false;
          }
          return x instanceof WritableStreamDefaultController;
        }
        function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
          controller._controlledWritableStream = stream;
          stream._writableStreamController = controller;
          controller._queue = void 0;
          controller._queueTotalSize = void 0;
          ResetQueue(controller);
          controller._abortReason = void 0;
          controller._abortController = createAbortController();
          controller._started = false;
          controller._strategySizeAlgorithm = sizeAlgorithm;
          controller._strategyHWM = highWaterMark;
          controller._writeAlgorithm = writeAlgorithm;
          controller._closeAlgorithm = closeAlgorithm;
          controller._abortAlgorithm = abortAlgorithm;
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
          const startResult = startAlgorithm();
          const startPromise = promiseResolvedWith(startResult);
          uponPromise(startPromise, () => {
            controller._started = true;
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          }, (r) => {
            controller._started = true;
            WritableStreamDealWithRejection(stream, r);
          });
        }
        function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
          const controller = Object.create(WritableStreamDefaultController.prototype);
          let startAlgorithm = () => void 0;
          let writeAlgorithm = () => promiseResolvedWith(void 0);
          let closeAlgorithm = () => promiseResolvedWith(void 0);
          let abortAlgorithm = () => promiseResolvedWith(void 0);
          if (underlyingSink.start !== void 0) {
            startAlgorithm = () => underlyingSink.start(controller);
          }
          if (underlyingSink.write !== void 0) {
            writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
          }
          if (underlyingSink.close !== void 0) {
            closeAlgorithm = () => underlyingSink.close();
          }
          if (underlyingSink.abort !== void 0) {
            abortAlgorithm = (reason) => underlyingSink.abort(reason);
          }
          SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        }
        function WritableStreamDefaultControllerClearAlgorithms(controller) {
          controller._writeAlgorithm = void 0;
          controller._closeAlgorithm = void 0;
          controller._abortAlgorithm = void 0;
          controller._strategySizeAlgorithm = void 0;
        }
        function WritableStreamDefaultControllerClose(controller) {
          EnqueueValueWithSize(controller, closeSentinel, 0);
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }
        function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
          try {
            return controller._strategySizeAlgorithm(chunk);
          } catch (chunkSizeE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
            return 1;
          }
        }
        function WritableStreamDefaultControllerGetDesiredSize(controller) {
          return controller._strategyHWM - controller._queueTotalSize;
        }
        function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
          try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
          } catch (enqueueE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
            return;
          }
          const stream = controller._controlledWritableStream;
          if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }
        function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
          const stream = controller._controlledWritableStream;
          if (!controller._started) {
            return;
          }
          if (stream._inFlightWriteRequest !== void 0) {
            return;
          }
          const state = stream._state;
          if (state === "erroring") {
            WritableStreamFinishErroring(stream);
            return;
          }
          if (controller._queue.length === 0) {
            return;
          }
          const value = PeekQueueValue(controller);
          if (value === closeSentinel) {
            WritableStreamDefaultControllerProcessClose(controller);
          } else {
            WritableStreamDefaultControllerProcessWrite(controller, value);
          }
        }
        function WritableStreamDefaultControllerErrorIfNeeded(controller, error2) {
          if (controller._controlledWritableStream._state === "writable") {
            WritableStreamDefaultControllerError(controller, error2);
          }
        }
        function WritableStreamDefaultControllerProcessClose(controller) {
          const stream = controller._controlledWritableStream;
          WritableStreamMarkCloseRequestInFlight(stream);
          DequeueValue(controller);
          const sinkClosePromise = controller._closeAlgorithm();
          WritableStreamDefaultControllerClearAlgorithms(controller);
          uponPromise(sinkClosePromise, () => {
            WritableStreamFinishInFlightClose(stream);
          }, (reason) => {
            WritableStreamFinishInFlightCloseWithError(stream, reason);
          });
        }
        function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
          const stream = controller._controlledWritableStream;
          WritableStreamMarkFirstWriteRequestInFlight(stream);
          const sinkWritePromise = controller._writeAlgorithm(chunk);
          uponPromise(sinkWritePromise, () => {
            WritableStreamFinishInFlightWrite(stream);
            const state = stream._state;
            DequeueValue(controller);
            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
              const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
              WritableStreamUpdateBackpressure(stream, backpressure);
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          }, (reason) => {
            if (stream._state === "writable") {
              WritableStreamDefaultControllerClearAlgorithms(controller);
            }
            WritableStreamFinishInFlightWriteWithError(stream, reason);
          });
        }
        function WritableStreamDefaultControllerGetBackpressure(controller) {
          const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
          return desiredSize <= 0;
        }
        function WritableStreamDefaultControllerError(controller, error2) {
          const stream = controller._controlledWritableStream;
          WritableStreamDefaultControllerClearAlgorithms(controller);
          WritableStreamStartErroring(stream, error2);
        }
        function streamBrandCheckException$2(name) {
          return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
        }
        function defaultControllerBrandCheckException$2(name) {
          return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
        }
        function defaultWriterBrandCheckException(name) {
          return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
        }
        function defaultWriterLockException(name) {
          return new TypeError("Cannot " + name + " a stream using a released writer");
        }
        function defaultWriterClosedPromiseInitialize(writer) {
          writer._closedPromise = newPromise((resolve2, reject) => {
            writer._closedPromise_resolve = resolve2;
            writer._closedPromise_reject = reject;
            writer._closedPromiseState = "pending";
          });
        }
        function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
          defaultWriterClosedPromiseInitialize(writer);
          defaultWriterClosedPromiseReject(writer, reason);
        }
        function defaultWriterClosedPromiseInitializeAsResolved(writer) {
          defaultWriterClosedPromiseInitialize(writer);
          defaultWriterClosedPromiseResolve(writer);
        }
        function defaultWriterClosedPromiseReject(writer, reason) {
          if (writer._closedPromise_reject === void 0) {
            return;
          }
          setPromiseIsHandledToTrue(writer._closedPromise);
          writer._closedPromise_reject(reason);
          writer._closedPromise_resolve = void 0;
          writer._closedPromise_reject = void 0;
          writer._closedPromiseState = "rejected";
        }
        function defaultWriterClosedPromiseResetToRejected(writer, reason) {
          defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
        }
        function defaultWriterClosedPromiseResolve(writer) {
          if (writer._closedPromise_resolve === void 0) {
            return;
          }
          writer._closedPromise_resolve(void 0);
          writer._closedPromise_resolve = void 0;
          writer._closedPromise_reject = void 0;
          writer._closedPromiseState = "resolved";
        }
        function defaultWriterReadyPromiseInitialize(writer) {
          writer._readyPromise = newPromise((resolve2, reject) => {
            writer._readyPromise_resolve = resolve2;
            writer._readyPromise_reject = reject;
          });
          writer._readyPromiseState = "pending";
        }
        function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
          defaultWriterReadyPromiseInitialize(writer);
          defaultWriterReadyPromiseReject(writer, reason);
        }
        function defaultWriterReadyPromiseInitializeAsResolved(writer) {
          defaultWriterReadyPromiseInitialize(writer);
          defaultWriterReadyPromiseResolve(writer);
        }
        function defaultWriterReadyPromiseReject(writer, reason) {
          if (writer._readyPromise_reject === void 0) {
            return;
          }
          setPromiseIsHandledToTrue(writer._readyPromise);
          writer._readyPromise_reject(reason);
          writer._readyPromise_resolve = void 0;
          writer._readyPromise_reject = void 0;
          writer._readyPromiseState = "rejected";
        }
        function defaultWriterReadyPromiseReset(writer) {
          defaultWriterReadyPromiseInitialize(writer);
        }
        function defaultWriterReadyPromiseResetToRejected(writer, reason) {
          defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
        }
        function defaultWriterReadyPromiseResolve(writer) {
          if (writer._readyPromise_resolve === void 0) {
            return;
          }
          writer._readyPromise_resolve(void 0);
          writer._readyPromise_resolve = void 0;
          writer._readyPromise_reject = void 0;
          writer._readyPromiseState = "fulfilled";
        }
        const NativeDOMException = typeof DOMException !== "undefined" ? DOMException : void 0;
        function isDOMExceptionConstructor(ctor) {
          if (!(typeof ctor === "function" || typeof ctor === "object")) {
            return false;
          }
          try {
            new ctor();
            return true;
          } catch (_a) {
            return false;
          }
        }
        function createDOMExceptionPolyfill() {
          const ctor = function DOMException2(message, name) {
            this.message = message || "";
            this.name = name || "Error";
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
          };
          ctor.prototype = Object.create(Error.prototype);
          Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
          return ctor;
        }
        const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
        function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
          const reader = AcquireReadableStreamDefaultReader(source);
          const writer = AcquireWritableStreamDefaultWriter(dest);
          source._disturbed = true;
          let shuttingDown = false;
          let currentWrite = promiseResolvedWith(void 0);
          return newPromise((resolve2, reject) => {
            let abortAlgorithm;
            if (signal !== void 0) {
              abortAlgorithm = () => {
                const error2 = new DOMException$1("Aborted", "AbortError");
                const actions = [];
                if (!preventAbort) {
                  actions.push(() => {
                    if (dest._state === "writable") {
                      return WritableStreamAbort(dest, error2);
                    }
                    return promiseResolvedWith(void 0);
                  });
                }
                if (!preventCancel) {
                  actions.push(() => {
                    if (source._state === "readable") {
                      return ReadableStreamCancel(source, error2);
                    }
                    return promiseResolvedWith(void 0);
                  });
                }
                shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error2);
              };
              if (signal.aborted) {
                abortAlgorithm();
                return;
              }
              signal.addEventListener("abort", abortAlgorithm);
            }
            function pipeLoop() {
              return newPromise((resolveLoop, rejectLoop) => {
                function next(done) {
                  if (done) {
                    resolveLoop();
                  } else {
                    PerformPromiseThen(pipeStep(), next, rejectLoop);
                  }
                }
                next(false);
              });
            }
            function pipeStep() {
              if (shuttingDown) {
                return promiseResolvedWith(true);
              }
              return PerformPromiseThen(writer._readyPromise, () => {
                return newPromise((resolveRead, rejectRead) => {
                  ReadableStreamDefaultReaderRead(reader, {
                    _chunkSteps: (chunk) => {
                      currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2);
                      resolveRead(false);
                    },
                    _closeSteps: () => resolveRead(true),
                    _errorSteps: rejectRead
                  });
                });
              });
            }
            isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
              if (!preventAbort) {
                shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
              } else {
                shutdown(true, storedError);
              }
            });
            isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
              if (!preventCancel) {
                shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
              } else {
                shutdown(true, storedError);
              }
            });
            isOrBecomesClosed(source, reader._closedPromise, () => {
              if (!preventClose) {
                shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
              } else {
                shutdown();
              }
            });
            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
              const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
              if (!preventCancel) {
                shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
              } else {
                shutdown(true, destClosed);
              }
            }
            setPromiseIsHandledToTrue(pipeLoop());
            function waitForWritesToFinish() {
              const oldCurrentWrite = currentWrite;
              return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);
            }
            function isOrBecomesErrored(stream, promise, action) {
              if (stream._state === "errored") {
                action(stream._storedError);
              } else {
                uponRejection(promise, action);
              }
            }
            function isOrBecomesClosed(stream, promise, action) {
              if (stream._state === "closed") {
                action();
              } else {
                uponFulfillment(promise, action);
              }
            }
            function shutdownWithAction(action, originalIsError, originalError) {
              if (shuttingDown) {
                return;
              }
              shuttingDown = true;
              if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                uponFulfillment(waitForWritesToFinish(), doTheRest);
              } else {
                doTheRest();
              }
              function doTheRest() {
                uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
              }
            }
            function shutdown(isError, error2) {
              if (shuttingDown) {
                return;
              }
              shuttingDown = true;
              if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error2));
              } else {
                finalize(isError, error2);
              }
            }
            function finalize(isError, error2) {
              WritableStreamDefaultWriterRelease(writer);
              ReadableStreamReaderGenericRelease(reader);
              if (signal !== void 0) {
                signal.removeEventListener("abort", abortAlgorithm);
              }
              if (isError) {
                reject(error2);
              } else {
                resolve2(void 0);
              }
            }
          });
        }
        class ReadableStreamDefaultController {
          constructor() {
            throw new TypeError("Illegal constructor");
          }
          get desiredSize() {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1("desiredSize");
            }
            return ReadableStreamDefaultControllerGetDesiredSize(this);
          }
          close() {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1("close");
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
              throw new TypeError("The stream is not in a state that permits close");
            }
            ReadableStreamDefaultControllerClose(this);
          }
          enqueue(chunk = void 0) {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1("enqueue");
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
              throw new TypeError("The stream is not in a state that permits enqueue");
            }
            return ReadableStreamDefaultControllerEnqueue(this, chunk);
          }
          error(e = void 0) {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1("error");
            }
            ReadableStreamDefaultControllerError(this, e);
          }
          [CancelSteps](reason) {
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableStreamDefaultControllerClearAlgorithms(this);
            return result;
          }
          [PullSteps](readRequest) {
            const stream = this._controlledReadableStream;
            if (this._queue.length > 0) {
              const chunk = DequeueValue(this);
              if (this._closeRequested && this._queue.length === 0) {
                ReadableStreamDefaultControllerClearAlgorithms(this);
                ReadableStreamClose(stream);
              } else {
                ReadableStreamDefaultControllerCallPullIfNeeded(this);
              }
              readRequest._chunkSteps(chunk);
            } else {
              ReadableStreamAddReadRequest(stream, readRequest);
              ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
          }
        }
        Object.defineProperties(ReadableStreamDefaultController.prototype, {
          close: { enumerable: true },
          enqueue: { enumerable: true },
          error: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableStreamDefaultController",
            configurable: true
          });
        }
        function IsReadableStreamDefaultController(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream")) {
            return false;
          }
          return x instanceof ReadableStreamDefaultController;
        }
        function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
          const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
          if (!shouldPull) {
            return;
          }
          if (controller._pulling) {
            controller._pullAgain = true;
            return;
          }
          controller._pulling = true;
          const pullPromise = controller._pullAlgorithm();
          uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
              controller._pullAgain = false;
              ReadableStreamDefaultControllerCallPullIfNeeded(controller);
            }
          }, (e) => {
            ReadableStreamDefaultControllerError(controller, e);
          });
        }
        function ReadableStreamDefaultControllerShouldCallPull(controller) {
          const stream = controller._controlledReadableStream;
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return false;
          }
          if (!controller._started) {
            return false;
          }
          if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
          }
          const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
          if (desiredSize > 0) {
            return true;
          }
          return false;
        }
        function ReadableStreamDefaultControllerClearAlgorithms(controller) {
          controller._pullAlgorithm = void 0;
          controller._cancelAlgorithm = void 0;
          controller._strategySizeAlgorithm = void 0;
        }
        function ReadableStreamDefaultControllerClose(controller) {
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
          }
          const stream = controller._controlledReadableStream;
          controller._closeRequested = true;
          if (controller._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(controller);
            ReadableStreamClose(stream);
          }
        }
        function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
          }
          const stream = controller._controlledReadableStream;
          if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            ReadableStreamFulfillReadRequest(stream, chunk, false);
          } else {
            let chunkSize;
            try {
              chunkSize = controller._strategySizeAlgorithm(chunk);
            } catch (chunkSizeE) {
              ReadableStreamDefaultControllerError(controller, chunkSizeE);
              throw chunkSizeE;
            }
            try {
              EnqueueValueWithSize(controller, chunk, chunkSize);
            } catch (enqueueE) {
              ReadableStreamDefaultControllerError(controller, enqueueE);
              throw enqueueE;
            }
          }
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }
        function ReadableStreamDefaultControllerError(controller, e) {
          const stream = controller._controlledReadableStream;
          if (stream._state !== "readable") {
            return;
          }
          ResetQueue(controller);
          ReadableStreamDefaultControllerClearAlgorithms(controller);
          ReadableStreamError(stream, e);
        }
        function ReadableStreamDefaultControllerGetDesiredSize(controller) {
          const state = controller._controlledReadableStream._state;
          if (state === "errored") {
            return null;
          }
          if (state === "closed") {
            return 0;
          }
          return controller._strategyHWM - controller._queueTotalSize;
        }
        function ReadableStreamDefaultControllerHasBackpressure(controller) {
          if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
            return false;
          }
          return true;
        }
        function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
          const state = controller._controlledReadableStream._state;
          if (!controller._closeRequested && state === "readable") {
            return true;
          }
          return false;
        }
        function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
          controller._controlledReadableStream = stream;
          controller._queue = void 0;
          controller._queueTotalSize = void 0;
          ResetQueue(controller);
          controller._started = false;
          controller._closeRequested = false;
          controller._pullAgain = false;
          controller._pulling = false;
          controller._strategySizeAlgorithm = sizeAlgorithm;
          controller._strategyHWM = highWaterMark;
          controller._pullAlgorithm = pullAlgorithm;
          controller._cancelAlgorithm = cancelAlgorithm;
          stream._readableStreamController = controller;
          const startResult = startAlgorithm();
          uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          }, (r) => {
            ReadableStreamDefaultControllerError(controller, r);
          });
        }
        function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
          const controller = Object.create(ReadableStreamDefaultController.prototype);
          let startAlgorithm = () => void 0;
          let pullAlgorithm = () => promiseResolvedWith(void 0);
          let cancelAlgorithm = () => promiseResolvedWith(void 0);
          if (underlyingSource.start !== void 0) {
            startAlgorithm = () => underlyingSource.start(controller);
          }
          if (underlyingSource.pull !== void 0) {
            pullAlgorithm = () => underlyingSource.pull(controller);
          }
          if (underlyingSource.cancel !== void 0) {
            cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
          }
          SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        }
        function defaultControllerBrandCheckException$1(name) {
          return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
        }
        function ReadableStreamTee(stream, cloneForBranch2) {
          if (IsReadableByteStreamController(stream._readableStreamController)) {
            return ReadableByteStreamTee(stream);
          }
          return ReadableStreamDefaultTee(stream);
        }
        function ReadableStreamDefaultTee(stream, cloneForBranch2) {
          const reader = AcquireReadableStreamDefaultReader(stream);
          let reading = false;
          let canceled1 = false;
          let canceled2 = false;
          let reason1;
          let reason2;
          let branch1;
          let branch2;
          let resolveCancelPromise;
          const cancelPromise = newPromise((resolve2) => {
            resolveCancelPromise = resolve2;
          });
          function pullAlgorithm() {
            if (reading) {
              return promiseResolvedWith(void 0);
            }
            reading = true;
            const readRequest = {
              _chunkSteps: (chunk) => {
                queueMicrotask(() => {
                  reading = false;
                  const chunk1 = chunk;
                  const chunk2 = chunk;
                  if (!canceled1) {
                    ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                  }
                  if (!canceled2) {
                    ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                  }
                });
              },
              _closeSteps: () => {
                reading = false;
                if (!canceled1) {
                  ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                }
                if (!canceled2) {
                  ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                }
                if (!canceled1 || !canceled2) {
                  resolveCancelPromise(void 0);
                }
              },
              _errorSteps: () => {
                reading = false;
              }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promiseResolvedWith(void 0);
          }
          function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
              const compositeReason = CreateArrayFromList([reason1, reason2]);
              const cancelResult = ReadableStreamCancel(stream, compositeReason);
              resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
          }
          function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
              const compositeReason = CreateArrayFromList([reason1, reason2]);
              const cancelResult = ReadableStreamCancel(stream, compositeReason);
              resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
          }
          function startAlgorithm() {
          }
          branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
          branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
          uponRejection(reader._closedPromise, (r) => {
            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
          });
          return [branch1, branch2];
        }
        function ReadableByteStreamTee(stream) {
          let reader = AcquireReadableStreamDefaultReader(stream);
          let reading = false;
          let canceled1 = false;
          let canceled2 = false;
          let reason1;
          let reason2;
          let branch1;
          let branch2;
          let resolveCancelPromise;
          const cancelPromise = newPromise((resolve2) => {
            resolveCancelPromise = resolve2;
          });
          function forwardReaderError(thisReader) {
            uponRejection(thisReader._closedPromise, (r) => {
              if (thisReader !== reader) {
                return;
              }
              ReadableByteStreamControllerError(branch1._readableStreamController, r);
              ReadableByteStreamControllerError(branch2._readableStreamController, r);
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            });
          }
          function pullWithDefaultReader() {
            if (IsReadableStreamBYOBReader(reader)) {
              ReadableStreamReaderGenericRelease(reader);
              reader = AcquireReadableStreamDefaultReader(stream);
              forwardReaderError(reader);
            }
            const readRequest = {
              _chunkSteps: (chunk) => {
                queueMicrotask(() => {
                  reading = false;
                  const chunk1 = chunk;
                  let chunk2 = chunk;
                  if (!canceled1 && !canceled2) {
                    try {
                      chunk2 = CloneAsUint8Array(chunk);
                    } catch (cloneE) {
                      ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                      ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                      resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                      return;
                    }
                  }
                  if (!canceled1) {
                    ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                  }
                  if (!canceled2) {
                    ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                  }
                });
              },
              _closeSteps: () => {
                reading = false;
                if (!canceled1) {
                  ReadableByteStreamControllerClose(branch1._readableStreamController);
                }
                if (!canceled2) {
                  ReadableByteStreamControllerClose(branch2._readableStreamController);
                }
                if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                }
                if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                }
                if (!canceled1 || !canceled2) {
                  resolveCancelPromise(void 0);
                }
              },
              _errorSteps: () => {
                reading = false;
              }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
          }
          function pullWithBYOBReader(view, forBranch2) {
            if (IsReadableStreamDefaultReader(reader)) {
              ReadableStreamReaderGenericRelease(reader);
              reader = AcquireReadableStreamBYOBReader(stream);
              forwardReaderError(reader);
            }
            const byobBranch = forBranch2 ? branch2 : branch1;
            const otherBranch = forBranch2 ? branch1 : branch2;
            const readIntoRequest = {
              _chunkSteps: (chunk) => {
                queueMicrotask(() => {
                  reading = false;
                  const byobCanceled = forBranch2 ? canceled2 : canceled1;
                  const otherCanceled = forBranch2 ? canceled1 : canceled2;
                  if (!otherCanceled) {
                    let clonedChunk;
                    try {
                      clonedChunk = CloneAsUint8Array(chunk);
                    } catch (cloneE) {
                      ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                      ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                      resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                      return;
                    }
                    if (!byobCanceled) {
                      ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                    }
                    ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                  } else if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                  }
                });
              },
              _closeSteps: (chunk) => {
                reading = false;
                const byobCanceled = forBranch2 ? canceled2 : canceled1;
                const otherCanceled = forBranch2 ? canceled1 : canceled2;
                if (!byobCanceled) {
                  ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                }
                if (!otherCanceled) {
                  ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                }
                if (chunk !== void 0) {
                  if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                  }
                  if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                    ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                  }
                }
                if (!byobCanceled || !otherCanceled) {
                  resolveCancelPromise(void 0);
                }
              },
              _errorSteps: () => {
                reading = false;
              }
            };
            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
          }
          function pull1Algorithm() {
            if (reading) {
              return promiseResolvedWith(void 0);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
            if (byobRequest === null) {
              pullWithDefaultReader();
            } else {
              pullWithBYOBReader(byobRequest._view, false);
            }
            return promiseResolvedWith(void 0);
          }
          function pull2Algorithm() {
            if (reading) {
              return promiseResolvedWith(void 0);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
            if (byobRequest === null) {
              pullWithDefaultReader();
            } else {
              pullWithBYOBReader(byobRequest._view, true);
            }
            return promiseResolvedWith(void 0);
          }
          function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
              const compositeReason = CreateArrayFromList([reason1, reason2]);
              const cancelResult = ReadableStreamCancel(stream, compositeReason);
              resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
          }
          function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
              const compositeReason = CreateArrayFromList([reason1, reason2]);
              const cancelResult = ReadableStreamCancel(stream, compositeReason);
              resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
          }
          function startAlgorithm() {
            return;
          }
          branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
          branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
          forwardReaderError(reader);
          return [branch1, branch2];
        }
        function convertUnderlyingDefaultOrByteSource(source, context) {
          assertDictionary(source, context);
          const original = source;
          const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
          const cancel = original === null || original === void 0 ? void 0 : original.cancel;
          const pull = original === null || original === void 0 ? void 0 : original.pull;
          const start = original === null || original === void 0 ? void 0 : original.start;
          const type = original === null || original === void 0 ? void 0 : original.type;
          return {
            autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
            cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
            pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
            start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
            type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)
          };
        }
        function convertUnderlyingSourceCancelCallback(fn, original, context) {
          assertFunction(fn, context);
          return (reason) => promiseCall(fn, original, [reason]);
        }
        function convertUnderlyingSourcePullCallback(fn, original, context) {
          assertFunction(fn, context);
          return (controller) => promiseCall(fn, original, [controller]);
        }
        function convertUnderlyingSourceStartCallback(fn, original, context) {
          assertFunction(fn, context);
          return (controller) => reflectCall(fn, original, [controller]);
        }
        function convertReadableStreamType(type, context) {
          type = `${type}`;
          if (type !== "bytes") {
            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
          }
          return type;
        }
        function convertReaderOptions(options2, context) {
          assertDictionary(options2, context);
          const mode = options2 === null || options2 === void 0 ? void 0 : options2.mode;
          return {
            mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
          };
        }
        function convertReadableStreamReaderMode(mode, context) {
          mode = `${mode}`;
          if (mode !== "byob") {
            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
          }
          return mode;
        }
        function convertIteratorOptions(options2, context) {
          assertDictionary(options2, context);
          const preventCancel = options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
          return { preventCancel: Boolean(preventCancel) };
        }
        function convertPipeOptions(options2, context) {
          assertDictionary(options2, context);
          const preventAbort = options2 === null || options2 === void 0 ? void 0 : options2.preventAbort;
          const preventCancel = options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
          const preventClose = options2 === null || options2 === void 0 ? void 0 : options2.preventClose;
          const signal = options2 === null || options2 === void 0 ? void 0 : options2.signal;
          if (signal !== void 0) {
            assertAbortSignal(signal, `${context} has member 'signal' that`);
          }
          return {
            preventAbort: Boolean(preventAbort),
            preventCancel: Boolean(preventCancel),
            preventClose: Boolean(preventClose),
            signal
          };
        }
        function assertAbortSignal(signal, context) {
          if (!isAbortSignal2(signal)) {
            throw new TypeError(`${context} is not an AbortSignal.`);
          }
        }
        function convertReadableWritablePair(pair, context) {
          assertDictionary(pair, context);
          const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
          assertRequiredField(readable, "readable", "ReadableWritablePair");
          assertReadableStream(readable, `${context} has member 'readable' that`);
          const writable3 = pair === null || pair === void 0 ? void 0 : pair.writable;
          assertRequiredField(writable3, "writable", "ReadableWritablePair");
          assertWritableStream(writable3, `${context} has member 'writable' that`);
          return { readable, writable: writable3 };
        }
        class ReadableStream2 {
          constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
            if (rawUnderlyingSource === void 0) {
              rawUnderlyingSource = null;
            } else {
              assertObject(rawUnderlyingSource, "First parameter");
            }
            const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
            InitializeReadableStream(this);
            if (underlyingSource.type === "bytes") {
              if (strategy.size !== void 0) {
                throw new RangeError("The strategy for a byte stream cannot have a size function");
              }
              const highWaterMark = ExtractHighWaterMark(strategy, 0);
              SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
            } else {
              const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
              const highWaterMark = ExtractHighWaterMark(strategy, 1);
              SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
            }
          }
          get locked() {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1("locked");
            }
            return IsReadableStreamLocked(this);
          }
          cancel(reason = void 0) {
            if (!IsReadableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$1("cancel"));
            }
            if (IsReadableStreamLocked(this)) {
              return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
            }
            return ReadableStreamCancel(this, reason);
          }
          getReader(rawOptions = void 0) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1("getReader");
            }
            const options2 = convertReaderOptions(rawOptions, "First parameter");
            if (options2.mode === void 0) {
              return AcquireReadableStreamDefaultReader(this);
            }
            return AcquireReadableStreamBYOBReader(this);
          }
          pipeThrough(rawTransform, rawOptions = {}) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1("pipeThrough");
            }
            assertRequiredArgument(rawTransform, 1, "pipeThrough");
            const transform = convertReadableWritablePair(rawTransform, "First parameter");
            const options2 = convertPipeOptions(rawOptions, "Second parameter");
            if (IsReadableStreamLocked(this)) {
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
            }
            if (IsWritableStreamLocked(transform.writable)) {
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
            }
            const promise = ReadableStreamPipeTo(this, transform.writable, options2.preventClose, options2.preventAbort, options2.preventCancel, options2.signal);
            setPromiseIsHandledToTrue(promise);
            return transform.readable;
          }
          pipeTo(destination, rawOptions = {}) {
            if (!IsReadableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
            }
            if (destination === void 0) {
              return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
            }
            if (!IsWritableStream(destination)) {
              return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
            }
            let options2;
            try {
              options2 = convertPipeOptions(rawOptions, "Second parameter");
            } catch (e) {
              return promiseRejectedWith(e);
            }
            if (IsReadableStreamLocked(this)) {
              return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
            }
            if (IsWritableStreamLocked(destination)) {
              return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
            }
            return ReadableStreamPipeTo(this, destination, options2.preventClose, options2.preventAbort, options2.preventCancel, options2.signal);
          }
          tee() {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1("tee");
            }
            const branches = ReadableStreamTee(this);
            return CreateArrayFromList(branches);
          }
          values(rawOptions = void 0) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1("values");
            }
            const options2 = convertIteratorOptions(rawOptions, "First parameter");
            return AcquireReadableStreamAsyncIterator(this, options2.preventCancel);
          }
        }
        Object.defineProperties(ReadableStream2.prototype, {
          cancel: { enumerable: true },
          getReader: { enumerable: true },
          pipeThrough: { enumerable: true },
          pipeTo: { enumerable: true },
          tee: { enumerable: true },
          values: { enumerable: true },
          locked: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
            value: "ReadableStream",
            configurable: true
          });
        }
        if (typeof SymbolPolyfill.asyncIterator === "symbol") {
          Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
            value: ReadableStream2.prototype.values,
            writable: true,
            configurable: true
          });
        }
        function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
          const stream = Object.create(ReadableStream2.prototype);
          InitializeReadableStream(stream);
          const controller = Object.create(ReadableStreamDefaultController.prototype);
          SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
          return stream;
        }
        function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
          const stream = Object.create(ReadableStream2.prototype);
          InitializeReadableStream(stream);
          const controller = Object.create(ReadableByteStreamController.prototype);
          SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
          return stream;
        }
        function InitializeReadableStream(stream) {
          stream._state = "readable";
          stream._reader = void 0;
          stream._storedError = void 0;
          stream._disturbed = false;
        }
        function IsReadableStream(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
            return false;
          }
          return x instanceof ReadableStream2;
        }
        function IsReadableStreamLocked(stream) {
          if (stream._reader === void 0) {
            return false;
          }
          return true;
        }
        function ReadableStreamCancel(stream, reason) {
          stream._disturbed = true;
          if (stream._state === "closed") {
            return promiseResolvedWith(void 0);
          }
          if (stream._state === "errored") {
            return promiseRejectedWith(stream._storedError);
          }
          ReadableStreamClose(stream);
          const reader = stream._reader;
          if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
            reader._readIntoRequests.forEach((readIntoRequest) => {
              readIntoRequest._closeSteps(void 0);
            });
            reader._readIntoRequests = new SimpleQueue();
          }
          const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
          return transformPromiseWith(sourceCancelPromise, noop2);
        }
        function ReadableStreamClose(stream) {
          stream._state = "closed";
          const reader = stream._reader;
          if (reader === void 0) {
            return;
          }
          defaultReaderClosedPromiseResolve(reader);
          if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach((readRequest) => {
              readRequest._closeSteps();
            });
            reader._readRequests = new SimpleQueue();
          }
        }
        function ReadableStreamError(stream, e) {
          stream._state = "errored";
          stream._storedError = e;
          const reader = stream._reader;
          if (reader === void 0) {
            return;
          }
          defaultReaderClosedPromiseReject(reader, e);
          if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach((readRequest) => {
              readRequest._errorSteps(e);
            });
            reader._readRequests = new SimpleQueue();
          } else {
            reader._readIntoRequests.forEach((readIntoRequest) => {
              readIntoRequest._errorSteps(e);
            });
            reader._readIntoRequests = new SimpleQueue();
          }
        }
        function streamBrandCheckException$1(name) {
          return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
        }
        function convertQueuingStrategyInit(init2, context) {
          assertDictionary(init2, context);
          const highWaterMark = init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
          assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
          return {
            highWaterMark: convertUnrestrictedDouble(highWaterMark)
          };
        }
        const byteLengthSizeFunction = (chunk) => {
          return chunk.byteLength;
        };
        Object.defineProperty(byteLengthSizeFunction, "name", {
          value: "size",
          configurable: true
        });
        class ByteLengthQueuingStrategy {
          constructor(options2) {
            assertRequiredArgument(options2, 1, "ByteLengthQueuingStrategy");
            options2 = convertQueuingStrategyInit(options2, "First parameter");
            this._byteLengthQueuingStrategyHighWaterMark = options2.highWaterMark;
          }
          get highWaterMark() {
            if (!IsByteLengthQueuingStrategy(this)) {
              throw byteLengthBrandCheckException("highWaterMark");
            }
            return this._byteLengthQueuingStrategyHighWaterMark;
          }
          get size() {
            if (!IsByteLengthQueuingStrategy(this)) {
              throw byteLengthBrandCheckException("size");
            }
            return byteLengthSizeFunction;
          }
        }
        Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
          highWaterMark: { enumerable: true },
          size: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: "ByteLengthQueuingStrategy",
            configurable: true
          });
        }
        function byteLengthBrandCheckException(name) {
          return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
        }
        function IsByteLengthQueuingStrategy(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark")) {
            return false;
          }
          return x instanceof ByteLengthQueuingStrategy;
        }
        const countSizeFunction = () => {
          return 1;
        };
        Object.defineProperty(countSizeFunction, "name", {
          value: "size",
          configurable: true
        });
        class CountQueuingStrategy {
          constructor(options2) {
            assertRequiredArgument(options2, 1, "CountQueuingStrategy");
            options2 = convertQueuingStrategyInit(options2, "First parameter");
            this._countQueuingStrategyHighWaterMark = options2.highWaterMark;
          }
          get highWaterMark() {
            if (!IsCountQueuingStrategy(this)) {
              throw countBrandCheckException("highWaterMark");
            }
            return this._countQueuingStrategyHighWaterMark;
          }
          get size() {
            if (!IsCountQueuingStrategy(this)) {
              throw countBrandCheckException("size");
            }
            return countSizeFunction;
          }
        }
        Object.defineProperties(CountQueuingStrategy.prototype, {
          highWaterMark: { enumerable: true },
          size: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: "CountQueuingStrategy",
            configurable: true
          });
        }
        function countBrandCheckException(name) {
          return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
        }
        function IsCountQueuingStrategy(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark")) {
            return false;
          }
          return x instanceof CountQueuingStrategy;
        }
        function convertTransformer(original, context) {
          assertDictionary(original, context);
          const flush = original === null || original === void 0 ? void 0 : original.flush;
          const readableType = original === null || original === void 0 ? void 0 : original.readableType;
          const start = original === null || original === void 0 ? void 0 : original.start;
          const transform = original === null || original === void 0 ? void 0 : original.transform;
          const writableType = original === null || original === void 0 ? void 0 : original.writableType;
          return {
            flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
            readableType,
            start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
            transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
            writableType
          };
        }
        function convertTransformerFlushCallback(fn, original, context) {
          assertFunction(fn, context);
          return (controller) => promiseCall(fn, original, [controller]);
        }
        function convertTransformerStartCallback(fn, original, context) {
          assertFunction(fn, context);
          return (controller) => reflectCall(fn, original, [controller]);
        }
        function convertTransformerTransformCallback(fn, original, context) {
          assertFunction(fn, context);
          return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
        }
        class TransformStream {
          constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
            if (rawTransformer === void 0) {
              rawTransformer = null;
            }
            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
            const transformer = convertTransformer(rawTransformer, "First parameter");
            if (transformer.readableType !== void 0) {
              throw new RangeError("Invalid readableType specified");
            }
            if (transformer.writableType !== void 0) {
              throw new RangeError("Invalid writableType specified");
            }
            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
            let startPromise_resolve;
            const startPromise = newPromise((resolve2) => {
              startPromise_resolve = resolve2;
            });
            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
            if (transformer.start !== void 0) {
              startPromise_resolve(transformer.start(this._transformStreamController));
            } else {
              startPromise_resolve(void 0);
            }
          }
          get readable() {
            if (!IsTransformStream(this)) {
              throw streamBrandCheckException("readable");
            }
            return this._readable;
          }
          get writable() {
            if (!IsTransformStream(this)) {
              throw streamBrandCheckException("writable");
            }
            return this._writable;
          }
        }
        Object.defineProperties(TransformStream.prototype, {
          readable: { enumerable: true },
          writable: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
            value: "TransformStream",
            configurable: true
          });
        }
        function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
          function startAlgorithm() {
            return startPromise;
          }
          function writeAlgorithm(chunk) {
            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
          }
          function abortAlgorithm(reason) {
            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
          }
          function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(stream);
          }
          stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
          function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(stream);
          }
          function cancelAlgorithm(reason) {
            TransformStreamErrorWritableAndUnblockWrite(stream, reason);
            return promiseResolvedWith(void 0);
          }
          stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
          stream._backpressure = void 0;
          stream._backpressureChangePromise = void 0;
          stream._backpressureChangePromise_resolve = void 0;
          TransformStreamSetBackpressure(stream, true);
          stream._transformStreamController = void 0;
        }
        function IsTransformStream(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
            return false;
          }
          return x instanceof TransformStream;
        }
        function TransformStreamError(stream, e) {
          ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
          TransformStreamErrorWritableAndUnblockWrite(stream, e);
        }
        function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
          TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
          WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
          if (stream._backpressure) {
            TransformStreamSetBackpressure(stream, false);
          }
        }
        function TransformStreamSetBackpressure(stream, backpressure) {
          if (stream._backpressureChangePromise !== void 0) {
            stream._backpressureChangePromise_resolve();
          }
          stream._backpressureChangePromise = newPromise((resolve2) => {
            stream._backpressureChangePromise_resolve = resolve2;
          });
          stream._backpressure = backpressure;
        }
        class TransformStreamDefaultController {
          constructor() {
            throw new TypeError("Illegal constructor");
          }
          get desiredSize() {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException("desiredSize");
            }
            const readableController = this._controlledTransformStream._readable._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(readableController);
          }
          enqueue(chunk = void 0) {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException("enqueue");
            }
            TransformStreamDefaultControllerEnqueue(this, chunk);
          }
          error(reason = void 0) {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException("error");
            }
            TransformStreamDefaultControllerError(this, reason);
          }
          terminate() {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException("terminate");
            }
            TransformStreamDefaultControllerTerminate(this);
          }
        }
        Object.defineProperties(TransformStreamDefaultController.prototype, {
          enqueue: { enumerable: true },
          error: { enumerable: true },
          terminate: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        if (typeof SymbolPolyfill.toStringTag === "symbol") {
          Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: "TransformStreamDefaultController",
            configurable: true
          });
        }
        function IsTransformStreamDefaultController(x) {
          if (!typeIsObject(x)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
            return false;
          }
          return x instanceof TransformStreamDefaultController;
        }
        function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
          controller._controlledTransformStream = stream;
          stream._transformStreamController = controller;
          controller._transformAlgorithm = transformAlgorithm;
          controller._flushAlgorithm = flushAlgorithm;
        }
        function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
          const controller = Object.create(TransformStreamDefaultController.prototype);
          let transformAlgorithm = (chunk) => {
            try {
              TransformStreamDefaultControllerEnqueue(controller, chunk);
              return promiseResolvedWith(void 0);
            } catch (transformResultE) {
              return promiseRejectedWith(transformResultE);
            }
          };
          let flushAlgorithm = () => promiseResolvedWith(void 0);
          if (transformer.transform !== void 0) {
            transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
          }
          if (transformer.flush !== void 0) {
            flushAlgorithm = () => transformer.flush(controller);
          }
          SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
        }
        function TransformStreamDefaultControllerClearAlgorithms(controller) {
          controller._transformAlgorithm = void 0;
          controller._flushAlgorithm = void 0;
        }
        function TransformStreamDefaultControllerEnqueue(controller, chunk) {
          const stream = controller._controlledTransformStream;
          const readableController = stream._readable._readableStreamController;
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
            throw new TypeError("Readable side is not in a state that permits enqueue");
          }
          try {
            ReadableStreamDefaultControllerEnqueue(readableController, chunk);
          } catch (e) {
            TransformStreamErrorWritableAndUnblockWrite(stream, e);
            throw stream._readable._storedError;
          }
          const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
          if (backpressure !== stream._backpressure) {
            TransformStreamSetBackpressure(stream, true);
          }
        }
        function TransformStreamDefaultControllerError(controller, e) {
          TransformStreamError(controller._controlledTransformStream, e);
        }
        function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
          const transformPromise = controller._transformAlgorithm(chunk);
          return transformPromiseWith(transformPromise, void 0, (r) => {
            TransformStreamError(controller._controlledTransformStream, r);
            throw r;
          });
        }
        function TransformStreamDefaultControllerTerminate(controller) {
          const stream = controller._controlledTransformStream;
          const readableController = stream._readable._readableStreamController;
          ReadableStreamDefaultControllerClose(readableController);
          const error2 = new TypeError("TransformStream terminated");
          TransformStreamErrorWritableAndUnblockWrite(stream, error2);
        }
        function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
          const controller = stream._transformStreamController;
          if (stream._backpressure) {
            const backpressureChangePromise = stream._backpressureChangePromise;
            return transformPromiseWith(backpressureChangePromise, () => {
              const writable3 = stream._writable;
              const state = writable3._state;
              if (state === "erroring") {
                throw writable3._storedError;
              }
              return TransformStreamDefaultControllerPerformTransform(controller, chunk);
            });
          }
          return TransformStreamDefaultControllerPerformTransform(controller, chunk);
        }
        function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
          TransformStreamError(stream, reason);
          return promiseResolvedWith(void 0);
        }
        function TransformStreamDefaultSinkCloseAlgorithm(stream) {
          const readable = stream._readable;
          const controller = stream._transformStreamController;
          const flushPromise = controller._flushAlgorithm();
          TransformStreamDefaultControllerClearAlgorithms(controller);
          return transformPromiseWith(flushPromise, () => {
            if (readable._state === "errored") {
              throw readable._storedError;
            }
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
          }, (r) => {
            TransformStreamError(stream, r);
            throw readable._storedError;
          });
        }
        function TransformStreamDefaultSourcePullAlgorithm(stream) {
          TransformStreamSetBackpressure(stream, false);
          return stream._backpressureChangePromise;
        }
        function defaultControllerBrandCheckException(name) {
          return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
        }
        function streamBrandCheckException(name) {
          return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
        }
        exports2.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
        exports2.CountQueuingStrategy = CountQueuingStrategy;
        exports2.ReadableByteStreamController = ReadableByteStreamController;
        exports2.ReadableStream = ReadableStream2;
        exports2.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
        exports2.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
        exports2.ReadableStreamDefaultController = ReadableStreamDefaultController;
        exports2.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
        exports2.TransformStream = TransformStream;
        exports2.TransformStreamDefaultController = TransformStreamDefaultController;
        exports2.WritableStream = WritableStream;
        exports2.WritableStreamDefaultController = WritableStreamDefaultController;
        exports2.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    })(ponyfill_es2018, ponyfill_es2018.exports);
    POOL_SIZE$1 = 65536;
    if (!globalThis.ReadableStream) {
      try {
        const process2 = require("node:process");
        const { emitWarning } = process2;
        try {
          process2.emitWarning = () => {
          };
          Object.assign(globalThis, require("node:stream/web"));
          process2.emitWarning = emitWarning;
        } catch (error2) {
          process2.emitWarning = emitWarning;
          throw error2;
        }
      } catch (error2) {
        Object.assign(globalThis, ponyfill_es2018.exports);
      }
    }
    try {
      const { Blob: Blob4 } = require("buffer");
      if (Blob4 && !Blob4.prototype.stream) {
        Blob4.prototype.stream = function name(params) {
          let position = 0;
          const blob = this;
          return new ReadableStream({
            type: "bytes",
            async pull(ctrl) {
              const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));
              const buffer = await chunk.arrayBuffer();
              position += buffer.byteLength;
              ctrl.enqueue(new Uint8Array(buffer));
              if (position === blob.size) {
                ctrl.close();
              }
            }
          });
        };
      }
    } catch (error2) {
    }
    POOL_SIZE = 65536;
    _Blob = class Blob2 {
      #parts = [];
      #type = "";
      #size = 0;
      constructor(blobParts = [], options2 = {}) {
        if (typeof blobParts !== "object" || blobParts === null) {
          throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
        }
        if (typeof blobParts[Symbol.iterator] !== "function") {
          throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
        }
        if (typeof options2 !== "object" && typeof options2 !== "function") {
          throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
        }
        if (options2 === null)
          options2 = {};
        const encoder = new TextEncoder();
        for (const element of blobParts) {
          let part;
          if (ArrayBuffer.isView(element)) {
            part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));
          } else if (element instanceof ArrayBuffer) {
            part = new Uint8Array(element.slice(0));
          } else if (element instanceof Blob2) {
            part = element;
          } else {
            part = encoder.encode(element);
          }
          this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;
          this.#parts.push(part);
        }
        const type = options2.type === void 0 ? "" : String(options2.type);
        this.#type = /^[\x20-\x7E]*$/.test(type) ? type : "";
      }
      get size() {
        return this.#size;
      }
      get type() {
        return this.#type;
      }
      async text() {
        const decoder = new TextDecoder();
        let str = "";
        for await (const part of toIterator(this.#parts, false)) {
          str += decoder.decode(part, { stream: true });
        }
        str += decoder.decode();
        return str;
      }
      async arrayBuffer() {
        const data = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of toIterator(this.#parts, false)) {
          data.set(chunk, offset);
          offset += chunk.length;
        }
        return data.buffer;
      }
      stream() {
        const it = toIterator(this.#parts, true);
        return new globalThis.ReadableStream({
          type: "bytes",
          async pull(ctrl) {
            const chunk = await it.next();
            chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
          },
          async cancel() {
            await it.return();
          }
        });
      }
      slice(start = 0, end = this.size, type = "") {
        const { size } = this;
        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
        const span = Math.max(relativeEnd - relativeStart, 0);
        const parts = this.#parts;
        const blobParts = [];
        let added = 0;
        for (const part of parts) {
          if (added >= span) {
            break;
          }
          const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
          if (relativeStart && size2 <= relativeStart) {
            relativeStart -= size2;
            relativeEnd -= size2;
          } else {
            let chunk;
            if (ArrayBuffer.isView(part)) {
              chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.byteLength;
            } else {
              chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.size;
            }
            relativeEnd -= size2;
            blobParts.push(chunk);
            relativeStart = 0;
          }
        }
        const blob = new Blob2([], { type: String(type).toLowerCase() });
        blob.#size = span;
        blob.#parts = blobParts;
        return blob;
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
      static [Symbol.hasInstance](object) {
        return object && typeof object === "object" && typeof object.constructor === "function" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
      }
    };
    Object.defineProperties(_Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Blob3 = _Blob;
    Blob$1 = Blob3;
    FetchBaseError = class extends Error {
      constructor(message, type) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.type = type;
      }
      get name() {
        return this.constructor.name;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    };
    FetchError = class extends FetchBaseError {
      constructor(message, type, systemError) {
        super(message, type);
        if (systemError) {
          this.code = this.errno = systemError.code;
          this.erroredSysCall = systemError.syscall;
        }
      }
    };
    NAME = Symbol.toStringTag;
    isURLSearchParameters = (object) => {
      return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
    };
    isBlob = (object) => {
      return typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
    };
    isAbortSignal = (object) => {
      return typeof object === "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget");
    };
    carriage = "\r\n";
    dashes = "-".repeat(2);
    carriageLength = Buffer.byteLength(carriage);
    getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
    getBoundary = () => (0, import_crypto.randomBytes)(8).toString("hex");
    INTERNALS$2 = Symbol("Body internals");
    Body = class {
      constructor(body, {
        size = 0
      } = {}) {
        let boundary = null;
        if (body === null) {
          body = null;
        } else if (isURLSearchParameters(body)) {
          body = Buffer.from(body.toString());
        } else if (isBlob(body))
          ;
        else if (Buffer.isBuffer(body))
          ;
        else if (import_util.types.isAnyArrayBuffer(body)) {
          body = Buffer.from(body);
        } else if (ArrayBuffer.isView(body)) {
          body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
        } else if (body instanceof import_stream.default)
          ;
        else if (isFormData(body)) {
          boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
          body = import_stream.default.Readable.from(formDataIterator(body, boundary));
        } else {
          body = Buffer.from(String(body));
        }
        this[INTERNALS$2] = {
          body,
          boundary,
          disturbed: false,
          error: null
        };
        this.size = size;
        if (body instanceof import_stream.default) {
          body.on("error", (error_) => {
            const error2 = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
            this[INTERNALS$2].error = error2;
          });
        }
      }
      get body() {
        return this[INTERNALS$2].body;
      }
      get bodyUsed() {
        return this[INTERNALS$2].disturbed;
      }
      async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
      }
      async blob() {
        const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
        const buf = await this.buffer();
        return new Blob$1([buf], {
          type: ct
        });
      }
      async json() {
        const buffer = await consumeBody(this);
        return JSON.parse(buffer.toString());
      }
      async text() {
        const buffer = await consumeBody(this);
        return buffer.toString();
      }
      buffer() {
        return consumeBody(this);
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    clone = (instance, highWaterMark) => {
      let p1;
      let p2;
      let { body } = instance;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
        p1 = new import_stream.PassThrough({ highWaterMark });
        p2 = new import_stream.PassThrough({ highWaterMark });
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS$2].body = p1;
        body = p2;
      }
      return body;
    };
    extractContentType = (body, request) => {
      if (body === null) {
        return null;
      }
      if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      }
      if (isURLSearchParameters(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      }
      if (isBlob(body)) {
        return body.type || null;
      }
      if (Buffer.isBuffer(body) || import_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
        return null;
      }
      if (body && typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      }
      if (isFormData(body)) {
        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
      }
      if (body instanceof import_stream.default) {
        return null;
      }
      return "text/plain;charset=UTF-8";
    };
    getTotalBytes = (request) => {
      const { body } = request;
      if (body === null) {
        return 0;
      }
      if (isBlob(body)) {
        return body.size;
      }
      if (Buffer.isBuffer(body)) {
        return body.length;
      }
      if (body && typeof body.getLengthSync === "function") {
        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
      }
      if (isFormData(body)) {
        return getFormDataLength(request[INTERNALS$2].boundary);
      }
      return null;
    };
    writeToStream = (dest, { body }) => {
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        import_stream.default.Readable.from(body.stream()).pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    };
    validateHeaderName = typeof import_http.default.validateHeaderName === "function" ? import_http.default.validateHeaderName : (name) => {
      if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
        const error2 = new TypeError(`Header name must be a valid HTTP token [${name}]`);
        Object.defineProperty(error2, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
        throw error2;
      }
    };
    validateHeaderValue = typeof import_http.default.validateHeaderValue === "function" ? import_http.default.validateHeaderValue : (name, value) => {
      if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
        const error2 = new TypeError(`Invalid character in header content ["${name}"]`);
        Object.defineProperty(error2, "code", { value: "ERR_INVALID_CHAR" });
        throw error2;
      }
    };
    Headers = class extends URLSearchParams {
      constructor(init2) {
        let result = [];
        if (init2 instanceof Headers) {
          const raw = init2.raw();
          for (const [name, values] of Object.entries(raw)) {
            result.push(...values.map((value) => [name, value]));
          }
        } else if (init2 == null)
          ;
        else if (typeof init2 === "object" && !import_util.types.isBoxedPrimitive(init2)) {
          const method = init2[Symbol.iterator];
          if (method == null) {
            result.push(...Object.entries(init2));
          } else {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            result = [...init2].map((pair) => {
              if (typeof pair !== "object" || import_util.types.isBoxedPrimitive(pair)) {
                throw new TypeError("Each header pair must be an iterable object");
              }
              return [...pair];
            }).map((pair) => {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              return [...pair];
            });
          }
        } else {
          throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
        }
        result = result.length > 0 ? result.map(([name, value]) => {
          validateHeaderName(name);
          validateHeaderValue(name, String(value));
          return [String(name).toLowerCase(), String(value)];
        }) : void 0;
        super(result);
        return new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case "append":
              case "set":
                return (name, value) => {
                  validateHeaderName(name);
                  validateHeaderValue(name, String(value));
                  return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));
                };
              case "delete":
              case "has":
              case "getAll":
                return (name) => {
                  validateHeaderName(name);
                  return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());
                };
              case "keys":
                return () => {
                  target.sort();
                  return new Set(URLSearchParams.prototype.keys.call(target)).keys();
                };
              default:
                return Reflect.get(target, p, receiver);
            }
          }
        });
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      toString() {
        return Object.prototype.toString.call(this);
      }
      get(name) {
        const values = this.getAll(name);
        if (values.length === 0) {
          return null;
        }
        let value = values.join(", ");
        if (/^content-encoding$/i.test(name)) {
          value = value.toLowerCase();
        }
        return value;
      }
      forEach(callback, thisArg = void 0) {
        for (const name of this.keys()) {
          Reflect.apply(callback, thisArg, [this.get(name), name, this]);
        }
      }
      *values() {
        for (const name of this.keys()) {
          yield this.get(name);
        }
      }
      *entries() {
        for (const name of this.keys()) {
          yield [name, this.get(name)];
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      raw() {
        return [...this.keys()].reduce((result, key) => {
          result[key] = this.getAll(key);
          return result;
        }, {});
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return [...this.keys()].reduce((result, key) => {
          const values = this.getAll(key);
          if (key === "host") {
            result[key] = values[0];
          } else {
            result[key] = values.length > 1 ? values : values[0];
          }
          return result;
        }, {});
      }
    };
    Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
      result[property] = { enumerable: true };
      return result;
    }, {}));
    redirectStatus = new Set([301, 302, 303, 307, 308]);
    isRedirect = (code) => {
      return redirectStatus.has(code);
    };
    INTERNALS$1 = Symbol("Response internals");
    Response = class extends Body {
      constructor(body = null, options2 = {}) {
        super(body, options2);
        const status = options2.status != null ? options2.status : 200;
        const headers = new Headers(options2.headers);
        if (body !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          type: "default",
          url: options2.url,
          status,
          statusText: options2.statusText || "",
          headers,
          counter: options2.counter,
          highWaterMark: options2.highWaterMark
        };
      }
      get type() {
        return this[INTERNALS$1].type;
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      get highWaterMark() {
        return this[INTERNALS$1].highWaterMark;
      }
      clone() {
        return new Response(clone(this, this.highWaterMark), {
          type: this.type,
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected,
          size: this.size
        });
      }
      static redirect(url, status = 302) {
        if (!isRedirect(status)) {
          throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        return new Response(null, {
          headers: {
            location: new URL(url).toString()
          },
          status
        });
      }
      static error() {
        const response = new Response(null, { status: 0, statusText: "" });
        response[INTERNALS$1].type = "error";
        return response;
      }
      get [Symbol.toStringTag]() {
        return "Response";
      }
    };
    Object.defineProperties(Response.prototype, {
      type: { enumerable: true },
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    getSearch = (parsedURL) => {
      if (parsedURL.search) {
        return parsedURL.search;
      }
      const lastOffset = parsedURL.href.length - 1;
      const hash2 = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
      return parsedURL.href[lastOffset - hash2.length] === "?" ? "?" : "";
    };
    INTERNALS = Symbol("Request internals");
    isRequest = (object) => {
      return typeof object === "object" && typeof object[INTERNALS] === "object";
    };
    Request = class extends Body {
      constructor(input, init2 = {}) {
        let parsedURL;
        if (isRequest(input)) {
          parsedURL = new URL(input.url);
        } else {
          parsedURL = new URL(input);
          input = {};
        }
        let method = init2.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init2.body != null || isRequest(input)) && input.body !== null && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
        super(inputBody, {
          size: init2.size || input.size || 0
        });
        const headers = new Headers(init2.headers || input.headers || {});
        if (inputBody !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody, this);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init2) {
          signal = init2.signal;
        }
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
        }
        this[INTERNALS] = {
          method,
          redirect: init2.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
        this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
        this.counter = init2.counter || input.counter || 0;
        this.agent = init2.agent || input.agent;
        this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
        this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
      }
      get method() {
        return this[INTERNALS].method;
      }
      get url() {
        return (0, import_url.format)(this[INTERNALS].parsedURL);
      }
      get headers() {
        return this[INTERNALS].headers;
      }
      get redirect() {
        return this[INTERNALS].redirect;
      }
      get signal() {
        return this[INTERNALS].signal;
      }
      clone() {
        return new Request(this);
      }
      get [Symbol.toStringTag]() {
        return "Request";
      }
    };
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    getNodeRequestOptions = (request) => {
      const { parsedURL } = request[INTERNALS];
      const headers = new Headers(request[INTERNALS].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      let contentLengthValue = null;
      if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body !== null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate,br");
      }
      let { agent } = request;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      const search = getSearch(parsedURL);
      const requestOptions = {
        path: parsedURL.pathname + search,
        pathname: parsedURL.pathname,
        hostname: parsedURL.hostname,
        protocol: parsedURL.protocol,
        port: parsedURL.port,
        hash: parsedURL.hash,
        search: parsedURL.search,
        query: parsedURL.query,
        href: parsedURL.href,
        method: request.method,
        headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      };
      return requestOptions;
    };
    AbortError = class extends FetchBaseError {
      constructor(message, type = "aborted") {
        super(message, type);
      }
    };
    supportedSchemas = new Set(["data:", "http:", "https:"]);
  }
});

// node_modules/@sveltejs/adapter-netlify/files/shims.js
var init_shims = __esm({
  "node_modules/@sveltejs/adapter-netlify/files/shims.js"() {
    init_install_fetch();
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    init_shims();
    "use strict";
    exports.parse = parse;
    exports.serialize = serialize;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var pairSplitRegExp = /; */;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse(str, options2) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options2 || {};
      var pairs = str.split(pairSplitRegExp);
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var eq_idx = pair.indexOf("=");
        if (eq_idx < 0) {
          continue;
        }
        var key = pair.substr(0, eq_idx).trim();
        var val = pair.substr(++eq_idx, pair.length).trim();
        if (val[0] == '"') {
          val = val.slice(1, -1);
        }
        if (obj[key] == void 0) {
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize(name, val, options2) {
      var opt = options2 || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/@lukeed/uuid/dist/index.mjs
function v4() {
  var i = 0, num, out = "";
  if (!BUFFER || IDX + 16 > 256) {
    BUFFER = Array(i = 256);
    while (i--)
      BUFFER[i] = 256 * Math.random() | 0;
    i = IDX = 0;
  }
  for (; i < 16; i++) {
    num = BUFFER[IDX + i];
    if (i == 6)
      out += HEX[num & 15 | 64];
    else if (i == 8)
      out += HEX[num & 63 | 128];
    else
      out += HEX[num];
    if (i & 1 && i > 1 && i < 11)
      out += "-";
  }
  IDX++;
  return out;
}
var IDX, HEX, BUFFER;
var init_dist = __esm({
  "node_modules/@lukeed/uuid/dist/index.mjs"() {
    init_shims();
    IDX = 256;
    HEX = [];
    while (IDX--)
      HEX[IDX] = (IDX + 256).toString(16).substring(1);
  }
});

// .svelte-kit/output/server/chunks/_api-e66b1c82.js
async function api(request, resource, data) {
  if (!request.locals.userid) {
    return { status: 401 };
  }
  const res = await fetch(`${base}/${resource}`, {
    method: request.method,
    headers: {
      "content-type": "application/json"
    },
    body: data && JSON.stringify(data)
  });
  if (res.ok && request.method !== "GET" && request.headers.accept !== "application/json") {
    return {
      status: 303,
      headers: {
        location: "/todos"
      }
    };
  }
  return {
    status: res.status,
    body: await res.json()
  };
}
var base;
var init_api_e66b1c82 = __esm({
  ".svelte-kit/output/server/chunks/_api-e66b1c82.js"() {
    init_shims();
    base = "https://api.svelte.dev";
  }
});

// .svelte-kit/output/server/chunks/index.json-784727b1.js
var index_json_784727b1_exports = {};
__export(index_json_784727b1_exports, {
  get: () => get,
  post: () => post
});
var get, post;
var init_index_json_784727b1 = __esm({
  ".svelte-kit/output/server/chunks/index.json-784727b1.js"() {
    init_shims();
    init_api_e66b1c82();
    get = async (request) => {
      const response = await api(request, `todos/${request.locals.userid}`);
      if (response.status === 404) {
        return { body: [] };
      }
      return response;
    };
    post = async (request) => {
      const response = await api(request, `todos/${request.locals.userid}`, {
        text: request.body.get("text")
      });
      return response;
    };
  }
});

// .svelte-kit/output/server/chunks/_uid_.json-039b6f30.js
var uid_json_039b6f30_exports = {};
__export(uid_json_039b6f30_exports, {
  del: () => del,
  patch: () => patch
});
var patch, del;
var init_uid_json_039b6f30 = __esm({
  ".svelte-kit/output/server/chunks/_uid_.json-039b6f30.js"() {
    init_shims();
    init_api_e66b1c82();
    patch = async (request) => {
      return api(request, `todos/${request.locals.userid}/${request.params.uid}`, {
        text: request.body.get("text"),
        done: request.body.has("done") ? !!request.body.get("done") : void 0
      });
    };
    del = async (request) => {
      return api(request, `todos/${request.locals.userid}/${request.params.uid}`);
    };
  }
});

// .svelte-kit/output/server/chunks/__layout-2206ff22.js
var layout_2206ff22_exports = {};
__export(layout_2206ff22_exports, {
  default: () => _layout
});
var import_cookie, getStores, page, logo, css$2, Header, css$1, Nav, css, _layout;
var init_layout_2206ff22 = __esm({
  ".svelte-kit/output/server/chunks/__layout-2206ff22.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie = __toModule(require_cookie());
    init_dist();
    getStores = () => {
      const stores = getContext("__svelte__");
      return {
        page: {
          subscribe: stores.page.subscribe
        },
        navigating: {
          subscribe: stores.navigating.subscribe
        },
        get preloading() {
          console.error("stores.preloading is deprecated; use stores.navigating instead");
          return {
            subscribe: stores.navigating.subscribe
          };
        },
        session: stores.session
      };
    };
    page = {
      subscribe(fn) {
        const store = getStores().page;
        return store.subscribe(fn);
      }
    };
    logo = "/_app/assets/Logo-4a189659.svg";
    css$2 = {
      code: "header.svelte-1aku0yt{height:var(--heading-height);display:flex;justify-content:space-between;box-shadow:0 0 2px 2px rgba(0, 0, 0, 0.3);padding:0 2rem}a.svelte-1aku0yt{height:var(--heading-height);line-height:var(--heading-height);display:flex;align-items:center}",
      map: null
    };
    Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css$2);
      return `<header class="${"svelte-1aku0yt"}"><a href="${"/"}" class="${"svelte-1aku0yt"}"><img${add_attribute("src", logo, 0)} alt="${"SvelteKit"}"></a>
</header>`;
    });
    css$1 = {
      code: ".navigation.svelte-1vwrsve.svelte-1vwrsve{background:lightblue;width:230px;height:100%;color:white;background-color:var(--tertiary-color)}.navigation.svelte-1vwrsve nav.svelte-1vwrsve{padding-top:20px}.navigation.svelte-1vwrsve nav a.svelte-1vwrsve{width:100%;color:var(--pure-white);line-height:52px}.navigation.svelte-1vwrsve nav ul li.svelte-1vwrsve{position:relative;display:flex;align-items:center;cursor:pointer;list-style:none;height:52px;padding-left:16px}.navigation.svelte-1vwrsve nav ul li.active.svelte-1vwrsve:before{content:'';position:absolute;width:4px;background-color:var(--primary-color);height:100%;top:0;left:0;border-radius:10px}.navigation.svelte-1vwrsve nav ul li.active a.svelte-1vwrsve{color:var(--primary-color)}.navigation.svelte-1vwrsve nav ul li.svelte-1vwrsve:hover{background-color:rgba(255, 255, 255, 0.1)}",
      map: null
    };
    Nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $page, $$unsubscribe_page;
      $$unsubscribe_page = subscribe(page, (value) => $page = value);
      $$result.css.add(css$1);
      $$unsubscribe_page();
      return `<div class="${"navigation svelte-1vwrsve"}"><nav class="${"svelte-1vwrsve"}"><ul><li class="${["svelte-1vwrsve", $page.path === "/" ? "active" : ""].join(" ").trim()}"><a sveltekit:prefetch href="${"/"}" class="${"svelte-1vwrsve"}">Dashboard</a></li>
      <li class="${["svelte-1vwrsve", $page.path === "/mailchimp" ? "active" : ""].join(" ").trim()}"><a sveltekit:prefetch href="${"/mailchimp"}" class="${"svelte-1vwrsve"}">Mailchimp</a></li>
      <li class="${["svelte-1vwrsve", $page.path === "/twitter" ? "active" : ""].join(" ").trim()}"><a sveltekit:prefetch href="${"/twitter"}" class="${"svelte-1vwrsve"}">Twitter</a></li>
      <li class="${["svelte-1vwrsve", $page.path === "/facebook" ? "active" : ""].join(" ").trim()}"><a sveltekit:prefetch href="${"/facebook"}" class="${"svelte-1vwrsve"}">Facebook</a></li>
      <li class="${["svelte-1vwrsve", $page.path === "/custom" ? "active" : ""].join(" ").trim()}"><a sveltekit:prefetch href="${"/custom"}" class="${"svelte-1vwrsve"}">Custom</a></li></ul></nav>
</div>`;
    });
    css = {
      code: "main.svelte-bu5xff{display:flex;height:calc(100vh - var(--heading-height))}@media(min-width: 480px){}",
      map: null
    };
    _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css);
      return `${validate_component(Header, "Header").$$render($$result, {}, {}, {})}

<main class="${"svelte-bu5xff"}">${validate_component(Nav, "Nav").$$render($$result, {}, {}, {})}
	${slots.default ? slots.default({}) : ``}
</main>`;
    });
  }
});

// .svelte-kit/output/server/chunks/error-0a6ae754.js
var error_0a6ae754_exports = {};
__export(error_0a6ae754_exports, {
  default: () => Error2,
  load: () => load
});
function load({ error: error2, status }) {
  return { props: { error: error2, status } };
}
var import_cookie2, Error2;
var init_error_0a6ae754 = __esm({
  ".svelte-kit/output/server/chunks/error-0a6ae754.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie2 = __toModule(require_cookie());
    init_dist();
    Error2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { status } = $$props;
      let { error: error2 } = $$props;
      if ($$props.status === void 0 && $$bindings.status && status !== void 0)
        $$bindings.status(status);
      if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
        $$bindings.error(error2);
      return `<h1>${escape(status)}</h1>

<pre>${escape(error2.message)}</pre>



${error2.frame ? `<pre>${escape(error2.frame)}</pre>` : ``}
${error2.stack ? `<pre>${escape(error2.stack)}</pre>` : ``}`;
    });
  }
});

// .svelte-kit/output/server/chunks/index-50a4ef0d.js
var index_50a4ef0d_exports = {};
__export(index_50a4ef0d_exports, {
  default: () => Routes,
  prerender: () => prerender
});
function writable(value, start = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function is_date(obj) {
  return Object.prototype.toString.call(obj) === "[object Date]";
}
function tick_spring(ctx, last_value, current_value, target_value) {
  if (typeof current_value === "number" || is_date(current_value)) {
    const delta = target_value - current_value;
    const velocity = (current_value - last_value) / (ctx.dt || 1 / 60);
    const spring2 = ctx.opts.stiffness * delta;
    const damper = ctx.opts.damping * velocity;
    const acceleration = (spring2 - damper) * ctx.inv_mass;
    const d2 = (velocity + acceleration) * ctx.dt;
    if (Math.abs(d2) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
      return target_value;
    } else {
      ctx.settled = false;
      return is_date(current_value) ? new Date(current_value.getTime() + d2) : current_value + d2;
    }
  } else if (Array.isArray(current_value)) {
    return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
  } else if (typeof current_value === "object") {
    const next_value = {};
    for (const k in current_value) {
      next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
    }
    return next_value;
  } else {
    throw new Error(`Cannot spring ${typeof current_value} values`);
  }
}
function spring(value, opts = {}) {
  const store = writable(value);
  const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
  let last_time;
  let task;
  let current_token;
  let last_value = value;
  let target_value = value;
  let inv_mass = 1;
  let inv_mass_recovery_rate = 0;
  let cancel_task = false;
  function set(new_value, opts2 = {}) {
    target_value = new_value;
    const token = current_token = {};
    if (value == null || opts2.hard || spring2.stiffness >= 1 && spring2.damping >= 1) {
      cancel_task = true;
      last_time = now();
      last_value = new_value;
      store.set(value = target_value);
      return Promise.resolve();
    } else if (opts2.soft) {
      const rate = opts2.soft === true ? 0.5 : +opts2.soft;
      inv_mass_recovery_rate = 1 / (rate * 60);
      inv_mass = 0;
    }
    if (!task) {
      last_time = now();
      cancel_task = false;
      task = loop((now2) => {
        if (cancel_task) {
          cancel_task = false;
          task = null;
          return false;
        }
        inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
        const ctx = {
          inv_mass,
          opts: spring2,
          settled: true,
          dt: (now2 - last_time) * 60 / 1e3
        };
        const next_value = tick_spring(ctx, last_value, value, target_value);
        last_time = now2;
        last_value = value;
        store.set(value = next_value);
        if (ctx.settled) {
          task = null;
        }
        return !ctx.settled;
      });
    }
    return new Promise((fulfil) => {
      task.promise.then(() => {
        if (token === current_token)
          fulfil();
      });
    });
  }
  const spring2 = {
    set,
    update: (fn, opts2) => set(fn(target_value, value), opts2),
    subscribe: store.subscribe,
    stiffness,
    damping,
    precision
  };
  return spring2;
}
function modulo(n, m) {
  return (n % m + m) % m;
}
var import_cookie3, subscriber_queue, css$12, Counter, css2, prerender, Routes;
var init_index_50a4ef0d = __esm({
  ".svelte-kit/output/server/chunks/index-50a4ef0d.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie3 = __toModule(require_cookie());
    init_dist();
    subscriber_queue = [];
    css$12 = {
      code: ".counter.svelte-139m1ow.svelte-139m1ow{display:flex;border-top:1px solid rgba(0, 0, 0, 0.1);border-bottom:1px solid rgba(0, 0, 0, 0.1);margin:1rem 0}.counter.svelte-139m1ow button.svelte-139m1ow{width:2em;padding:0;display:flex;align-items:center;justify-content:center;border:0;background-color:transparent;color:var(--text-color);font-size:2rem}.counter.svelte-139m1ow button.svelte-139m1ow:hover{background-color:var(--secondary-color)}svg.svelte-139m1ow.svelte-139m1ow{width:25%;height:25%}path.svelte-139m1ow.svelte-139m1ow{vector-effect:non-scaling-stroke;stroke-width:2px;stroke:var(--text-color)}.counter-viewport.svelte-139m1ow.svelte-139m1ow{width:8em;height:4em;overflow:hidden;text-align:center;position:relative}.counter-viewport.svelte-139m1ow strong.svelte-139m1ow{position:absolute;display:flex;width:100%;height:100%;font-weight:400;color:var(--accent-color);font-size:4rem;align-items:center;justify-content:center}.counter-digits.svelte-139m1ow.svelte-139m1ow{position:absolute;width:100%;height:100%}",
      map: null
    };
    Counter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let offset;
      let $displayed_count, $$unsubscribe_displayed_count;
      let count = 0;
      const displayed_count = spring();
      $$unsubscribe_displayed_count = subscribe(displayed_count, (value) => $displayed_count = value);
      $$result.css.add(css$12);
      {
        displayed_count.set(count);
      }
      offset = modulo($displayed_count, 1);
      $$unsubscribe_displayed_count();
      return `<div class="${"counter svelte-139m1ow"}"><button aria-label="${"Decrease the counter by one"}" class="${"svelte-139m1ow"}"><svg aria-hidden="${"true"}" viewBox="${"0 0 1 1"}" class="${"svelte-139m1ow"}"><path d="${"M0,0.5 L1,0.5"}" class="${"svelte-139m1ow"}"></path></svg></button>

	<div class="${"counter-viewport svelte-139m1ow"}"><div class="${"counter-digits svelte-139m1ow"}" style="${"transform: translate(0, " + escape(100 * offset) + "%)"}"><strong style="${"top: -100%"}" aria-hidden="${"true"}" class="${"svelte-139m1ow"}">${escape(Math.floor($displayed_count + 1))}</strong>
			<strong class="${"svelte-139m1ow"}">${escape(Math.floor($displayed_count))}</strong></div></div>

	<button aria-label="${"Increase the counter by one"}" class="${"svelte-139m1ow"}"><svg aria-hidden="${"true"}" viewBox="${"0 0 1 1"}" class="${"svelte-139m1ow"}"><path d="${"M0,0.5 L1,0.5 M0.5,0 L0.5,1"}" class="${"svelte-139m1ow"}"></path></svg></button>
</div>`;
    });
    css2 = {
      code: "section.svelte-mjk9ig.svelte-mjk9ig{display:flex;flex-direction:column;justify-content:center;align-items:center;flex:1}h1.svelte-mjk9ig.svelte-mjk9ig{width:100%}.welcome.svelte-mjk9ig.svelte-mjk9ig{position:relative;width:100%;height:0;padding:0 0 calc(100% * 495 / 2048) 0}.welcome.svelte-mjk9ig img.svelte-mjk9ig{position:absolute;width:100%;height:100%;top:0;display:block}",
      map: null
    };
    prerender = true;
    Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css2);
      return `${$$result.head += `${$$result.title = `<title>Home</title>`, ""}`, ""}

<section class="${"svelte-mjk9ig"}"><h1 class="${"svelte-mjk9ig"}"><div class="${"welcome svelte-mjk9ig"}"><picture><source srcset="${"svelte-welcome.webp"}" type="${"image/webp"}">
				<img src="${"svelte-welcome.png"}" alt="${"Welcome"}" class="${"svelte-mjk9ig"}"></picture></div>

		to your new<br>SvelteKit app
	</h1>

	<h2>try editing <strong>src/routes/index.svelte</strong></h2>

	${validate_component(Counter, "Counter").$$render($$result, {}, {}, {})}
</section>`;
    });
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    init_shims();
    var s2 = 1e3;
    var m = s2 * 60;
    var h = m * 60;
    var d2 = h * 24;
    var w = d2 * 7;
    var y = d2 * 365.25;
    module2.exports = function(val, options2) {
      options2 = options2 || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options2.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d2;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return Math.round(ms / d2) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return plural(ms, msAbs, d2, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/superagent/node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/superagent/node_modules/debug/src/common.js"(exports, module2) {
    init_shims();
    "use strict";
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      Object.keys(env).forEach(function(key) {
        createDebug[key] = env[key];
      });
      createDebug.instances = [];
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        var hash2 = 0;
        for (var i = 0; i < namespace.length; i++) {
          hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
          hash2 |= 0;
        }
        return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        var prevTime;
        function debug() {
          if (!debug.enabled) {
            return;
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var self2 = debug;
          var curr = Number(new Date());
          var ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          var index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format2) {
            if (match === "%%") {
              return match;
            }
            index++;
            var formatter = createDebug.formatters[format2];
            if (typeof formatter === "function") {
              var val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          var logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.enabled = createDebug.enabled(namespace);
        debug.useColors = createDebug.useColors();
        debug.color = selectColor(namespace);
        debug.destroy = destroy;
        debug.extend = extend;
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        createDebug.instances.push(debug);
        return debug;
      }
      function destroy() {
        var index = createDebug.instances.indexOf(this);
        if (index !== -1) {
          createDebug.instances.splice(index, 1);
          return true;
        }
        return false;
      }
      function extend(namespace, delimiter) {
        return createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.names = [];
        createDebug.skips = [];
        var i;
        var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        var len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
        for (i = 0; i < createDebug.instances.length; i++) {
          var instance = createDebug.instances[i];
          instance.enabled = createDebug.enabled(instance.namespace);
        }
      }
      function disable() {
        createDebug.enable("");
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        var i;
        var len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/superagent/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/superagent/node_modules/debug/src/browser.js"(exports, module2) {
    init_shims();
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load3;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      var c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    function log() {
      var _console;
      return (typeof console === "undefined" ? "undefined" : _typeof(console)) === "object" && console.log && (_console = console).log.apply(_console, arguments);
    }
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load3() {
      var r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module2.exports = require_common()(exports);
    var formatters = module2.exports.formatters;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports, module2) {
    init_shims();
    "use strict";
    module2.exports = (flag, argv) => {
      argv = argv || process.argv;
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const pos = argv.indexOf(prefix + flag);
      const terminatorPos = argv.indexOf("--");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module2) {
    init_shims();
    "use strict";
    var os = require("os");
    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      const min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      if (env.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// node_modules/superagent/node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/superagent/node_modules/debug/src/node.js"(exports, module2) {
    init_shims();
    "use strict";
    var tty = require("tty");
    var util = require("util");
    exports.init = init2;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load3;
    exports.useColors = useColors;
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
      }
    } catch (error2) {
    }
    var supportsColor;
    exports.inspectOpts = Object.keys(process.env).filter(function(key) {
      return /^debug_/i.test(key);
    }).reduce(function(obj, key) {
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
      });
      var val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      var name = this.namespace, useColors2 = this.useColors;
      if (useColors2) {
        var c = this.color;
        var colorCode = "[3" + (c < 8 ? c : "8;5;" + c);
        var prefix = "  ".concat(colorCode, ";1m").concat(name, " [0m");
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return new Date().toISOString() + " ";
    }
    function log() {
      return process.stderr.write(util.format.apply(util, arguments) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load3() {
      return process.env.DEBUG;
    }
    function init2(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);
      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var formatters = module2.exports.formatters;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
      }).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/superagent/node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/superagent/node_modules/debug/src/index.js"(exports, module2) {
    init_shims();
    "use strict";
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/formidable/lib/file.js
var require_file = __commonJS({
  "node_modules/formidable/lib/file.js"(exports, module2) {
    init_shims();
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var util = require("util");
    var fs = require("fs");
    var EventEmitter = require("events").EventEmitter;
    var crypto = require("crypto");
    function File2(properties) {
      EventEmitter.call(this);
      this.size = 0;
      this.path = null;
      this.name = null;
      this.type = null;
      this.hash = null;
      this.lastModifiedDate = null;
      this._writeStream = null;
      for (var key in properties) {
        this[key] = properties[key];
      }
      if (typeof this.hash === "string") {
        this.hash = crypto.createHash(properties.hash);
      } else {
        this.hash = null;
      }
    }
    module2.exports = File2;
    util.inherits(File2, EventEmitter);
    File2.prototype.open = function() {
      this._writeStream = new fs.WriteStream(this.path);
    };
    File2.prototype.toJSON = function() {
      var json = {
        size: this.size,
        path: this.path,
        name: this.name,
        type: this.type,
        mtime: this.lastModifiedDate,
        length: this.length,
        filename: this.filename,
        mime: this.mime
      };
      if (this.hash && this.hash != "") {
        json.hash = this.hash;
      }
      return json;
    };
    File2.prototype.write = function(buffer, cb) {
      var self2 = this;
      if (self2.hash) {
        self2.hash.update(buffer);
      }
      if (this._writeStream.closed) {
        return cb();
      }
      this._writeStream.write(buffer, function() {
        self2.lastModifiedDate = new Date();
        self2.size += buffer.length;
        self2.emit("progress", self2.size);
        cb();
      });
    };
    File2.prototype.end = function(cb) {
      var self2 = this;
      if (self2.hash) {
        self2.hash = self2.hash.digest("hex");
      }
      this._writeStream.end(function() {
        self2.emit("end");
        cb();
      });
    };
  }
});

// node_modules/formidable/lib/multipart_parser.js
var require_multipart_parser = __commonJS({
  "node_modules/formidable/lib/multipart_parser.js"(exports) {
    init_shims();
    var Buffer2 = require("buffer").Buffer;
    var s2 = 0;
    var S = {
      PARSER_UNINITIALIZED: s2++,
      START: s2++,
      START_BOUNDARY: s2++,
      HEADER_FIELD_START: s2++,
      HEADER_FIELD: s2++,
      HEADER_VALUE_START: s2++,
      HEADER_VALUE: s2++,
      HEADER_VALUE_ALMOST_DONE: s2++,
      HEADERS_ALMOST_DONE: s2++,
      PART_DATA_START: s2++,
      PART_DATA: s2++,
      PART_END: s2++,
      END: s2++
    };
    var f = 1;
    var F = {
      PART_BOUNDARY: f,
      LAST_BOUNDARY: f *= 2
    };
    var LF = 10;
    var CR = 13;
    var SPACE = 32;
    var HYPHEN = 45;
    var COLON = 58;
    var A = 97;
    var Z = 122;
    var lower = function(c) {
      return c | 32;
    };
    for (s2 in S) {
      exports[s2] = S[s2];
    }
    function MultipartParser() {
      this.boundary = null;
      this.boundaryChars = null;
      this.lookbehind = null;
      this.state = S.PARSER_UNINITIALIZED;
      this.index = null;
      this.flags = 0;
    }
    exports.MultipartParser = MultipartParser;
    MultipartParser.stateToString = function(stateNumber) {
      for (var state in S) {
        var number = S[state];
        if (number === stateNumber)
          return state;
      }
    };
    MultipartParser.prototype.initWithBoundary = function(str) {
      this.boundary = new Buffer2(str.length + 4);
      this.boundary.write("\r\n--", 0);
      this.boundary.write(str, 4);
      this.lookbehind = new Buffer2(this.boundary.length + 8);
      this.state = S.START;
      this.boundaryChars = {};
      for (var i = 0; i < this.boundary.length; i++) {
        this.boundaryChars[this.boundary[i]] = true;
      }
    };
    MultipartParser.prototype.write = function(buffer) {
      var self2 = this, i = 0, len = buffer.length, prevIndex = this.index, index = this.index, state = this.state, flags = this.flags, lookbehind = this.lookbehind, boundary = this.boundary, boundaryChars = this.boundaryChars, boundaryLength = this.boundary.length, boundaryEnd = boundaryLength - 1, bufferLength = buffer.length, c, cl, mark = function(name) {
        self2[name + "Mark"] = i;
      }, clear = function(name) {
        delete self2[name + "Mark"];
      }, callback = function(name, buffer2, start, end) {
        if (start !== void 0 && start === end) {
          return;
        }
        var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
        if (callbackSymbol in self2) {
          self2[callbackSymbol](buffer2, start, end);
        }
      }, dataCallback = function(name, clear2) {
        var markSymbol = name + "Mark";
        if (!(markSymbol in self2)) {
          return;
        }
        if (!clear2) {
          callback(name, buffer, self2[markSymbol], buffer.length);
          self2[markSymbol] = 0;
        } else {
          callback(name, buffer, self2[markSymbol], i);
          delete self2[markSymbol];
        }
      };
      for (i = 0; i < len; i++) {
        c = buffer[i];
        switch (state) {
          case S.PARSER_UNINITIALIZED:
            return i;
          case S.START:
            index = 0;
            state = S.START_BOUNDARY;
          case S.START_BOUNDARY:
            if (index == boundary.length - 2) {
              if (c == HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else if (c != CR) {
                return i;
              }
              index++;
              break;
            } else if (index - 1 == boundary.length - 2) {
              if (flags & F.LAST_BOUNDARY && c == HYPHEN) {
                callback("end");
                state = S.END;
                flags = 0;
              } else if (!(flags & F.LAST_BOUNDARY) && c == LF) {
                index = 0;
                callback("partBegin");
                state = S.HEADER_FIELD_START;
              } else {
                return i;
              }
              break;
            }
            if (c != boundary[index + 2]) {
              index = -2;
            }
            if (c == boundary[index + 2]) {
              index++;
            }
            break;
          case S.HEADER_FIELD_START:
            state = S.HEADER_FIELD;
            mark("headerField");
            index = 0;
          case S.HEADER_FIELD:
            if (c == CR) {
              clear("headerField");
              state = S.HEADERS_ALMOST_DONE;
              break;
            }
            index++;
            if (c == HYPHEN) {
              break;
            }
            if (c == COLON) {
              if (index == 1) {
                return i;
              }
              dataCallback("headerField", true);
              state = S.HEADER_VALUE_START;
              break;
            }
            cl = lower(c);
            if (cl < A || cl > Z) {
              return i;
            }
            break;
          case S.HEADER_VALUE_START:
            if (c == SPACE) {
              break;
            }
            mark("headerValue");
            state = S.HEADER_VALUE;
          case S.HEADER_VALUE:
            if (c == CR) {
              dataCallback("headerValue", true);
              callback("headerEnd");
              state = S.HEADER_VALUE_ALMOST_DONE;
            }
            break;
          case S.HEADER_VALUE_ALMOST_DONE:
            if (c != LF) {
              return i;
            }
            state = S.HEADER_FIELD_START;
            break;
          case S.HEADERS_ALMOST_DONE:
            if (c != LF) {
              return i;
            }
            callback("headersEnd");
            state = S.PART_DATA_START;
            break;
          case S.PART_DATA_START:
            state = S.PART_DATA;
            mark("partData");
          case S.PART_DATA:
            prevIndex = index;
            if (index === 0) {
              i += boundaryEnd;
              while (i < bufferLength && !(buffer[i] in boundaryChars)) {
                i += boundaryLength;
              }
              i -= boundaryEnd;
              c = buffer[i];
            }
            if (index < boundary.length) {
              if (boundary[index] == c) {
                if (index === 0) {
                  dataCallback("partData", true);
                }
                index++;
              } else {
                index = 0;
              }
            } else if (index == boundary.length) {
              index++;
              if (c == CR) {
                flags |= F.PART_BOUNDARY;
              } else if (c == HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else {
                index = 0;
              }
            } else if (index - 1 == boundary.length) {
              if (flags & F.PART_BOUNDARY) {
                index = 0;
                if (c == LF) {
                  flags &= ~F.PART_BOUNDARY;
                  callback("partEnd");
                  callback("partBegin");
                  state = S.HEADER_FIELD_START;
                  break;
                }
              } else if (flags & F.LAST_BOUNDARY) {
                if (c == HYPHEN) {
                  callback("partEnd");
                  callback("end");
                  state = S.END;
                  flags = 0;
                } else {
                  index = 0;
                }
              } else {
                index = 0;
              }
            }
            if (index > 0) {
              lookbehind[index - 1] = c;
            } else if (prevIndex > 0) {
              callback("partData", lookbehind, 0, prevIndex);
              prevIndex = 0;
              mark("partData");
              i--;
            }
            break;
          case S.END:
            break;
          default:
            return i;
        }
      }
      dataCallback("headerField");
      dataCallback("headerValue");
      dataCallback("partData");
      this.index = index;
      this.state = state;
      this.flags = flags;
      return len;
    };
    MultipartParser.prototype.end = function() {
      var callback = function(self2, name) {
        var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
        if (callbackSymbol in self2) {
          self2[callbackSymbol]();
        }
      };
      if (this.state == S.HEADER_FIELD_START && this.index === 0 || this.state == S.PART_DATA && this.index == this.boundary.length) {
        callback(this, "partEnd");
        callback(this, "end");
      } else if (this.state != S.END) {
        return new Error("MultipartParser.end(): stream ended unexpectedly: " + this.explain());
      }
    };
    MultipartParser.prototype.explain = function() {
      return "state = " + MultipartParser.stateToString(this.state);
    };
  }
});

// node_modules/formidable/lib/querystring_parser.js
var require_querystring_parser = __commonJS({
  "node_modules/formidable/lib/querystring_parser.js"(exports) {
    init_shims();
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var querystring = require("querystring");
    function QuerystringParser(maxKeys) {
      this.maxKeys = maxKeys;
      this.buffer = "";
    }
    exports.QuerystringParser = QuerystringParser;
    QuerystringParser.prototype.write = function(buffer) {
      this.buffer += buffer.toString("ascii");
      return buffer.length;
    };
    QuerystringParser.prototype.end = function() {
      var fields = querystring.parse(this.buffer, "&", "=", { maxKeys: this.maxKeys });
      for (var field in fields) {
        this.onField(field, fields[field]);
      }
      this.buffer = "";
      this.onEnd();
    };
  }
});

// node_modules/formidable/lib/octet_parser.js
var require_octet_parser = __commonJS({
  "node_modules/formidable/lib/octet_parser.js"(exports) {
    init_shims();
    var EventEmitter = require("events").EventEmitter;
    var util = require("util");
    function OctetParser(options2) {
      if (!(this instanceof OctetParser))
        return new OctetParser(options2);
      EventEmitter.call(this);
    }
    util.inherits(OctetParser, EventEmitter);
    exports.OctetParser = OctetParser;
    OctetParser.prototype.write = function(buffer) {
      this.emit("data", buffer);
      return buffer.length;
    };
    OctetParser.prototype.end = function() {
      this.emit("end");
    };
  }
});

// node_modules/formidable/lib/json_parser.js
var require_json_parser = __commonJS({
  "node_modules/formidable/lib/json_parser.js"(exports) {
    init_shims();
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var Buffer2 = require("buffer").Buffer;
    function JSONParser(parent) {
      this.parent = parent;
      this.chunks = [];
      this.bytesWritten = 0;
    }
    exports.JSONParser = JSONParser;
    JSONParser.prototype.write = function(buffer) {
      this.bytesWritten += buffer.length;
      this.chunks.push(buffer);
      return buffer.length;
    };
    JSONParser.prototype.end = function() {
      try {
        var fields = JSON.parse(Buffer2.concat(this.chunks));
        for (var field in fields) {
          this.onField(field, fields[field]);
        }
      } catch (e) {
        this.parent.emit("error", e);
      }
      this.data = null;
      this.onEnd();
    };
  }
});

// node_modules/formidable/lib/incoming_form.js
var require_incoming_form = __commonJS({
  "node_modules/formidable/lib/incoming_form.js"(exports) {
    init_shims();
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var crypto = require("crypto");
    var fs = require("fs");
    var util = require("util");
    var path = require("path");
    var File2 = require_file();
    var MultipartParser = require_multipart_parser().MultipartParser;
    var QuerystringParser = require_querystring_parser().QuerystringParser;
    var OctetParser = require_octet_parser().OctetParser;
    var JSONParser = require_json_parser().JSONParser;
    var StringDecoder = require("string_decoder").StringDecoder;
    var EventEmitter = require("events").EventEmitter;
    var Stream2 = require("stream").Stream;
    var os = require("os");
    function IncomingForm(opts) {
      if (!(this instanceof IncomingForm))
        return new IncomingForm(opts);
      EventEmitter.call(this);
      opts = opts || {};
      this.error = null;
      this.ended = false;
      this.maxFields = opts.maxFields || 1e3;
      this.maxFieldsSize = opts.maxFieldsSize || 20 * 1024 * 1024;
      this.maxFileSize = opts.maxFileSize || 200 * 1024 * 1024;
      this.keepExtensions = opts.keepExtensions || false;
      this.uploadDir = opts.uploadDir || os.tmpdir && os.tmpdir() || os.tmpDir();
      this.encoding = opts.encoding || "utf-8";
      this.headers = null;
      this.type = null;
      this.hash = opts.hash || false;
      this.multiples = opts.multiples || false;
      this.bytesReceived = null;
      this.bytesExpected = null;
      this._parser = null;
      this._flushing = 0;
      this._fieldsSize = 0;
      this._fileSize = 0;
      this.openedFiles = [];
      return this;
    }
    util.inherits(IncomingForm, EventEmitter);
    exports.IncomingForm = IncomingForm;
    IncomingForm.prototype.parse = function(req, cb) {
      this.pause = function() {
        try {
          req.pause();
        } catch (err) {
          if (!this.ended) {
            this._error(err);
          }
          return false;
        }
        return true;
      };
      this.resume = function() {
        try {
          req.resume();
        } catch (err) {
          if (!this.ended) {
            this._error(err);
          }
          return false;
        }
        return true;
      };
      if (cb) {
        var fields = {}, files = {};
        this.on("field", function(name, value) {
          fields[name] = value;
        }).on("file", function(name, file) {
          if (this.multiples) {
            if (files[name]) {
              if (!Array.isArray(files[name])) {
                files[name] = [files[name]];
              }
              files[name].push(file);
            } else {
              files[name] = file;
            }
          } else {
            files[name] = file;
          }
        }).on("error", function(err) {
          cb(err, fields, files);
        }).on("end", function() {
          cb(null, fields, files);
        });
      }
      this.writeHeaders(req.headers);
      var self2 = this;
      req.on("error", function(err) {
        self2._error(err);
      }).on("aborted", function() {
        self2.emit("aborted");
        self2._error(new Error("Request aborted"));
      }).on("data", function(buffer) {
        self2.write(buffer);
      }).on("end", function() {
        if (self2.error) {
          return;
        }
        var err = self2._parser.end();
        if (err) {
          self2._error(err);
        }
      });
      return this;
    };
    IncomingForm.prototype.writeHeaders = function(headers) {
      this.headers = headers;
      this._parseContentLength();
      this._parseContentType();
    };
    IncomingForm.prototype.write = function(buffer) {
      if (this.error) {
        return;
      }
      if (!this._parser) {
        this._error(new Error("uninitialized parser"));
        return;
      }
      if (typeof this._parser.write !== "function") {
        this._error(new Error("did not expect data"));
        return;
      }
      this.bytesReceived += buffer.length;
      this.emit("progress", this.bytesReceived, this.bytesExpected);
      var bytesParsed = this._parser.write(buffer);
      if (bytesParsed !== buffer.length) {
        this._error(new Error("parser error, " + bytesParsed + " of " + buffer.length + " bytes parsed"));
      }
      return bytesParsed;
    };
    IncomingForm.prototype.pause = function() {
      return false;
    };
    IncomingForm.prototype.resume = function() {
      return false;
    };
    IncomingForm.prototype.onPart = function(part) {
      this.handlePart(part);
    };
    IncomingForm.prototype.handlePart = function(part) {
      var self2 = this;
      if (part.filename === void 0) {
        var value = "", decoder = new StringDecoder(this.encoding);
        part.on("data", function(buffer) {
          self2._fieldsSize += buffer.length;
          if (self2._fieldsSize > self2.maxFieldsSize) {
            self2._error(new Error("maxFieldsSize exceeded, received " + self2._fieldsSize + " bytes of field data"));
            return;
          }
          value += decoder.write(buffer);
        });
        part.on("end", function() {
          self2.emit("field", part.name, value);
        });
        return;
      }
      this._flushing++;
      var file = new File2({
        path: this._uploadPath(part.filename),
        name: part.filename,
        type: part.mime,
        hash: self2.hash
      });
      this.emit("fileBegin", part.name, file);
      file.open();
      this.openedFiles.push(file);
      part.on("data", function(buffer) {
        self2._fileSize += buffer.length;
        if (self2._fileSize > self2.maxFileSize) {
          self2._error(new Error("maxFileSize exceeded, received " + self2._fileSize + " bytes of file data"));
          return;
        }
        if (buffer.length == 0) {
          return;
        }
        self2.pause();
        file.write(buffer, function() {
          self2.resume();
        });
      });
      part.on("end", function() {
        file.end(function() {
          self2._flushing--;
          self2.emit("file", part.name, file);
          self2._maybeEnd();
        });
      });
    };
    function dummyParser(self2) {
      return {
        end: function() {
          self2.ended = true;
          self2._maybeEnd();
          return null;
        }
      };
    }
    IncomingForm.prototype._parseContentType = function() {
      if (this.bytesExpected === 0) {
        this._parser = dummyParser(this);
        return;
      }
      if (!this.headers["content-type"]) {
        this._error(new Error("bad content-type header, no content-type"));
        return;
      }
      if (this.headers["content-type"].match(/octet-stream/i)) {
        this._initOctetStream();
        return;
      }
      if (this.headers["content-type"].match(/urlencoded/i)) {
        this._initUrlencoded();
        return;
      }
      if (this.headers["content-type"].match(/multipart/i)) {
        var m = this.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i);
        if (m) {
          this._initMultipart(m[1] || m[2]);
        } else {
          this._error(new Error("bad content-type header, no multipart boundary"));
        }
        return;
      }
      if (this.headers["content-type"].match(/json/i)) {
        this._initJSONencoded();
        return;
      }
      this._error(new Error("bad content-type header, unknown content-type: " + this.headers["content-type"]));
    };
    IncomingForm.prototype._error = function(err) {
      if (this.error || this.ended) {
        return;
      }
      this.error = err;
      this.emit("error", err);
      if (Array.isArray(this.openedFiles)) {
        this.openedFiles.forEach(function(file) {
          file._writeStream.on("error", function() {
          }).destroy();
          setTimeout(fs.unlink, 0, file.path, function(error2) {
          });
        });
      }
    };
    IncomingForm.prototype._parseContentLength = function() {
      this.bytesReceived = 0;
      if (this.headers["content-length"]) {
        this.bytesExpected = parseInt(this.headers["content-length"], 10);
      } else if (this.headers["transfer-encoding"] === void 0) {
        this.bytesExpected = 0;
      }
      if (this.bytesExpected !== null) {
        this.emit("progress", this.bytesReceived, this.bytesExpected);
      }
    };
    IncomingForm.prototype._newParser = function() {
      return new MultipartParser();
    };
    IncomingForm.prototype._initMultipart = function(boundary) {
      this.type = "multipart";
      var parser = new MultipartParser(), self2 = this, headerField, headerValue, part;
      parser.initWithBoundary(boundary);
      parser.onPartBegin = function() {
        part = new Stream2();
        part.readable = true;
        part.headers = {};
        part.name = null;
        part.filename = null;
        part.mime = null;
        part.transferEncoding = "binary";
        part.transferBuffer = "";
        headerField = "";
        headerValue = "";
      };
      parser.onHeaderField = function(b, start, end) {
        headerField += b.toString(self2.encoding, start, end);
      };
      parser.onHeaderValue = function(b, start, end) {
        headerValue += b.toString(self2.encoding, start, end);
      };
      parser.onHeaderEnd = function() {
        headerField = headerField.toLowerCase();
        part.headers[headerField] = headerValue;
        var m = headerValue.match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))/i);
        if (headerField == "content-disposition") {
          if (m) {
            part.name = m[2] || m[3] || "";
          }
          part.filename = self2._fileName(headerValue);
        } else if (headerField == "content-type") {
          part.mime = headerValue;
        } else if (headerField == "content-transfer-encoding") {
          part.transferEncoding = headerValue.toLowerCase();
        }
        headerField = "";
        headerValue = "";
      };
      parser.onHeadersEnd = function() {
        switch (part.transferEncoding) {
          case "binary":
          case "7bit":
          case "8bit":
            parser.onPartData = function(b, start, end) {
              part.emit("data", b.slice(start, end));
            };
            parser.onPartEnd = function() {
              part.emit("end");
            };
            break;
          case "base64":
            parser.onPartData = function(b, start, end) {
              part.transferBuffer += b.slice(start, end).toString("ascii");
              var offset = parseInt(part.transferBuffer.length / 4, 10) * 4;
              part.emit("data", new Buffer(part.transferBuffer.substring(0, offset), "base64"));
              part.transferBuffer = part.transferBuffer.substring(offset);
            };
            parser.onPartEnd = function() {
              part.emit("data", new Buffer(part.transferBuffer, "base64"));
              part.emit("end");
            };
            break;
          default:
            return self2._error(new Error("unknown transfer-encoding"));
        }
        self2.onPart(part);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._fileName = function(headerValue) {
      var m = headerValue.match(/\bfilename=("(.*?)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))($|;\s)/i);
      if (!m)
        return;
      var match = m[2] || m[3] || "";
      var filename = match.substr(match.lastIndexOf("\\") + 1);
      filename = filename.replace(/%22/g, '"');
      filename = filename.replace(/&#([\d]{4});/g, function(m2, code) {
        return String.fromCharCode(code);
      });
      return filename;
    };
    IncomingForm.prototype._initUrlencoded = function() {
      this.type = "urlencoded";
      var parser = new QuerystringParser(this.maxFields), self2 = this;
      parser.onField = function(key, val) {
        self2.emit("field", key, val);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._initOctetStream = function() {
      this.type = "octet-stream";
      var filename = this.headers["x-file-name"];
      var mime = this.headers["content-type"];
      var file = new File2({
        path: this._uploadPath(filename),
        name: filename,
        type: mime
      });
      this.emit("fileBegin", filename, file);
      file.open();
      this.openedFiles.push(file);
      this._flushing++;
      var self2 = this;
      self2._parser = new OctetParser();
      var outstandingWrites = 0;
      self2._parser.on("data", function(buffer) {
        self2.pause();
        outstandingWrites++;
        file.write(buffer, function() {
          outstandingWrites--;
          self2.resume();
          if (self2.ended) {
            self2._parser.emit("doneWritingFile");
          }
        });
      });
      self2._parser.on("end", function() {
        self2._flushing--;
        self2.ended = true;
        var done = function() {
          file.end(function() {
            self2.emit("file", "file", file);
            self2._maybeEnd();
          });
        };
        if (outstandingWrites === 0) {
          done();
        } else {
          self2._parser.once("doneWritingFile", done);
        }
      });
    };
    IncomingForm.prototype._initJSONencoded = function() {
      this.type = "json";
      var parser = new JSONParser(this), self2 = this;
      parser.onField = function(key, val) {
        self2.emit("field", key, val);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._uploadPath = function(filename) {
      var buf = crypto.randomBytes(16);
      var name = "upload_" + buf.toString("hex");
      if (this.keepExtensions) {
        var ext = path.extname(filename);
        ext = ext.replace(/(\.[a-z0-9]+).*/i, "$1");
        name += ext;
      }
      return path.join(this.uploadDir, name);
    };
    IncomingForm.prototype._maybeEnd = function() {
      if (!this.ended || this._flushing || this.error) {
        return;
      }
      this.emit("end");
    };
  }
});

// node_modules/formidable/lib/index.js
var require_lib = __commonJS({
  "node_modules/formidable/lib/index.js"(exports, module2) {
    init_shims();
    var IncomingForm = require_incoming_form().IncomingForm;
    IncomingForm.IncomingForm = IncomingForm;
    module2.exports = IncomingForm;
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports, module2) {
    init_shims();
    var Stream2 = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream2);
    DelayedStream.create = function(source, options2) {
      var delayedStream = new this();
      options2 = options2 || {};
      for (var option in options2) {
        delayedStream[option] = options2[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream2.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports, module2) {
    init_shims();
    var util = require("util");
    var Stream2 = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream2);
    CombinedStream.create = function(options2) {
      var combinedStream = new this();
      options2 = options2 || {};
      for (var option in options2) {
        combinedStream[option] = options2[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options2) {
      Stream2.prototype.pipe.call(this, dest, options2);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
        this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
        this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana"
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana"
      },
      "image/avcs": {
        source: "iana"
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports, module2) {
    init_shims();
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports) {
    init_shims();
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = Object.create(null);
    exports.lookup = lookup;
    exports.types = Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2)
          mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types2) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types2[extension2]) {
            var from = preference.indexOf(db[types2[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types2[extension2] !== "application/octet-stream" && (from > to || from === to && types2[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types2[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports, module2) {
    init_shims();
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports, module2) {
    init_shims();
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports, module2) {
    init_shims();
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports, module2) {
    init_shims();
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error2, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error2) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error2, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports, module2) {
    init_shims();
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports, module2) {
    init_shims();
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports, module2) {
    init_shims();
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error2, result) {
          if (error2) {
            callback(error2, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports, module2) {
    init_shims();
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error2, result) {
        if (error2) {
          callback(error2, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports, module2) {
    init_shims();
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports, module2) {
    init_shims();
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports, module2) {
    init_shims();
    module2.exports = function(dst, src2) {
      Object.keys(src2).forEach(function(prop) {
        dst[prop] = dst[prop] || src2[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports, module2) {
    init_shims();
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path = require("path");
    var http2 = require("http");
    var https2 = require("https");
    var parseUrl = require("url").parse;
    var fs = require("fs");
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData;
    util.inherits(FormData, CombinedStream);
    function FormData(options2) {
      if (!(this instanceof FormData)) {
        return new FormData();
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options2 = options2 || {};
      for (var option in options2) {
        this[option] = options2[option];
      }
    }
    FormData.LINE_BREAK = "\r\n";
    FormData.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData.prototype.append = function(field, value, options2) {
      options2 = options2 || {};
      if (typeof options2 == "string") {
        options2 = { filename: options2 };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (util.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options2);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options2);
    };
    FormData.prototype._trackLength = function(header, value, options2) {
      var valueLength = 0;
      if (options2.knownLength != null) {
        valueLength += +options2.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion"))) {
        return;
      }
      if (!options2.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData.prototype._multiPartHeader = function(field, value, options2) {
      if (typeof options2.header == "string") {
        return options2.header;
      }
      var contentDisposition = this._getContentDisposition(value, options2);
      var contentType = this._getContentType(value, options2);
      var contents = "";
      var headers = {
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options2.header == "object") {
        populate(headers, options2.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
    };
    FormData.prototype._getContentDisposition = function(value, options2) {
      var filename, contentDisposition;
      if (typeof options2.filepath === "string") {
        filename = path.normalize(options2.filepath).replace(/\\/g, "/");
      } else if (options2.filename || value.name || value.path) {
        filename = path.basename(options2.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path.basename(value.client._httpMessage.path);
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData.prototype._getContentType = function(value, options2) {
      var contentType = options2.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options2.filepath || options2.filename)) {
        contentType = mime.lookup(options2.filepath || options2.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData.LINE_BREAK;
    };
    FormData.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData.prototype.submit = function(params, cb) {
      var request, options2, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options2 = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options2 = populate(params, defaults);
        if (!options2.port) {
          options2.port = options2.protocol == "https:" ? 443 : 80;
        }
      }
      options2.headers = this.getHeaders(params.headers);
      if (options2.protocol == "https:") {
        request = https2.request(options2);
      } else {
        request = http2.request(options2);
      }
      this.getLength(function(err, length) {
        if (err) {
          this._error(err);
          return;
        }
        request.setHeader("Content-Length", length);
        this.pipe(request);
        if (cb) {
          request.on("error", cb);
          request.on("response", cb.bind(this, null));
        }
      }.bind(this));
      return request;
    };
    FormData.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/superagent/lib/utils.js
var require_utils = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    init_shims();
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val)
          obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, changesOrigin) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header["host"];
      if (changesOrigin) {
        delete header["authorization"];
        delete header["cookie"];
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module2) {
    init_shims();
    "use strict";
    var utils = require_utils();
    module2.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params)
        this[key] = params[key];
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (err) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.status = this.statusCode = status;
      this.statusType = type;
      this.info = type == 1;
      this.ok = type == 2;
      this.redirect = type == 3;
      this.clientError = type == 4;
      this.serverError = type == 5;
      this.error = type == 4 || type == 5 ? this.toError() : false;
      this.accepted = status == 202;
      this.noContent = status == 204;
      this.badRequest = status == 400;
      this.unauthorized = status == 401;
      this.notAcceptable = status == 406;
      this.forbidden = status == 403;
      this.notFound = status == 404;
    };
  }
});

// node_modules/superagent/lib/node/response.js
var require_response = __commonJS({
  "node_modules/superagent/lib/node/response.js"(exports, module2) {
    init_shims();
    "use strict";
    var util = require("util");
    var Stream2 = require("stream");
    var ResponseBase = require_response_base();
    module2.exports = Response2;
    function Response2(req) {
      Stream2.call(this);
      const res = this.res = req.res;
      this.request = req;
      this.req = req.req;
      this.text = res.text;
      this.body = res.body !== void 0 ? res.body : {};
      this.files = res.files || {};
      this.buffered = typeof this.text == "string";
      this.header = this.headers = res.headers;
      this._setStatusProperties(res.statusCode);
      this._setHeaderProperties(this.header);
      this.setEncoding = res.setEncoding.bind(res);
      res.on("data", this.emit.bind(this, "data"));
      res.on("end", this.emit.bind(this, "end"));
      res.on("close", this.emit.bind(this, "close"));
      res.on("error", this.emit.bind(this, "error"));
    }
    util.inherits(Response2, Stream2);
    ResponseBase(Response2.prototype);
    Response2.prototype.destroy = function(err) {
      this.res.destroy(err);
    };
    Response2.prototype.pause = function() {
      this.res.pause();
    };
    Response2.prototype.resume = function() {
      this.res.resume();
    };
    Response2.prototype.toError = function() {
      const req = this.req;
      const method = req.method;
      const path = req.path;
      const msg = `cannot ${method} ${path} (${this.status})`;
      const err = new Error(msg);
      err.status = this.status;
      err.text = this.text;
      err.method = method;
      err.path = path;
      return err;
    };
    Response2.prototype.setStatusProperties = function(status) {
      console.warn("In superagent 2.x setStatusProperties is a private method");
      return this._setStatusProperties(status);
    };
    Response2.prototype.toJSON = function() {
      return {
        req: this.request.toJSON(),
        header: this.header,
        status: this.status,
        text: this.text
      };
    };
  }
});

// node_modules/methods/index.js
var require_methods = __commonJS({
  "node_modules/methods/index.js"(exports, module2) {
    init_shims();
    "use strict";
    var http2 = require("http");
    module2.exports = getCurrentNodeMethods() || getBasicNodeMethods();
    function getCurrentNodeMethods() {
      return http2.METHODS && http2.METHODS.map(function lowerCaseMethod(method) {
        return method.toLowerCase();
      });
    }
    function getBasicNodeMethods() {
      return [
        "get",
        "post",
        "put",
        "head",
        "delete",
        "options",
        "trace",
        "copy",
        "lock",
        "mkcol",
        "move",
        "purge",
        "propfind",
        "proppatch",
        "unlock",
        "report",
        "mkactivity",
        "checkout",
        "merge",
        "m-search",
        "notify",
        "subscribe",
        "unsubscribe",
        "patch",
        "search",
        "connect"
      ];
    }
  }
});

// node_modules/superagent/lib/node/unzip.js
var require_unzip = __commonJS({
  "node_modules/superagent/lib/node/unzip.js"(exports) {
    init_shims();
    "use strict";
    var StringDecoder = require("string_decoder").StringDecoder;
    var Stream2 = require("stream");
    var zlib2 = require("zlib");
    exports.unzip = (req, res) => {
      const unzip = zlib2.createUnzip();
      const stream = new Stream2();
      let decoder;
      stream.req = req;
      unzip.on("error", (err) => {
        if (err && err.code === "Z_BUF_ERROR") {
          stream.emit("end");
          return;
        }
        stream.emit("error", err);
      });
      res.pipe(unzip);
      res.setEncoding = (type) => {
        decoder = new StringDecoder(type);
      };
      unzip.on("data", (buf) => {
        if (decoder) {
          const str = decoder.write(buf);
          if (str.length)
            stream.emit("data", str);
        } else {
          stream.emit("data", buf);
        }
      });
      unzip.on("end", () => {
        stream.emit("end");
      });
      const _on = res.on;
      res.on = function(type, fn) {
        if (type == "data" || type == "end") {
          stream.on(type, fn);
        } else if (type == "error") {
          stream.on(type, fn);
          _on.call(res, type, fn);
        } else {
          _on.call(res, type, fn);
        }
        return this;
      };
    };
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module2) {
    init_shims();
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject = function isPlainObject2(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options2) {
      if (defineProperty && options2.name === "__proto__") {
        defineProperty(target, options2.name, {
          enumerable: true,
          configurable: true,
          value: options2.newValue,
          writable: true
        });
      } else {
        target[options2.name] = options2.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend() {
      var options2, name, src2, copy, copyIsArray, clone2;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options2 = arguments[i];
        if (options2 != null) {
          for (name in options2) {
            src2 = getProperty(target, name);
            copy = getProperty(options2, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone2 = src2 && isArray(src2) ? src2 : [];
                } else {
                  clone2 = src2 && isPlainObject(src2) ? src2 : {};
                }
                setProperty(target, { name, newValue: extend(deep, clone2, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/mime/types.json
var require_types = __commonJS({
  "node_modules/mime/types.json"(exports, module2) {
    module2.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/bdoc": ["bdoc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": [], "application/font-woff2": [], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": [], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": [], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": [], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": [], "application/x-msdownload": ["com", "bat"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": [], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": [], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp3": [], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/wav": ["wav"], "audio/wave": [], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": [], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": [], "audio/x-wav": [], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/apng": ["apng"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": [], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": [], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/rtf": [], "text/sgml": ["sgml", "sgm"], "text/slim": ["slim", "slm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": [], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/xml": [], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }
});

// node_modules/mime/mime.js
var require_mime = __commonJS({
  "node_modules/mime/mime.js"(exports, module2) {
    init_shims();
    var path = require("path");
    var fs = require("fs");
    function Mime() {
      this.types = Object.create(null);
      this.extensions = Object.create(null);
    }
    Mime.prototype.define = function(map) {
      for (var type in map) {
        var exts = map[type];
        for (var i = 0; i < exts.length; i++) {
          if (process.env.DEBUG_MIME && this.types[exts[i]]) {
            console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + " to " + type);
          }
          this.types[exts[i]] = type;
        }
        if (!this.extensions[type]) {
          this.extensions[type] = exts[0];
        }
      }
    };
    Mime.prototype.load = function(file) {
      this._loading = file;
      var map = {}, content = fs.readFileSync(file, "ascii"), lines = content.split(/[\r\n]+/);
      lines.forEach(function(line) {
        var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
        map[fields.shift()] = fields;
      });
      this.define(map);
      this._loading = null;
    };
    Mime.prototype.lookup = function(path2, fallback) {
      var ext = path2.replace(/^.*[\.\/\\]/, "").toLowerCase();
      return this.types[ext] || fallback || this.default_type;
    };
    Mime.prototype.extension = function(mimeType) {
      var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
      return this.extensions[type];
    };
    var mime = new Mime();
    mime.define(require_types());
    mime.default_type = mime.lookup("bin");
    mime.Mime = Mime;
    mime.charsets = {
      lookup: function(mimeType, fallback) {
        return /^text\/|^application\/(javascript|json)/.test(mimeType) ? "UTF-8" : fallback;
      }
    };
    module2.exports = mime;
  }
});

// node_modules/qs/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module2) {
    init_shims();
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      var obj;
      while (queue.length) {
        var item = queue.pop();
        obj = item.obj[item.prop];
        if (Array.isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
      return obj;
    };
    var arrayToObject = function arrayToObject2(source, options2) {
      var obj = options2 && options2.plainObjects ? Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options2) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (Array.isArray(target)) {
          target.push(source);
        } else if (typeof target === "object") {
          if (options2.plainObjects || options2.allowPrototypes || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = arrayToObject(target, options2);
      }
      if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            if (target[i] && typeof target[i] === "object") {
              target[i] = merge2(target[i], item, options2);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options2);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str) {
      try {
        return decodeURIComponent(str.replace(/\+/g, " "));
      } catch (e) {
        return str;
      }
    };
    var encode = function encode2(str) {
      if (str.length === 0) {
        return str;
      }
      var string = typeof str === "string" ? str : String(str);
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      return compactQueue(queue);
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (obj === null || typeof obj === "undefined") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    module2.exports = {
      arrayToObject,
      assign,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      merge
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module2) {
    init_shims();
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    module2.exports = {
      "default": "RFC3986",
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return value;
        }
      },
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module2) {
    init_shims();
    "use strict";
    var utils = require_utils2();
    var formats = require_formats();
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var toISO = Date.prototype.toISOString;
    var defaults = {
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly) {
      var obj = object;
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        }
        obj = "";
      }
      if (typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean" || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (Array.isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (skipNulls && obj[key] === null) {
          continue;
        }
        if (Array.isArray(obj)) {
          values = values.concat(stringify2(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
        } else {
          values = values.concat(stringify2(obj[key], prefix + (allowDots ? "." + key : "[" + key + "]"), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
        }
      }
      return values;
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options2 = opts ? utils.assign({}, opts) : {};
      if (options2.encoder !== null && options2.encoder !== void 0 && typeof options2.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var delimiter = typeof options2.delimiter === "undefined" ? defaults.delimiter : options2.delimiter;
      var strictNullHandling = typeof options2.strictNullHandling === "boolean" ? options2.strictNullHandling : defaults.strictNullHandling;
      var skipNulls = typeof options2.skipNulls === "boolean" ? options2.skipNulls : defaults.skipNulls;
      var encode = typeof options2.encode === "boolean" ? options2.encode : defaults.encode;
      var encoder = typeof options2.encoder === "function" ? options2.encoder : defaults.encoder;
      var sort = typeof options2.sort === "function" ? options2.sort : null;
      var allowDots = typeof options2.allowDots === "undefined" ? false : options2.allowDots;
      var serializeDate = typeof options2.serializeDate === "function" ? options2.serializeDate : defaults.serializeDate;
      var encodeValuesOnly = typeof options2.encodeValuesOnly === "boolean" ? options2.encodeValuesOnly : defaults.encodeValuesOnly;
      if (typeof options2.format === "undefined") {
        options2.format = formats["default"];
      } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options2.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      var formatter = formats.formatters[options2.format];
      var objKeys;
      var filter;
      if (typeof options2.filter === "function") {
        filter = options2.filter;
        obj = filter("", obj);
      } else if (Array.isArray(options2.filter)) {
        filter = options2.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (options2.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options2.arrayFormat;
      } else if ("indices" in options2) {
        arrayFormat = options2.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (sort) {
        objKeys.sort(sort);
      }
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (skipNulls && obj[key] === null) {
          continue;
        }
        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
      }
      var joined = keys.join(delimiter);
      var prefix = options2.addQueryPrefix === true ? "?" : "";
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module2) {
    init_shims();
    "use strict";
    var utils = require_utils2();
    var has = Object.prototype.hasOwnProperty;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      arrayLimit: 20,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      parameterLimit: 1e3,
      plainObjects: false,
      strictNullHandling: false
    };
    var parseValues = function parseQueryStringValues(str, options2) {
      var obj = {};
      var cleanStr = options2.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options2.parameterLimit === Infinity ? void 0 : options2.parameterLimit;
      var parts = cleanStr.split(options2.delimiter, limit);
      for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options2.decoder(part, defaults.decoder);
          val = options2.strictNullHandling ? null : "";
        } else {
          key = options2.decoder(part.slice(0, pos), defaults.decoder);
          val = options2.decoder(part.slice(pos + 1), defaults.decoder);
        }
        if (has.call(obj, key)) {
          obj[key] = [].concat(obj[key]).concat(val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options2) {
      var leaf = val;
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]") {
          obj = [];
          obj = obj.concat(leaf);
        } else {
          obj = options2.plainObjects ? Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options2.parseArrays && index <= options2.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options2) {
      if (!givenKey) {
        return;
      }
      var key = options2.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options2.plainObjects && has.call(Object.prototype, parent)) {
          if (!options2.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while ((segment = child.exec(key)) !== null && i < options2.depth) {
        i += 1;
        if (!options2.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options2.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options2);
    };
    module2.exports = function(str, opts) {
      var options2 = opts ? utils.assign({}, opts) : {};
      if (options2.decoder !== null && options2.decoder !== void 0 && typeof options2.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      options2.ignoreQueryPrefix = options2.ignoreQueryPrefix === true;
      options2.delimiter = typeof options2.delimiter === "string" || utils.isRegExp(options2.delimiter) ? options2.delimiter : defaults.delimiter;
      options2.depth = typeof options2.depth === "number" ? options2.depth : defaults.depth;
      options2.arrayLimit = typeof options2.arrayLimit === "number" ? options2.arrayLimit : defaults.arrayLimit;
      options2.parseArrays = options2.parseArrays !== false;
      options2.decoder = typeof options2.decoder === "function" ? options2.decoder : defaults.decoder;
      options2.allowDots = typeof options2.allowDots === "boolean" ? options2.allowDots : defaults.allowDots;
      options2.plainObjects = typeof options2.plainObjects === "boolean" ? options2.plainObjects : defaults.plainObjects;
      options2.allowPrototypes = typeof options2.allowPrototypes === "boolean" ? options2.allowPrototypes : defaults.allowPrototypes;
      options2.parameterLimit = typeof options2.parameterLimit === "number" ? options2.parameterLimit : defaults.parameterLimit;
      options2.strictNullHandling = typeof options2.strictNullHandling === "boolean" ? options2.strictNullHandling : defaults.strictNullHandling;
      if (str === "" || str === null || typeof str === "undefined") {
        return options2.plainObjects ? Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options2) : str;
      var obj = options2.plainObjects ? Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options2);
        obj = utils.merge(obj, newObj, options2);
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module2) {
    init_shims();
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/superagent/package.json
var require_package = __commonJS({
  "node_modules/superagent/package.json"(exports, module2) {
    module2.exports = {
      _from: "superagent@3.8.1",
      _id: "superagent@3.8.1",
      _inBundle: false,
      _integrity: "sha512-VMBFLYgFuRdfeNQSMLbxGSLfmXL/xc+OO+BZp41Za/NRDBet/BNbkRJrYzCUu0u4GU0i/ml2dtT8b9qgkw9z6Q==",
      _location: "/superagent",
      _phantomChildren: {
        ms: "2.1.2"
      },
      _requested: {
        type: "version",
        registry: true,
        raw: "superagent@3.8.1",
        name: "superagent",
        escapedName: "superagent",
        rawSpec: "3.8.1",
        saveSpec: null,
        fetchSpec: "3.8.1"
      },
      _requiredBy: [
        "/@mailchimp/mailchimp_marketing"
      ],
      _resolved: "https://registry.npmjs.org/superagent/-/superagent-3.8.1.tgz",
      _shasum: "2571fd921f3fcdba43ac68c3b35c91951532701f",
      _spec: "superagent@3.8.1",
      _where: "C:\\Users\\tyner\\dev\\personal\\social-dash\\app\\node_modules\\@mailchimp\\mailchimp_marketing",
      author: {
        name: "TJ Holowaychuk",
        email: "tj@vision-media.ca"
      },
      browser: {
        "./lib/node/index.js": "./lib/client.js",
        "./test/support/server.js": "./test/support/blank.js"
      },
      bugs: {
        url: "https://github.com/visionmedia/superagent/issues"
      },
      bundleDependencies: false,
      component: {
        scripts: {
          superagent: "lib/client.js"
        }
      },
      contributors: [
        {
          name: "Kornel Lesi\u0144ski",
          email: "kornel@geekhood.net"
        },
        {
          name: "Peter Lyons",
          email: "pete@peterlyons.com"
        },
        {
          name: "Hunter Loftis",
          email: "hunter@hunterloftis.com"
        }
      ],
      dependencies: {
        "component-emitter": "^1.2.0",
        cookiejar: "^2.1.0",
        debug: "^3.1.0",
        extend: "^3.0.0",
        "form-data": "^2.3.1",
        formidable: "^1.1.1",
        methods: "^1.1.1",
        mime: "^1.4.1",
        qs: "^6.5.1",
        "readable-stream": "^2.0.5"
      },
      deprecated: false,
      description: "elegant & feature rich browser / node HTTP with a fluent API",
      devDependencies: {
        Base64: "^1.0.1",
        "basic-auth-connect": "^1.0.0",
        "body-parser": "^1.18.2",
        browserify: "^14.1.0",
        "cookie-parser": "^1.4.3",
        express: "^4.16.0",
        "express-session": "^1.15.6",
        marked: "^0.3.6",
        mocha: "^3.5.3",
        multer: "^1.3.0",
        should: "^11.2.0",
        "should-http": "^0.1.1",
        zuul: "^3.11.1"
      },
      engines: {
        node: ">= 4.0"
      },
      homepage: "https://github.com/visionmedia/superagent#readme",
      keywords: [
        "http",
        "ajax",
        "request",
        "agent"
      ],
      license: "MIT",
      main: "./lib/node/index.js",
      name: "superagent",
      repository: {
        type: "git",
        url: "git://github.com/visionmedia/superagent.git"
      },
      scripts: {
        prepare: "make all",
        test: "make test"
      },
      version: "3.8.1"
    };
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module2) {
    init_shims();
    "use strict";
    function isObject(obj) {
      return obj !== null && typeof obj === "object";
    }
    module2.exports = isObject;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module2) {
    init_shims();
    "use strict";
    var isObject = require_is_object();
    module2.exports = RequestBase;
    function RequestBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function _clearTimeout() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function parse(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function serialize(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function timeout(options2) {
      if (!options2 || typeof options2 !== "object") {
        this._timeout = options2;
        this._responseTimeout = 0;
        return this;
      }
      for (var option in options2) {
        switch (option) {
          case "deadline":
            this._timeout = options2.deadline;
            break;
          case "response":
            this._responseTimeout = options2.response;
            break;
          default:
            console.warn("Unknown timeout option", option);
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function retry(count, fn) {
      if (arguments.length === 0 || count === true)
        count = 1;
      if (count <= 0)
        count = 0;
      this._maxRetries = count;
      this._retries = 0;
      this._retryCallback = fn;
      return this;
    };
    var ERROR_CODES = [
      "ECONNRESET",
      "ETIMEDOUT",
      "EADDRINFO",
      "ESOCKETTIMEDOUT"
    ];
    RequestBase.prototype._shouldRetry = function(err, res) {
      if (!this._maxRetries || this._retries++ >= this._maxRetries) {
        return false;
      }
      if (this._retryCallback) {
        try {
          var override = this._retryCallback(err, res);
          if (override === true)
            return true;
          if (override === false)
            return false;
        } catch (e) {
          console.error(e);
        }
      }
      if (res && res.status && res.status >= 500 && res.status != 501)
        return true;
      if (err) {
        if (err.code && ~ERROR_CODES.indexOf(err.code))
          return true;
        if (err.timeout && err.code == "ECONNABORTED")
          return true;
        if (err.crossDomain)
          return true;
      }
      return false;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      return this._end();
    };
    RequestBase.prototype.then = function then(resolve2, reject) {
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
          self2.end(function(err, res) {
            if (err)
              innerReject(err);
            else
              innerResolve(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve2, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function use(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if (typeof cb !== "function")
        throw Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject(field)) {
        for (var key in field) {
          this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (name === null || name === void 0) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject(name)) {
        for (var key in name) {
          this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          this.field(name, val[i]);
        }
        return this;
      }
      if (val === null || val === void 0) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if (typeof val === "boolean") {
        val = "" + val;
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      this.xhr && this.xhr.abort();
      this.req && this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype._auth = function(user, pass, options2, base64Encoder) {
      switch (options2.type) {
        case "basic":
          this.set("Authorization", "Basic " + base64Encoder(user + ":" + pass));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer " + user);
          break;
      }
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on == void 0)
        on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if (typeof n !== "number") {
        throw TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject(data);
      var type = this._header["content-type"];
      if (this._formData) {
        console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw Error("Can't merge these send calls");
      }
      if (isObj && isObject(this._data)) {
        for (var key in data) {
          this._data[key] = data[key];
        }
      } else if (typeof data == "string") {
        if (!type)
          this.type("form");
        type = this._header["content-type"];
        if (type == "application/x-www-form-urlencoded") {
          this._data = this._data ? this._data + "&" + data : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type)
        this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.substring(index + 1).split("&");
          if (typeof this._sort === "function") {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.substring(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.trace("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error(reason + timeout + "ms exceeded");
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/cookiejar/cookiejar.js
var require_cookiejar = __commonJS({
  "node_modules/cookiejar/cookiejar.js"(exports) {
    init_shims();
    (function() {
      "use strict";
      function CookieAccessInfo(domain, path, secure, script) {
        if (this instanceof CookieAccessInfo) {
          this.domain = domain || void 0;
          this.path = path || "/";
          this.secure = !!secure;
          this.script = !!script;
          return this;
        }
        return new CookieAccessInfo(domain, path, secure, script);
      }
      CookieAccessInfo.All = Object.freeze(Object.create(null));
      exports.CookieAccessInfo = CookieAccessInfo;
      function Cookie(cookiestr, request_domain, request_path) {
        if (cookiestr instanceof Cookie) {
          return cookiestr;
        }
        if (this instanceof Cookie) {
          this.name = null;
          this.value = null;
          this.expiration_date = Infinity;
          this.path = String(request_path || "/");
          this.explicit_path = false;
          this.domain = request_domain || null;
          this.explicit_domain = false;
          this.secure = false;
          this.noscript = false;
          if (cookiestr) {
            this.parse(cookiestr, request_domain, request_path);
          }
          return this;
        }
        return new Cookie(cookiestr, request_domain, request_path);
      }
      exports.Cookie = Cookie;
      Cookie.prototype.toString = function toString() {
        var str = [this.name + "=" + this.value];
        if (this.expiration_date !== Infinity) {
          str.push("expires=" + new Date(this.expiration_date).toGMTString());
        }
        if (this.domain) {
          str.push("domain=" + this.domain);
        }
        if (this.path) {
          str.push("path=" + this.path);
        }
        if (this.secure) {
          str.push("secure");
        }
        if (this.noscript) {
          str.push("httponly");
        }
        return str.join("; ");
      };
      Cookie.prototype.toValueString = function toValueString() {
        return this.name + "=" + this.value;
      };
      var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
      Cookie.prototype.parse = function parse(str, request_domain, request_path) {
        if (this instanceof Cookie) {
          var parts = str.split(";").filter(function(value2) {
            return !!value2;
          });
          var i;
          var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
          if (!pair) {
            console.warn("Invalid cookie header encountered. Header: '" + str + "'");
            return;
          }
          var key = pair[1];
          var value = pair[2];
          if (typeof key !== "string" || key.length === 0 || typeof value !== "string") {
            console.warn("Unable to extract values from cookie header. Cookie: '" + str + "'");
            return;
          }
          this.name = key;
          this.value = value;
          for (i = 1; i < parts.length; i += 1) {
            pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
            key = pair[1].trim().toLowerCase();
            value = pair[2];
            switch (key) {
              case "httponly":
                this.noscript = true;
                break;
              case "expires":
                this.expiration_date = value ? Number(Date.parse(value)) : Infinity;
                break;
              case "path":
                this.path = value ? value.trim() : "";
                this.explicit_path = true;
                break;
              case "domain":
                this.domain = value ? value.trim() : "";
                this.explicit_domain = !!this.domain;
                break;
              case "secure":
                this.secure = true;
                break;
            }
          }
          if (!this.explicit_path) {
            this.path = request_path || "/";
          }
          if (!this.explicit_domain) {
            this.domain = request_domain;
          }
          return this;
        }
        return new Cookie().parse(str, request_domain, request_path);
      };
      Cookie.prototype.matches = function matches(access_info) {
        if (access_info === CookieAccessInfo.All) {
          return true;
        }
        if (this.noscript && access_info.script || this.secure && !access_info.secure || !this.collidesWith(access_info)) {
          return false;
        }
        return true;
      };
      Cookie.prototype.collidesWith = function collidesWith(access_info) {
        if (this.path && !access_info.path || this.domain && !access_info.domain) {
          return false;
        }
        if (this.path && access_info.path.indexOf(this.path) !== 0) {
          return false;
        }
        if (this.explicit_path && access_info.path.indexOf(this.path) !== 0) {
          return false;
        }
        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/, "");
        var cookie_domain = this.domain && this.domain.replace(/^[\.]/, "");
        if (cookie_domain === access_domain) {
          return true;
        }
        if (cookie_domain) {
          if (!this.explicit_domain) {
            return false;
          }
          var wildcard = access_domain.indexOf(cookie_domain);
          if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
            return false;
          }
          return true;
        }
        return true;
      };
      function CookieJar() {
        var cookies, cookies_list, collidable_cookie;
        if (this instanceof CookieJar) {
          cookies = Object.create(null);
          this.setCookie = function setCookie(cookie2, request_domain, request_path) {
            var remove, i;
            cookie2 = new Cookie(cookie2, request_domain, request_path);
            remove = cookie2.expiration_date <= Date.now();
            if (cookies[cookie2.name] !== void 0) {
              cookies_list = cookies[cookie2.name];
              for (i = 0; i < cookies_list.length; i += 1) {
                collidable_cookie = cookies_list[i];
                if (collidable_cookie.collidesWith(cookie2)) {
                  if (remove) {
                    cookies_list.splice(i, 1);
                    if (cookies_list.length === 0) {
                      delete cookies[cookie2.name];
                    }
                    return false;
                  }
                  cookies_list[i] = cookie2;
                  return cookie2;
                }
              }
              if (remove) {
                return false;
              }
              cookies_list.push(cookie2);
              return cookie2;
            }
            if (remove) {
              return false;
            }
            cookies[cookie2.name] = [cookie2];
            return cookies[cookie2.name];
          };
          this.getCookie = function getCookie(cookie_name, access_info) {
            var cookie2, i;
            cookies_list = cookies[cookie_name];
            if (!cookies_list) {
              return;
            }
            for (i = 0; i < cookies_list.length; i += 1) {
              cookie2 = cookies_list[i];
              if (cookie2.expiration_date <= Date.now()) {
                if (cookies_list.length === 0) {
                  delete cookies[cookie2.name];
                }
                continue;
              }
              if (cookie2.matches(access_info)) {
                return cookie2;
              }
            }
          };
          this.getCookies = function getCookies(access_info) {
            var matches = [], cookie_name, cookie2;
            for (cookie_name in cookies) {
              cookie2 = this.getCookie(cookie_name, access_info);
              if (cookie2) {
                matches.push(cookie2);
              }
            }
            matches.toString = function toString() {
              return matches.join(":");
            };
            matches.toValueString = function toValueString() {
              return matches.map(function(c) {
                return c.toValueString();
              }).join("; ");
            };
            return matches;
          };
          return this;
        }
        return new CookieJar();
      }
      exports.CookieJar = CookieJar;
      CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
        cookies = Array.isArray(cookies) ? cookies : cookies.split(cookie_str_splitter);
        var successful = [], i, cookie2;
        cookies = cookies.map(function(item) {
          return new Cookie(item, request_domain, request_path);
        });
        for (i = 0; i < cookies.length; i += 1) {
          cookie2 = cookies[i];
          if (this.setCookie(cookie2, request_domain, request_path)) {
            successful.push(cookie2);
          }
        }
        return successful;
      };
    })();
  }
});

// node_modules/superagent/lib/agent-base.js
var require_agent_base = __commonJS({
  "node_modules/superagent/lib/agent-base.js"(exports, module2) {
    init_shims();
    function Agent() {
      this._defaults = [];
    }
    [
      "use",
      "on",
      "once",
      "set",
      "query",
      "type",
      "accept",
      "auth",
      "withCredentials",
      "sortQuery",
      "retry",
      "ok",
      "redirects",
      "timeout",
      "buffer",
      "serialize",
      "parse",
      "ca",
      "key",
      "pfx",
      "cert"
    ].forEach(function(fn) {
      Agent.prototype[fn] = function() {
        this._defaults.push({ fn, arguments });
        return this;
      };
    });
    Agent.prototype._setDefaults = function(req) {
      this._defaults.forEach(function(def) {
        req[def.fn].apply(req, def.arguments);
      });
    };
    module2.exports = Agent;
  }
});

// node_modules/superagent/lib/node/agent.js
var require_agent = __commonJS({
  "node_modules/superagent/lib/node/agent.js"(exports, module2) {
    init_shims();
    "use strict";
    var CookieJar = require_cookiejar().CookieJar;
    var CookieAccess = require_cookiejar().CookieAccessInfo;
    var parse = require("url").parse;
    var request = require_node2();
    var AgentBase = require_agent_base();
    var methods = require_methods();
    module2.exports = Agent;
    function Agent(options2) {
      if (!(this instanceof Agent)) {
        return new Agent(options2);
      }
      AgentBase.call(this);
      this.jar = new CookieJar();
      if (options2) {
        if (options2.ca) {
          this.ca(options2.ca);
        }
        if (options2.key) {
          this.key(options2.key);
        }
        if (options2.pfx) {
          this.pfx(options2.pfx);
        }
        if (options2.cert) {
          this.cert(options2.cert);
        }
      }
    }
    Agent.prototype = Object.create(AgentBase.prototype);
    Agent.prototype._saveCookies = function(res) {
      const cookies = res.headers["set-cookie"];
      if (cookies)
        this.jar.setCookies(cookies);
    };
    Agent.prototype._attachCookies = function(req) {
      const url = parse(req.url);
      const access = CookieAccess(url.hostname, url.pathname, url.protocol == "https:");
      const cookies = this.jar.getCookies(access).toValueString();
      req.cookies = cookies;
    };
    methods.forEach((name) => {
      const method = name.toUpperCase();
      Agent.prototype[name] = function(url, fn) {
        const req = new request.Request(method, url);
        req.on("response", this._saveCookies.bind(this));
        req.on("redirect", this._saveCookies.bind(this));
        req.on("redirect", this._attachCookies.bind(this, req));
        this._attachCookies(req);
        this._setDefaults(req);
        if (fn) {
          req.end(fn);
        }
        return req;
      };
    });
    Agent.prototype.del = Agent.prototype["delete"];
  }
});

// node_modules/superagent/lib/node/parsers/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/superagent/lib/node/parsers/urlencoded.js"(exports, module2) {
    init_shims();
    "use strict";
    var qs = require_lib2();
    module2.exports = function(res, fn) {
      res.text = "";
      res.setEncoding("ascii");
      res.on("data", (chunk) => {
        res.text += chunk;
      });
      res.on("end", () => {
        try {
          fn(null, qs.parse(res.text));
        } catch (err) {
          fn(err);
        }
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/json.js
var require_json = __commonJS({
  "node_modules/superagent/lib/node/parsers/json.js"(exports, module2) {
    init_shims();
    "use strict";
    module2.exports = function parseJSON(res, fn) {
      res.text = "";
      res.setEncoding("utf8");
      res.on("data", (chunk) => {
        res.text += chunk;
      });
      res.on("end", () => {
        try {
          var body = res.text && JSON.parse(res.text);
        } catch (e) {
          var err = e;
          err.rawResponse = res.text || null;
          err.statusCode = res.statusCode;
        } finally {
          fn(err, body);
        }
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/text.js
var require_text = __commonJS({
  "node_modules/superagent/lib/node/parsers/text.js"(exports, module2) {
    init_shims();
    "use strict";
    module2.exports = function(res, fn) {
      res.text = "";
      res.setEncoding("utf8");
      res.on("data", (chunk) => {
        res.text += chunk;
      });
      res.on("end", fn);
    };
  }
});

// node_modules/superagent/lib/node/parsers/image.js
var require_image = __commonJS({
  "node_modules/superagent/lib/node/parsers/image.js"(exports, module2) {
    init_shims();
    "use strict";
    module2.exports = (res, fn) => {
      const data = [];
      res.on("data", (chunk) => {
        data.push(chunk);
      });
      res.on("end", () => {
        fn(null, Buffer.concat(data));
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/index.js
var require_parsers = __commonJS({
  "node_modules/superagent/lib/node/parsers/index.js"(exports) {
    init_shims();
    "use strict";
    exports["application/x-www-form-urlencoded"] = require_urlencoded();
    exports["application/json"] = require_json();
    exports.text = require_text();
    var binary = require_image();
    exports["application/octet-stream"] = binary;
    exports["application/pdf"] = binary;
    exports.image = binary;
  }
});

// node_modules/superagent/lib/node/index.js
var require_node2 = __commonJS({
  "node_modules/superagent/lib/node/index.js"(exports, module2) {
    init_shims();
    "use strict";
    var debug = require_src()("superagent");
    var formidable = require_lib();
    var FormData = require_form_data();
    var Response2 = require_response();
    var parse = require("url").parse;
    var format2 = require("url").format;
    var resolve2 = require("url").resolve;
    var methods = require_methods();
    var Stream2 = require("stream");
    var utils = require_utils();
    var unzip = require_unzip().unzip;
    var extend = require_extend();
    var mime = require_mime();
    var https2 = require("https");
    var http2 = require("http");
    var fs = require("fs");
    var qs = require_lib2();
    var zlib2 = require("zlib");
    var util = require("util");
    var pkg = require_package();
    var RequestBase = require_request_base();
    function request(method, url) {
      if (typeof url == "function") {
        return new exports.Request("GET", method).end(url);
      }
      if (arguments.length == 1) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    }
    exports = module2.exports = request;
    exports.Request = Request2;
    exports.agent = require_agent();
    function noop2() {
    }
    exports.Response = Response2;
    mime.define({
      "application/x-www-form-urlencoded": ["form", "urlencoded", "form-data"]
    }, true);
    exports.protocols = {
      "http:": http2,
      "https:": https2
    };
    exports.serialize = {
      "application/x-www-form-urlencoded": qs.stringify,
      "application/json": JSON.stringify
    };
    exports.parse = require_parsers();
    function _initHeaders(req) {
      const ua = `node-superagent/${pkg.version}`;
      req._header = {
        "user-agent": ua
      };
      req.header = {
        "User-Agent": ua
      };
    }
    function Request2(method, url) {
      Stream2.call(this);
      if (typeof url != "string")
        url = format2(url);
      this._agent = false;
      this._formData = null;
      this.method = method;
      this.url = url;
      _initHeaders(this);
      this.writable = true;
      this._redirects = 0;
      this.redirects(method === "HEAD" ? 0 : 5);
      this.cookies = "";
      this.qs = {};
      this._query = [];
      this.qsRaw = this._query;
      this._redirectList = [];
      this._streamRequest = false;
      this.once("end", this.clearTimeout.bind(this));
    }
    util.inherits(Request2, Stream2);
    RequestBase(Request2.prototype);
    Request2.prototype.attach = function(field, file, options2) {
      if (file) {
        if (this._data) {
          throw Error("superagent can't mix .send() and .attach()");
        }
        let o = options2 || {};
        if (typeof options2 == "string") {
          o = { filename: options2 };
        }
        if (typeof file == "string") {
          if (!o.filename)
            o.filename = file;
          debug("creating `fs.ReadStream` instance for file: %s", file);
          file = fs.createReadStream(file);
        } else if (!o.filename && file.path) {
          o.filename = file.path;
        }
        this._getFormData().append(field, file, o);
      }
      return this;
    };
    Request2.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new FormData();
        this._formData.on("error", (err) => {
          this.emit("error", err);
          this.abort();
        });
      }
      return this._formData;
    };
    Request2.prototype.agent = function(agent) {
      if (!arguments.length)
        return this._agent;
      this._agent = agent;
      return this;
    };
    Request2.prototype.type = function(type) {
      return this.set("Content-Type", ~type.indexOf("/") ? type : mime.lookup(type));
    };
    Request2.prototype.accept = function(type) {
      return this.set("Accept", ~type.indexOf("/") ? type : mime.lookup(type));
    };
    Request2.prototype.query = function(val) {
      if (typeof val == "string") {
        this._query.push(val);
      } else {
        extend(this.qs, val);
      }
      return this;
    };
    Request2.prototype.write = function(data, encoding) {
      const req = this.request();
      if (!this._streamRequest) {
        this._streamRequest = true;
      }
      return req.write(data, encoding);
    };
    Request2.prototype.pipe = function(stream, options2) {
      this.piped = true;
      this.buffer(false);
      this.end();
      return this._pipeContinue(stream, options2);
    };
    Request2.prototype._pipeContinue = function(stream, options2) {
      this.req.once("response", (res) => {
        const redirect = isRedirect2(res.statusCode);
        if (redirect && this._redirects++ != this._maxRedirects) {
          return this._redirect(res)._pipeContinue(stream, options2);
        }
        this.res = res;
        this._emitResponse();
        if (this._aborted)
          return;
        if (this._shouldUnzip(res)) {
          const unzipObj = zlib2.createUnzip();
          unzipObj.on("error", (err) => {
            if (err && err.code === "Z_BUF_ERROR") {
              stream.emit("end");
              return;
            }
            stream.emit("error", err);
          });
          res.pipe(unzipObj).pipe(stream, options2);
        } else {
          res.pipe(stream, options2);
        }
        res.once("end", () => {
          this.emit("end");
        });
      });
      return stream;
    };
    Request2.prototype.buffer = function(val) {
      this._buffer = val !== false;
      return this;
    };
    Request2.prototype._redirect = function(res) {
      let url = res.headers.location;
      if (!url) {
        return this.callback(new Error("No location header for redirect"), res);
      }
      debug("redirect %s -> %s", this.url, url);
      url = resolve2(this.url, url);
      res.resume();
      let headers = this.req._headers;
      const changesOrigin = parse(url).host !== parse(this.url).host;
      if (res.statusCode == 301 || res.statusCode == 302) {
        headers = utils.cleanHeader(this.req._headers, changesOrigin);
        this.method = this.method == "HEAD" ? "HEAD" : "GET";
        this._data = null;
      }
      if (res.statusCode == 303) {
        headers = utils.cleanHeader(this.req._headers, changesOrigin);
        this.method = "GET";
        this._data = null;
      }
      delete headers.host;
      delete this.req;
      delete this._formData;
      _initHeaders(this);
      this._endCalled = false;
      this.url = url;
      this.qs = {};
      this._query.length = 0;
      this.set(headers);
      this.emit("redirect", res);
      this._redirectList.push(this.url);
      this.end(this._callback);
      return this;
    };
    Request2.prototype.auth = function(user, pass, options2) {
      if (arguments.length === 1)
        pass = "";
      if (typeof pass === "object" && pass !== null) {
        options2 = pass;
        pass = "";
      }
      if (!options2) {
        options2 = { type: "basic" };
      }
      var encoder = function(string) {
        return new Buffer(string).toString("base64");
      };
      return this._auth(user, pass, options2, encoder);
    };
    Request2.prototype.ca = function(cert) {
      this._ca = cert;
      return this;
    };
    Request2.prototype.key = function(cert) {
      this._key = cert;
      return this;
    };
    Request2.prototype.pfx = function(cert) {
      if (typeof cert === "object" && !Buffer.isBuffer(cert)) {
        this._pfx = cert.pfx;
        this._passphrase = cert.passphrase;
      } else {
        this._pfx = cert;
      }
      return this;
    };
    Request2.prototype.cert = function(cert) {
      this._cert = cert;
      return this;
    };
    Request2.prototype.request = function() {
      if (this.req)
        return this.req;
      const options2 = {};
      try {
        const query = qs.stringify(this.qs, {
          indices: false,
          strictNullHandling: true
        });
        if (query) {
          this.qs = {};
          this._query.push(query);
        }
        this._finalizeQueryString();
      } catch (e) {
        return this.emit("error", e);
      }
      let url = this.url;
      const retries = this._retries;
      if (url.indexOf("http") != 0)
        url = `http://${url}`;
      url = parse(url);
      if (/^https?\+unix:/.test(url.protocol) === true) {
        url.protocol = `${url.protocol.split("+")[0]}:`;
        const unixParts = url.path.match(/^([^/]+)(.+)$/);
        options2.socketPath = unixParts[1].replace(/%2F/g, "/");
        url.path = unixParts[2];
      }
      options2.method = this.method;
      options2.port = url.port;
      options2.path = url.path;
      options2.host = url.hostname;
      options2.ca = this._ca;
      options2.key = this._key;
      options2.pfx = this._pfx;
      options2.cert = this._cert;
      options2.passphrase = this._passphrase;
      options2.agent = this._agent;
      const mod = exports.protocols[url.protocol];
      const req = this.req = mod.request(options2);
      req.setNoDelay(true);
      if (options2.method != "HEAD") {
        req.setHeader("Accept-Encoding", "gzip, deflate");
      }
      this.protocol = url.protocol;
      this.host = url.host;
      req.once("drain", () => {
        this.emit("drain");
      });
      req.once("error", (err) => {
        if (this._aborted)
          return;
        if (this._retries !== retries)
          return;
        if (this.response)
          return;
        this.callback(err);
      });
      if (url.auth) {
        const auth = url.auth.split(":");
        this.auth(auth[0], auth[1]);
      }
      if (this.username && this.password) {
        this.auth(this.username, this.password);
      }
      if (this.cookies)
        req.setHeader("Cookie", this.cookies);
      for (const key in this.header) {
        if (this.header.hasOwnProperty(key))
          req.setHeader(key, this.header[key]);
      }
      return req;
    };
    Request2.prototype.callback = function(err, res) {
      if (this._shouldRetry(err, res)) {
        return this._retry();
      }
      const fn = this._callback || noop2;
      this.clearTimeout();
      if (this.called)
        return console.warn("superagent: double callback bug");
      this.called = true;
      if (!err) {
        try {
          if (this._isResponseOK(res)) {
            return fn(err, res);
          }
          let msg = "Unsuccessful HTTP response";
          if (res) {
            msg = http2.STATUS_CODES[res.status] || msg;
          }
          err = new Error(msg);
          err.status = res ? res.status : void 0;
        } catch (new_err) {
          err = new_err;
        }
      }
      err.response = res;
      if (this._maxRetries)
        err.retries = this._retries - 1;
      if (err && this.listeners("error").length > 0) {
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request2.prototype._isHost = function _isHost(obj) {
      return Buffer.isBuffer(obj) || obj instanceof Stream2 || obj instanceof FormData;
    };
    Request2.prototype._emitResponse = function(body, files) {
      const response = new Response2(this);
      this.response = response;
      response.redirects = this._redirectList;
      if (body !== void 0) {
        response.body = body;
      }
      response.files = files;
      this.emit("response", response);
      return response;
    };
    Request2.prototype.end = function(fn) {
      this.request();
      debug("%s %s", this.method, this.url);
      if (this._endCalled) {
        console.warn("Warning: .end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop2;
      return this._end();
    };
    Request2.prototype._end = function() {
      let data = this._data;
      const req = this.req;
      let buffer = this._buffer;
      const method = this.method;
      this._setTimeouts();
      if (method != "HEAD" && !req._headerSent) {
        if (typeof data != "string") {
          let contentType = req.getHeader("Content-Type");
          if (contentType)
            contentType = contentType.split(";")[0];
          let serialize = exports.serialize[contentType];
          if (!serialize && isJSON(contentType)) {
            serialize = exports.serialize["application/json"];
          }
          if (serialize)
            data = serialize(data);
        }
        if (data && !req.getHeader("Content-Length")) {
          req.setHeader("Content-Length", Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));
        }
      }
      req.once("response", (res) => {
        debug("%s %s -> %s", this.method, this.url, res.statusCode);
        if (this._responseTimeoutTimer) {
          clearTimeout(this._responseTimeoutTimer);
        }
        if (this.piped) {
          return;
        }
        const max = this._maxRedirects;
        const mime2 = utils.type(res.headers["content-type"] || "") || "text/plain";
        const type = mime2.split("/")[0];
        const multipart = type == "multipart";
        const redirect = isRedirect2(res.statusCode);
        let parser = this._parser;
        const responseType = this._responseType;
        this.res = res;
        if (redirect && this._redirects++ != max) {
          return this._redirect(res);
        }
        if (this.method == "HEAD") {
          this.emit("end");
          this.callback(null, this._emitResponse());
          return;
        }
        if (this._shouldUnzip(res)) {
          unzip(req, res);
        }
        if (!parser) {
          if (responseType) {
            parser = exports.parse.image;
            buffer = true;
          } else if (multipart) {
            const form = new formidable.IncomingForm();
            parser = form.parse.bind(form);
            buffer = true;
          } else if (isImageOrVideo(mime2)) {
            parser = exports.parse.image;
            buffer = true;
          } else if (exports.parse[mime2]) {
            parser = exports.parse[mime2];
          } else if (type == "text") {
            parser = exports.parse.text;
            buffer = buffer !== false;
          } else if (isJSON(mime2)) {
            parser = exports.parse["application/json"];
            buffer = buffer !== false;
          } else if (buffer) {
            parser = exports.parse.text;
          }
        }
        if (buffer === void 0 && isText(mime2) || isJSON(mime2)) {
          buffer = true;
        }
        let parserHandlesEnd = false;
        if (buffer) {
          let responseBytesLeft = this._maxResponseSize || 2e8;
          res.on("data", (buf) => {
            responseBytesLeft -= buf.byteLength || buf.length;
            if (responseBytesLeft < 0) {
              const err = Error("Maximum response size reached");
              err.code = "ETOOLARGE";
              parserHandlesEnd = false;
              res.destroy(err);
            }
          });
        }
        if (parser) {
          try {
            parserHandlesEnd = buffer;
            parser(res, (err, obj, files) => {
              if (this.timedout) {
                return;
              }
              if (err && !this._aborted) {
                return this.callback(err);
              }
              if (parserHandlesEnd) {
                this.emit("end");
                this.callback(null, this._emitResponse(obj, files));
              }
            });
          } catch (err) {
            this.callback(err);
            return;
          }
        }
        this.res = res;
        if (!buffer) {
          debug("unbuffered %s %s", this.method, this.url);
          this.callback(null, this._emitResponse());
          if (multipart)
            return;
          res.once("end", () => {
            debug("end %s %s", this.method, this.url);
            this.emit("end");
          });
          return;
        }
        res.once("error", (err) => {
          parserHandlesEnd = false;
          this.callback(err, null);
        });
        if (!parserHandlesEnd)
          res.once("end", () => {
            debug("end %s %s", this.method, this.url);
            this.emit("end");
            this.callback(null, this._emitResponse());
          });
      });
      this.emit("request", this);
      const formData = this._formData;
      if (formData) {
        const headers = formData.getHeaders();
        for (const i in headers) {
          debug('setting FormData header: "%s: %s"', i, headers[i]);
          req.setHeader(i, headers[i]);
        }
        formData.getLength((err, length) => {
          debug("got FormData Content-Length: %s", length);
          if (typeof length == "number") {
            req.setHeader("Content-Length", length);
          }
          const getProgressMonitor = () => {
            const lengthComputable = true;
            const total = req.getHeader("Content-Length");
            let loaded = 0;
            const progress = new Stream2.Transform();
            progress._transform = (chunk, encoding, cb) => {
              loaded += chunk.length;
              this.emit("progress", {
                direction: "upload",
                lengthComputable,
                loaded,
                total
              });
              cb(null, chunk);
            };
            return progress;
          };
          formData.pipe(getProgressMonitor()).pipe(req);
        });
      } else {
        req.end(data);
      }
      return this;
    };
    Request2.prototype._shouldUnzip = (res) => {
      if (res.statusCode === 204 || res.statusCode === 304) {
        return false;
      }
      if (res.headers["content-length"] === "0") {
        return false;
      }
      return /^\s*(?:deflate|gzip)\s*$/.test(res.headers["content-encoding"]);
    };
    if (methods.indexOf("del") == -1) {
      methods = methods.slice(0);
      methods.push("del");
    }
    methods.forEach((method) => {
      const name = method;
      method = method == "del" ? "delete" : method;
      method = method.toUpperCase();
      request[name] = (url, data, fn) => {
        const req = request(method, url);
        if (typeof data == "function")
          fn = data, data = null;
        if (data) {
          if (method === "GET" || method === "HEAD") {
            req.query(data);
          } else {
            req.send(data);
          }
        }
        fn && req.end(fn);
        return req;
      };
    });
    function isText(mime2) {
      const parts = mime2.split("/");
      const type = parts[0];
      const subtype = parts[1];
      return type == "text" || subtype == "x-www-form-urlencoded";
    }
    function isImageOrVideo(mime2) {
      const type = mime2.split("/")[0];
      return type == "image" || type == "video";
    }
    function isJSON(mime2) {
      return /[\/+]json\b/.test(mime2);
    }
    function isRedirect2(code) {
      return ~[301, 302, 303, 305, 307, 308].indexOf(code);
    }
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js
var require_AccountExportApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getAccountExportsWithHttpInfo = function(exportId, opts) {
        opts = opts || {};
        var postBody = null;
        if (exportId === void 0 || exportId === null) {
          throw new Error("Missing the required parameter 'exportId' when calling ");
        }
        var pathParams = {
          "export_id": exportId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/account-exports/{export_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAccountExports = function(exportId, opts) {
        return this.getAccountExportsWithHttpInfo(exportId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js
var require_AccountExportsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.listAccountExportsWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/account-exports", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listAccountExports = function(opts) {
        return this.listAccountExportsWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createAccountExportWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/account-exports", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createAccountExport = function(body) {
        return this.createAccountExportWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js
var require_ActivityFeedApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getChimpChatterWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/activity-feed/chimp-chatter", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getChimpChatter = function(opts) {
        return this.getChimpChatterWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js
var require_AuthorizedAppsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/authorized-apps", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(appId, opts) {
        opts = opts || {};
        var postBody = null;
        if (appId === void 0 || appId === null) {
          throw new Error("Missing the required parameter 'appId' when calling ");
        }
        var pathParams = {
          "app_id": appId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/authorized-apps/{app_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(appId, opts) {
        return this.getWithHttpInfo(appId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js
var require_AutomationsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.archiveWithHttpInfo = function(workflowId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/actions/archive", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.archive = function(workflowId) {
        return this.archiveWithHttpInfo(workflowId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteWorkflowEmail = function(workflowId, workflowEmailId) {
        return this.deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "count": opts["count"],
          "offset": opts["offset"],
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "before_create_time": opts["beforeCreateTime"],
          "since_create_time": opts["sinceCreateTime"],
          "before_start_time": opts["beforeStartTime"],
          "since_start_time": opts["sinceStartTime"],
          "status": opts["status"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(workflowId, opts) {
        opts = opts || {};
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(workflowId, opts) {
        return this.getWithHttpInfo(workflowId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listAllWorkflowEmailsWithHttpInfo = function(workflowId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listAllWorkflowEmails = function(workflowId) {
        return this.listAllWorkflowEmailsWithHttpInfo(workflowId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getWorkflowEmail = function(workflowId, workflowEmailId) {
        return this.getWorkflowEmailWithHttpInfo(workflowId, workflowEmailId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWorkflowEmailSubscriberQueueWithHttpInfo = function(workflowId, workflowEmailId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}/queue", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getWorkflowEmailSubscriberQueue = function(workflowId, workflowEmailId) {
        return this.getWorkflowEmailSubscriberQueueWithHttpInfo(workflowId, workflowEmailId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, subscriberHash) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getWorkflowEmailSubscriber = function(workflowId, workflowEmailId, subscriberHash) {
        return this.getWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, subscriberHash).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWorkflowEmailSubscribersRemovedWithHttpInfo = function(workflowId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/removed-subscribers", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listWorkflowEmailSubscribersRemoved = function(workflowId) {
        return this.listWorkflowEmailSubscribersRemovedWithHttpInfo(workflowId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getRemovedWorkflowEmailSubscriberWithHttpInfo = function(workflowId, subscriberHash) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/removed-subscribers/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getRemovedWorkflowEmailSubscriber = function(workflowId, subscriberHash) {
        return this.getRemovedWorkflowEmailSubscriberWithHttpInfo(workflowId, subscriberHash).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId, body) {
        var postBody = body;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateWorkflowEmail = function(workflowId, workflowEmailId, body) {
        return this.updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.pauseAllEmailsWithHttpInfo = function(workflowId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/actions/pause-all-emails", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.pauseAllEmails = function(workflowId) {
        return this.pauseAllEmailsWithHttpInfo(workflowId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.startAllEmailsWithHttpInfo = function(workflowId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/actions/start-all-emails", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.startAllEmails = function(workflowId) {
        return this.startAllEmailsWithHttpInfo(workflowId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.pauseWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.pauseWorkflowEmail = function(workflowId, workflowEmailId) {
        return this.pauseWorkflowEmailWithHttpInfo(workflowId, workflowEmailId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.startWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {
        var postBody = null;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}/actions/start", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.startWorkflowEmail = function(workflowId, workflowEmailId) {
        return this.startWorkflowEmailWithHttpInfo(workflowId, workflowEmailId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, body) {
        var postBody = body;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (workflowEmailId === void 0 || workflowEmailId === null) {
          throw new Error("Missing the required parameter 'workflowEmailId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId,
          "workflow_email_id": workflowEmailId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/emails/{workflow_email_id}/queue", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addWorkflowEmailSubscriber = function(workflowId, workflowEmailId, body) {
        return this.addWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.removeWorkflowEmailSubscriberWithHttpInfo = function(workflowId, body) {
        var postBody = body;
        if (workflowId === void 0 || workflowId === null) {
          throw new Error("Missing the required parameter 'workflowId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "workflow_id": workflowId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/automations/{workflow_id}/removed-subscribers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.removeWorkflowEmailSubscriber = function(workflowId, body) {
        return this.removeWorkflowEmailSubscriberWithHttpInfo(workflowId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js
var require_BatchWebhooksApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.removeWithHttpInfo = function(batchWebhookId) {
        var postBody = null;
        if (batchWebhookId === void 0 || batchWebhookId === null) {
          throw new Error("Missing the required parameter 'batchWebhookId' when calling ");
        }
        var pathParams = {
          "batch_webhook_id": batchWebhookId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batch-webhooks/{batch_webhook_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.remove = function(batchWebhookId) {
        return this.removeWithHttpInfo(batchWebhookId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(batchWebhookId, opts) {
        opts = opts || {};
        var postBody = null;
        if (batchWebhookId === void 0 || batchWebhookId === null) {
          throw new Error("Missing the required parameter 'batchWebhookId' when calling ");
        }
        var pathParams = {
          "batch_webhook_id": batchWebhookId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batch-webhooks/{batch_webhook_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(batchWebhookId, opts) {
        return this.getWithHttpInfo(batchWebhookId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batch-webhooks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateWithHttpInfo = function(batchWebhookId, body) {
        var postBody = body;
        if (batchWebhookId === void 0 || batchWebhookId === null) {
          throw new Error("Missing the required parameter 'batchWebhookId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "batch_webhook_id": batchWebhookId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batch-webhooks/{batch_webhook_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.update = function(batchWebhookId, body) {
        return this.updateWithHttpInfo(batchWebhookId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batch-webhooks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js
var require_BatchesApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deleteRequestWithHttpInfo = function(batchId) {
        var postBody = null;
        if (batchId === void 0 || batchId === null) {
          throw new Error("Missing the required parameter 'batchId' when calling ");
        }
        var pathParams = {
          "batch_id": batchId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batches/{batch_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteRequest = function(batchId) {
        return this.deleteRequestWithHttpInfo(batchId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batches", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.statusWithHttpInfo = function(batchId, opts) {
        opts = opts || {};
        var postBody = null;
        if (batchId === void 0 || batchId === null) {
          throw new Error("Missing the required parameter 'batchId' when calling ");
        }
        var pathParams = {
          "batch_id": batchId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batches/{batch_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.status = function(batchId, opts) {
        return this.statusWithHttpInfo(batchId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.startWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/batches", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.start = function(body) {
        return this.startWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js
var require_CampaignFoldersApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.removeWithHttpInfo = function(folderId) {
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaign-folders/{folder_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.remove = function(folderId) {
        return this.removeWithHttpInfo(folderId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaign-folders", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(folderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaign-folders/{folder_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(folderId, opts) {
        return this.getWithHttpInfo(folderId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateWithHttpInfo = function(folderId, body) {
        var postBody = body;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaign-folders/{folder_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.update = function(folderId, body) {
        return this.updateWithHttpInfo(folderId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaign-folders", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js
var require_CampaignsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.removeWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.remove = function(campaignId) {
        return this.removeWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteFeedbackMessageWithHttpInfo = function(campaignId, feedbackId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (feedbackId === void 0 || feedbackId === null) {
          throw new Error("Missing the required parameter 'feedbackId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "feedback_id": feedbackId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/feedback/{feedback_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteFeedbackMessage = function(campaignId, feedbackId) {
        return this.deleteFeedbackMessageWithHttpInfo(campaignId, feedbackId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"],
          "status": opts["status"],
          "before_send_time": opts["beforeSendTime"],
          "since_send_time": opts["sinceSendTime"],
          "before_create_time": opts["beforeCreateTime"],
          "since_create_time": opts["sinceCreateTime"],
          "list_id": opts["listId"],
          "folder_id": opts["folderId"],
          "member_id": opts["memberId"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(campaignId, opts) {
        return this.getWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getContentWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/content", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getContent = function(campaignId, opts) {
        return this.getContentWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFeedbackWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/feedback", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFeedback = function(campaignId, opts) {
        return this.getFeedbackWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (feedbackId === void 0 || feedbackId === null) {
          throw new Error("Missing the required parameter 'feedbackId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "feedback_id": feedbackId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/feedback/{feedback_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFeedbackMessage = function(campaignId, feedbackId, opts) {
        return this.getFeedbackMessageWithHttpInfo(campaignId, feedbackId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSendChecklistWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/send-checklist", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSendChecklist = function(campaignId, opts) {
        return this.getSendChecklistWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateWithHttpInfo = function(campaignId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.update = function(campaignId, body) {
        return this.updateWithHttpInfo(campaignId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (feedbackId === void 0 || feedbackId === null) {
          throw new Error("Missing the required parameter 'feedbackId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "feedback_id": feedbackId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/feedback/{feedback_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateFeedbackMessage = function(campaignId, feedbackId, body) {
        return this.updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.cancelSendWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/cancel-send", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.cancelSend = function(campaignId) {
        return this.cancelSendWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createResendWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/create-resend", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createResend = function(campaignId) {
        return this.createResendWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.pauseWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/pause", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.pause = function(campaignId) {
        return this.pauseWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.replicateWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/replicate", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.replicate = function(campaignId) {
        return this.replicateWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.resumeWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/resume", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.resume = function(campaignId) {
        return this.resumeWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.scheduleWithHttpInfo = function(campaignId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/schedule", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.schedule = function(campaignId, body) {
        return this.scheduleWithHttpInfo(campaignId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.sendWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/send", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.send = function(campaignId) {
        return this.sendWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.sendTestEmailWithHttpInfo = function(campaignId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/test", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.sendTestEmail = function(campaignId, body) {
        return this.sendTestEmailWithHttpInfo(campaignId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.unscheduleWithHttpInfo = function(campaignId) {
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/actions/unschedule", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.unschedule = function(campaignId) {
        return this.unscheduleWithHttpInfo(campaignId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addFeedbackWithHttpInfo = function(campaignId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/feedback", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addFeedback = function(campaignId, body) {
        return this.addFeedbackWithHttpInfo(campaignId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.setContentWithHttpInfo = function(campaignId, body) {
        var postBody = body;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/campaigns/{campaign_id}/content", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.setContent = function(campaignId, body) {
        return this.setContentWithHttpInfo(campaignId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js
var require_ConnectedSitesApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.removeWithHttpInfo = function(connectedSiteId) {
        var postBody = null;
        if (connectedSiteId === void 0 || connectedSiteId === null) {
          throw new Error("Missing the required parameter 'connectedSiteId' when calling ");
        }
        var pathParams = {
          "connected_site_id": connectedSiteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/connected-sites/{connected_site_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.remove = function(connectedSiteId) {
        return this.removeWithHttpInfo(connectedSiteId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/connected-sites", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(connectedSiteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (connectedSiteId === void 0 || connectedSiteId === null) {
          throw new Error("Missing the required parameter 'connectedSiteId' when calling ");
        }
        var pathParams = {
          "connected_site_id": connectedSiteId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/connected-sites/{connected_site_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(connectedSiteId, opts) {
        return this.getWithHttpInfo(connectedSiteId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/connected-sites", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.verifyScriptInstallationWithHttpInfo = function(connectedSiteId) {
        var postBody = null;
        if (connectedSiteId === void 0 || connectedSiteId === null) {
          throw new Error("Missing the required parameter 'connectedSiteId' when calling ");
        }
        var pathParams = {
          "connected_site_id": connectedSiteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/connected-sites/{connected_site_id}/actions/verify-script-installation", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.verifyScriptInstallation = function(connectedSiteId) {
        return this.verifyScriptInstallationWithHttpInfo(connectedSiteId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js
var require_ConversationsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "has_unread_messages": opts["hasUnreadMessages"],
          "list_id": opts["listId"],
          "campaign_id": opts["campaignId"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/conversations", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(conversationId, opts) {
        opts = opts || {};
        var postBody = null;
        if (conversationId === void 0 || conversationId === null) {
          throw new Error("Missing the required parameter 'conversationId' when calling ");
        }
        var pathParams = {
          "conversation_id": conversationId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/conversations/{conversation_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(conversationId, opts) {
        return this.getWithHttpInfo(conversationId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getConversationMessagesWithHttpInfo = function(conversationId, opts) {
        opts = opts || {};
        var postBody = null;
        if (conversationId === void 0 || conversationId === null) {
          throw new Error("Missing the required parameter 'conversationId' when calling ");
        }
        var pathParams = {
          "conversation_id": conversationId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "is_read": opts["isRead"],
          "before_timestamp": opts["beforeTimestamp"],
          "since_timestamp": opts["sinceTimestamp"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/conversations/{conversation_id}/messages", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getConversationMessages = function(conversationId, opts) {
        return this.getConversationMessagesWithHttpInfo(conversationId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getConversationMessageWithHttpInfo = function(conversationId, messageId, opts) {
        opts = opts || {};
        var postBody = null;
        if (conversationId === void 0 || conversationId === null) {
          throw new Error("Missing the required parameter 'conversationId' when calling ");
        }
        if (messageId === void 0 || messageId === null) {
          throw new Error("Missing the required parameter 'messageId' when calling ");
        }
        var pathParams = {
          "conversation_id": conversationId,
          "message_id": messageId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/conversations/{conversation_id}/messages/{message_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getConversationMessage = function(conversationId, messageId, opts) {
        return this.getConversationMessageWithHttpInfo(conversationId, messageId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js
var require_CustomerJourneysApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.triggerWithHttpInfo = function(journeyId, stepId, body) {
        var postBody = body;
        if (journeyId === void 0 || journeyId === null) {
          throw new Error("Missing the required parameter 'journeyId' when calling ");
        }
        if (stepId === void 0 || stepId === null) {
          throw new Error("Missing the required parameter 'stepId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "journey_id": journeyId,
          "step_id": stepId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.trigger = function(journeyId, stepId, body) {
        return this.triggerWithHttpInfo(journeyId, stepId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js
var require_EcommerceApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deleteStoreWithHttpInfo = function(storeId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteStore = function(storeId) {
        return this.deleteStoreWithHttpInfo(storeId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteStoreCartWithHttpInfo = function(storeId, cartId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteStoreCart = function(storeId, cartId) {
        return this.deleteStoreCartWithHttpInfo(storeId, cartId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteCartLineItemWithHttpInfo = function(storeId, cartId, lineId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId,
          "line_id": lineId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteCartLineItem = function(storeId, cartId, lineId) {
        return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteStoreCustomerWithHttpInfo = function(storeId, customerId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (customerId === void 0 || customerId === null) {
          throw new Error("Missing the required parameter 'customerId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "customer_id": customerId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers/{customer_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteStoreCustomer = function(storeId, customerId) {
        return this.deleteStoreCustomerWithHttpInfo(storeId, customerId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteOrderWithHttpInfo = function(storeId, orderId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteOrder = function(storeId, orderId) {
        return this.deleteOrderWithHttpInfo(storeId, orderId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteOrderLineItemWithHttpInfo = function(storeId, orderId, lineId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId,
          "line_id": lineId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteOrderLineItem = function(storeId, orderId, lineId) {
        return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteStoreProductWithHttpInfo = function(storeId, productId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteStoreProduct = function(storeId, productId) {
        return this.deleteStoreProductWithHttpInfo(storeId, productId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteProductImageWithHttpInfo = function(storeId, productId, imageId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (imageId === void 0 || imageId === null) {
          throw new Error("Missing the required parameter 'imageId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "image_id": imageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteProductImage = function(storeId, productId, imageId) {
        return this.deleteProductImageWithHttpInfo(storeId, productId, imageId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteProductVariantWithHttpInfo = function(storeId, productId, variantId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (variantId === void 0 || variantId === null) {
          throw new Error("Missing the required parameter 'variantId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "variant_id": variantId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteProductVariant = function(storeId, productId, variantId) {
        return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deletePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (promoCodeId === void 0 || promoCodeId === null) {
          throw new Error("Missing the required parameter 'promoCodeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId,
          "promo_code_id": promoCodeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deletePromoCode = function(storeId, promoRuleId, promoCodeId) {
        return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deletePromoRuleWithHttpInfo = function(storeId, promoRuleId) {
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deletePromoRule = function(storeId, promoRuleId) {
        return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.ordersWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "campaign_id": opts["campaignId"],
          "outreach_id": opts["outreachId"],
          "customer_id": opts["customerId"],
          "has_outreach": opts["hasOutreach"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/orders", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.orders = function(opts) {
        return this.ordersWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.storesWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.stores = function(opts) {
        return this.storesWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStore = function(storeId, opts) {
        return this.getStoreWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreCartsWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStoreCarts = function(storeId, opts) {
        return this.getStoreCartsWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreCartWithHttpInfo = function(storeId, cartId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStoreCart = function(storeId, cartId, opts) {
        return this.getStoreCartWithHttpInfo(storeId, cartId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllCartLineItemsWithHttpInfo = function(storeId, cartId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}/lines", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllCartLineItems = function(storeId, cartId, opts) {
        return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCartLineItemWithHttpInfo = function(storeId, cartId, lineId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId,
          "line_id": lineId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCartLineItem = function(storeId, cartId, lineId, opts) {
        return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllStoreCustomersWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "email_address": opts["emailAddress"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllStoreCustomers = function(storeId, opts) {
        return this.getAllStoreCustomersWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreCustomerWithHttpInfo = function(storeId, customerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (customerId === void 0 || customerId === null) {
          throw new Error("Missing the required parameter 'customerId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "customer_id": customerId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers/{customer_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStoreCustomer = function(storeId, customerId, opts) {
        return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreOrdersWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "customer_id": opts["customerId"],
          "has_outreach": opts["hasOutreach"],
          "campaign_id": opts["campaignId"],
          "outreach_id": opts["outreachId"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStoreOrders = function(storeId, opts) {
        return this.getStoreOrdersWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getOrderWithHttpInfo = function(storeId, orderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getOrder = function(storeId, orderId, opts) {
        return this.getOrderWithHttpInfo(storeId, orderId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllOrderLineItemsWithHttpInfo = function(storeId, orderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}/lines", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllOrderLineItems = function(storeId, orderId, opts) {
        return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId,
          "line_id": lineId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getOrderLineItem = function(storeId, orderId, lineId, opts) {
        return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllStoreProductsWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllStoreProducts = function(storeId, opts) {
        return this.getAllStoreProductsWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getStoreProductWithHttpInfo = function(storeId, productId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getStoreProduct = function(storeId, productId, opts) {
        return this.getStoreProductWithHttpInfo(storeId, productId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getProductImagesWithHttpInfo = function(storeId, productId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/images", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getProductImages = function(storeId, productId, opts) {
        return this.getProductImagesWithHttpInfo(storeId, productId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getProductImageWithHttpInfo = function(storeId, productId, imageId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (imageId === void 0 || imageId === null) {
          throw new Error("Missing the required parameter 'imageId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "image_id": imageId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getProductImage = function(storeId, productId, imageId, opts) {
        return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getProductVariantsWithHttpInfo = function(storeId, productId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getProductVariants = function(storeId, productId, opts) {
        return this.getProductVariantsWithHttpInfo(storeId, productId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getProductVariantWithHttpInfo = function(storeId, productId, variantId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (variantId === void 0 || variantId === null) {
          throw new Error("Missing the required parameter 'variantId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "variant_id": variantId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getProductVariant = function(storeId, productId, variantId, opts) {
        return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getPromoCodesWithHttpInfo = function(promoRuleId, storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "promo_rule_id": promoRuleId,
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getPromoCodes = function(promoRuleId, storeId, opts) {
        return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getPromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (promoCodeId === void 0 || promoCodeId === null) {
          throw new Error("Missing the required parameter 'promoCodeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId,
          "promo_code_id": promoCodeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getPromoCode = function(storeId, promoRuleId, promoCodeId, opts) {
        return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listPromoRulesWithHttpInfo = function(storeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listPromoRules = function(storeId, opts) {
        return this.listPromoRulesWithHttpInfo(storeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getPromoRuleWithHttpInfo = function(storeId, promoRuleId, opts) {
        opts = opts || {};
        var postBody = null;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getPromoRule = function(storeId, promoRuleId, opts) {
        return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateStoreWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateStore = function(storeId, body) {
        return this.updateStoreWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateStoreCartWithHttpInfo = function(storeId, cartId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateStoreCart = function(storeId, cartId, body) {
        return this.updateStoreCartWithHttpInfo(storeId, cartId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateCartLineItemWithHttpInfo = function(storeId, cartId, lineId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId,
          "line_id": lineId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateCartLineItem = function(storeId, cartId, lineId, body) {
        return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateStoreCustomerWithHttpInfo = function(storeId, customerId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (customerId === void 0 || customerId === null) {
          throw new Error("Missing the required parameter 'customerId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "customer_id": customerId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers/{customer_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateStoreCustomer = function(storeId, customerId, body) {
        return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateOrderWithHttpInfo = function(storeId, orderId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateOrder = function(storeId, orderId, body) {
        return this.updateOrderWithHttpInfo(storeId, orderId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        if (lineId === void 0 || lineId === null) {
          throw new Error("Missing the required parameter 'lineId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId,
          "line_id": lineId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateOrderLineItem = function(storeId, orderId, lineId, body) {
        return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateStoreProductWithHttpInfo = function(storeId, productId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateStoreProduct = function(storeId, productId, body) {
        return this.updateStoreProductWithHttpInfo(storeId, productId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateProductImageWithHttpInfo = function(storeId, productId, imageId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (imageId === void 0 || imageId === null) {
          throw new Error("Missing the required parameter 'imageId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "image_id": imageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateProductImage = function(storeId, productId, imageId, body) {
        return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (variantId === void 0 || variantId === null) {
          throw new Error("Missing the required parameter 'variantId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "variant_id": variantId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateProductVariant = function(storeId, productId, variantId, body) {
        return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updatePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (promoCodeId === void 0 || promoCodeId === null) {
          throw new Error("Missing the required parameter 'promoCodeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId,
          "promo_code_id": promoCodeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updatePromoCode = function(storeId, promoRuleId, promoCodeId, body) {
        return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updatePromoRuleWithHttpInfo = function(storeId, promoRuleId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updatePromoRule = function(storeId, promoRuleId, body) {
        return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addStoreWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addStore = function(body) {
        return this.addStoreWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addStoreCartWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addStoreCart = function(storeId, body) {
        return this.addStoreCartWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addCartLineItemWithHttpInfo = function(storeId, cartId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (cartId === void 0 || cartId === null) {
          throw new Error("Missing the required parameter 'cartId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "cart_id": cartId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/carts/{cart_id}/lines", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addCartLineItem = function(storeId, cartId, body) {
        return this.addCartLineItemWithHttpInfo(storeId, cartId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addStoreCustomerWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addStoreCustomer = function(storeId, body) {
        return this.addStoreCustomerWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addStoreOrderWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addStoreOrder = function(storeId, body) {
        return this.addStoreOrderWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addOrderLineItemWithHttpInfo = function(storeId, orderId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (orderId === void 0 || orderId === null) {
          throw new Error("Missing the required parameter 'orderId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "order_id": orderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/orders/{order_id}/lines", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addOrderLineItem = function(storeId, orderId, body) {
        return this.addOrderLineItemWithHttpInfo(storeId, orderId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addStoreProductWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addStoreProduct = function(storeId, body) {
        return this.addStoreProductWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addProductImageWithHttpInfo = function(storeId, productId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/images", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addProductImage = function(storeId, productId, body) {
        return this.addProductImageWithHttpInfo(storeId, productId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addProductVariantsWithHttpInfo = function(storeId, productId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addProductVariants = function(storeId, productId, body) {
        return this.addProductVariantsWithHttpInfo(storeId, productId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addPromoCodeWithHttpInfo = function(storeId, promoRuleId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (promoRuleId === void 0 || promoRuleId === null) {
          throw new Error("Missing the required parameter 'promoRuleId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "promo_rule_id": promoRuleId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addPromoCode = function(storeId, promoRuleId, body) {
        return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addPromoRulesWithHttpInfo = function(storeId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/promo-rules", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addPromoRules = function(storeId, body) {
        return this.addPromoRulesWithHttpInfo(storeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.setStoreCustomerWithHttpInfo = function(storeId, customerId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (customerId === void 0 || customerId === null) {
          throw new Error("Missing the required parameter 'customerId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "customer_id": customerId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/customers/{customer_id}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.setStoreCustomer = function(storeId, customerId, body) {
        return this.setStoreCustomerWithHttpInfo(storeId, customerId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {
        var postBody = body;
        if (storeId === void 0 || storeId === null) {
          throw new Error("Missing the required parameter 'storeId' when calling ");
        }
        if (productId === void 0 || productId === null) {
          throw new Error("Missing the required parameter 'productId' when calling ");
        }
        if (variantId === void 0 || variantId === null) {
          throw new Error("Missing the required parameter 'variantId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "store_id": storeId,
          "product_id": productId,
          "variant_id": variantId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addProductVariant = function(storeId, productId, variantId, body) {
        return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js
var require_FacebookAdsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/facebook-ads", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAdWithHttpInfo = function(outreachId, opts) {
        opts = opts || {};
        var postBody = null;
        if (outreachId === void 0 || outreachId === null) {
          throw new Error("Missing the required parameter 'outreachId' when calling ");
        }
        var pathParams = {
          "outreach_id": outreachId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/facebook-ads/{outreach_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAd = function(outreachId, opts) {
        return this.getAdWithHttpInfo(outreachId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js
var require_FileManagerApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deleteFileWithHttpInfo = function(fileId) {
        var postBody = null;
        if (fileId === void 0 || fileId === null) {
          throw new Error("Missing the required parameter 'fileId' when calling ");
        }
        var pathParams = {
          "file_id": fileId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/files/{file_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteFile = function(fileId) {
        return this.deleteFileWithHttpInfo(fileId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteFolderWithHttpInfo = function(folderId) {
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/folders/{folder_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteFolder = function(folderId) {
        return this.deleteFolderWithHttpInfo(folderId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.filesWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"],
          "created_by": opts["createdBy"],
          "before_created_at": opts["beforeCreatedAt"],
          "since_created_at": opts["sinceCreatedAt"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/files", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.files = function(opts) {
        return this.filesWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFileWithHttpInfo = function(fileId, opts) {
        opts = opts || {};
        var postBody = null;
        if (fileId === void 0 || fileId === null) {
          throw new Error("Missing the required parameter 'fileId' when calling ");
        }
        var pathParams = {
          "file_id": fileId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/files/{file_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFile = function(fileId, opts) {
        return this.getFileWithHttpInfo(fileId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listFoldersWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "created_by": opts["createdBy"],
          "before_created_at": opts["beforeCreatedAt"],
          "since_created_at": opts["sinceCreatedAt"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/folders", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listFolders = function(opts) {
        return this.listFoldersWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFolderWithHttpInfo = function(folderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/folders/{folder_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFolder = function(folderId, opts) {
        return this.getFolderWithHttpInfo(folderId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateFileWithHttpInfo = function(fileId, body) {
        var postBody = body;
        if (fileId === void 0 || fileId === null) {
          throw new Error("Missing the required parameter 'fileId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "file_id": fileId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/files/{file_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateFile = function(fileId, body) {
        return this.updateFileWithHttpInfo(fileId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateFolderWithHttpInfo = function(folderId, body) {
        var postBody = body;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/folders/{folder_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateFolder = function(folderId, body) {
        return this.updateFolderWithHttpInfo(folderId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.uploadWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/files", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.upload = function(body) {
        return this.uploadWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createFolderWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/file-manager/folders", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createFolder = function(body) {
        return this.createFolderWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js
var require_LandingPagesApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deletePageWithHttpInfo = function(pageId) {
        var postBody = null;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deletePage = function(pageId) {
        return this.deletePageWithHttpInfo(pageId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "sort_dir": opts["sortDir"],
          "sort_field": opts["sortField"],
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAll = function(opts) {
        return this.getAllWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getPageWithHttpInfo = function(pageId, opts) {
        opts = opts || {};
        var postBody = null;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getPage = function(pageId, opts) {
        return this.getPageWithHttpInfo(pageId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getPageContentWithHttpInfo = function(pageId, opts) {
        opts = opts || {};
        var postBody = null;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}/content", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getPageContent = function(pageId, opts) {
        return this.getPageContentWithHttpInfo(pageId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updatePageWithHttpInfo = function(pageId, body) {
        var postBody = body;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updatePage = function(pageId, body) {
        return this.updatePageWithHttpInfo(pageId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body, opts) {
        opts = opts || {};
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {
          "use_default_list": opts["useDefaultList"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body, opts) {
        return this.createWithHttpInfo(body, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.publishPageWithHttpInfo = function(pageId) {
        var postBody = null;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}/actions/publish", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.publishPage = function(pageId) {
        return this.publishPageWithHttpInfo(pageId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.unpublishPageWithHttpInfo = function(pageId) {
        var postBody = null;
        if (pageId === void 0 || pageId === null) {
          throw new Error("Missing the required parameter 'pageId' when calling ");
        }
        var pathParams = {
          "page_id": pageId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/landing-pages/{page_id}/actions/unpublish", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.unpublishPage = function(pageId) {
        return this.unpublishPageWithHttpInfo(pageId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js
var require_ListsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deleteListWithHttpInfo = function(listId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteList = function(listId) {
        return this.deleteListWithHttpInfo(listId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteInterestCategoryWithHttpInfo = function(listId, interestCategoryId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteInterestCategory = function(listId, interestCategoryId) {
        return this.deleteInterestCategoryWithHttpInfo(listId, interestCategoryId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        if (interestId === void 0 || interestId === null) {
          throw new Error("Missing the required parameter 'interestId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId,
          "interest_id": interestId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteInterestCategoryInterest = function(listId, interestCategoryId, interestId) {
        return this.deleteInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteListMemberWithHttpInfo = function(listId, subscriberHash) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteListMember = function(listId, subscriberHash) {
        return this.deleteListMemberWithHttpInfo(listId, subscriberHash).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (noteId === void 0 || noteId === null) {
          throw new Error("Missing the required parameter 'noteId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash,
          "note_id": noteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteListMemberNote = function(listId, subscriberHash, noteId) {
        return this.deleteListMemberNoteWithHttpInfo(listId, subscriberHash, noteId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteListMergeFieldWithHttpInfo = function(listId, mergeId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (mergeId === void 0 || mergeId === null) {
          throw new Error("Missing the required parameter 'mergeId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "merge_id": mergeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/merge-fields/{merge_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteListMergeField = function(listId, mergeId) {
        return this.deleteListMergeFieldWithHttpInfo(listId, mergeId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteSegmentWithHttpInfo = function(listId, segmentId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteSegment = function(listId, segmentId) {
        return this.deleteSegmentWithHttpInfo(listId, segmentId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.removeSegmentMemberWithHttpInfo = function(listId, segmentId, subscriberHash) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.removeSegmentMember = function(listId, segmentId, subscriberHash) {
        return this.removeSegmentMemberWithHttpInfo(listId, segmentId, subscriberHash).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteListWebhookWithHttpInfo = function(listId, webhookId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (webhookId === void 0 || webhookId === null) {
          throw new Error("Missing the required parameter 'webhookId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "webhook_id": webhookId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/webhooks/{webhook_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteListWebhook = function(listId, webhookId) {
        return this.deleteListWebhookWithHttpInfo(listId, webhookId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberTagsWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberTags = function(listId, subscriberHash, opts) {
        return this.getListMemberTagsWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getAllListsWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "before_date_created": opts["beforeDateCreated"],
          "since_date_created": opts["sinceDateCreated"],
          "before_campaign_last_sent": opts["beforeCampaignLastSent"],
          "since_campaign_last_sent": opts["sinceCampaignLastSent"],
          "email": opts["email"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"],
          "has_ecommerce_store": opts["hasEcommerceStore"],
          "include_total_contacts": opts["includeTotalContacts"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllLists = function(opts) {
        return this.getAllListsWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "include_total_contacts": opts["includeTotalContacts"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getList = function(listId, opts) {
        return this.getListWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListAbuseReportsWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/abuse-reports", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListAbuseReports = function(listId, opts) {
        return this.getListAbuseReportsWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListAbuseReportDetailsWithHttpInfo = function(listId, reportId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (reportId === void 0 || reportId === null) {
          throw new Error("Missing the required parameter 'reportId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "report_id": reportId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/abuse-reports/{report_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListAbuseReportDetails = function(listId, reportId, opts) {
        return this.getListAbuseReportDetailsWithHttpInfo(listId, reportId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListRecentActivityWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "count": opts["count"],
          "offset": opts["offset"],
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/activity", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListRecentActivity = function(listId, opts) {
        return this.getListRecentActivityWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListClientsWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/clients", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListClients = function(listId, opts) {
        return this.getListClientsWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListGrowthHistoryWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/growth-history", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListGrowthHistory = function(listId, opts) {
        return this.getListGrowthHistoryWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListGrowthHistoryByMonthWithHttpInfo = function(listId, month, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (month === void 0 || month === null) {
          throw new Error("Missing the required parameter 'month' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "month": month
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/growth-history/{month}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListGrowthHistoryByMonth = function(listId, month, opts) {
        return this.getListGrowthHistoryByMonthWithHttpInfo(listId, month, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListInterestCategoriesWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListInterestCategories = function(listId, opts) {
        return this.getListInterestCategoriesWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getInterestCategoryWithHttpInfo = function(listId, interestCategoryId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getInterestCategory = function(listId, interestCategoryId, opts) {
        return this.getInterestCategoryWithHttpInfo(listId, interestCategoryId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listInterestCategoryInterestsWithHttpInfo = function(listId, interestCategoryId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}/interests", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listInterestCategoryInterests = function(listId, interestCategoryId, opts) {
        return this.listInterestCategoryInterestsWithHttpInfo(listId, interestCategoryId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        if (interestId === void 0 || interestId === null) {
          throw new Error("Missing the required parameter 'interestId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId,
          "interest_id": interestId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getInterestCategoryInterest = function(listId, interestCategoryId, interestId, opts) {
        return this.getInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListLocationsWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/locations", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListLocations = function(listId, opts) {
        return this.getListLocationsWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMembersInfoWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "email_type": opts["emailType"],
          "status": opts["status"],
          "since_timestamp_opt": opts["sinceTimestampOpt"],
          "before_timestamp_opt": opts["beforeTimestampOpt"],
          "since_last_changed": opts["sinceLastChanged"],
          "before_last_changed": opts["beforeLastChanged"],
          "unique_email_id": opts["uniqueEmailId"],
          "vip_only": opts["vipOnly"],
          "interest_category_id": opts["interestCategoryId"],
          "interest_ids": opts["interestIds"],
          "interest_match": opts["interestMatch"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"],
          "since_last_campaign": opts["sinceLastCampaign"],
          "unsubscribed_since": opts["unsubscribedSince"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMembersInfo = function(listId, opts) {
        return this.getListMembersInfoWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMember = function(listId, subscriberHash, opts) {
        return this.getListMemberWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberActivityWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "action": this.apiClient.buildCollectionParam(opts["action"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/activity", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberActivity = function(listId, subscriberHash, opts) {
        return this.getListMemberActivityWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberActivityFeedWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "activity_filters": this.apiClient.buildCollectionParam(opts["activityFilters"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/activity-feed", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberActivityFeed = function(listId, subscriberHash, opts) {
        return this.getListMemberActivityFeedWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberEventsWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "count": opts["count"],
          "offset": opts["offset"],
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/events", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberEvents = function(listId, subscriberHash, opts) {
        return this.getListMemberEventsWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberGoalsWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/goals", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberGoals = function(listId, subscriberHash, opts) {
        return this.getListMemberGoalsWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberNotesWithHttpInfo = function(listId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"],
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/notes", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberNotes = function(listId, subscriberHash, opts) {
        return this.getListMemberNotesWithHttpInfo(listId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (noteId === void 0 || noteId === null) {
          throw new Error("Missing the required parameter 'noteId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash,
          "note_id": noteId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMemberNote = function(listId, subscriberHash, noteId, opts) {
        return this.getListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMergeFieldsWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"],
          "required": opts["required"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/merge-fields", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMergeFields = function(listId, opts) {
        return this.getListMergeFieldsWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListMergeFieldWithHttpInfo = function(listId, mergeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (mergeId === void 0 || mergeId === null) {
          throw new Error("Missing the required parameter 'mergeId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "merge_id": mergeId
        };
        var queryParams = {
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/merge-fields/{merge_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListMergeField = function(listId, mergeId, opts) {
        return this.getListMergeFieldWithHttpInfo(listId, mergeId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSegmentWithHttpInfo = function(listId, segmentId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "include_cleaned": opts["includeCleaned"],
          "include_transactional": opts["includeTransactional"],
          "include_unsubscribed": opts["includeUnsubscribed"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSegment = function(listId, segmentId, opts) {
        return this.getSegmentWithHttpInfo(listId, segmentId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSegmentMembersListWithHttpInfo = function(listId, segmentId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "include_cleaned": opts["includeCleaned"],
          "include_transactional": opts["includeTransactional"],
          "include_unsubscribed": opts["includeUnsubscribed"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}/members", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSegmentMembersList = function(listId, segmentId, opts) {
        return this.getSegmentMembersListWithHttpInfo(listId, segmentId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListSignupFormsWithHttpInfo = function(listId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/signup-forms", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListSignupForms = function(listId) {
        return this.getListSignupFormsWithHttpInfo(listId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListWebhooksWithHttpInfo = function(listId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/webhooks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListWebhooks = function(listId) {
        return this.getListWebhooksWithHttpInfo(listId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getListWebhookWithHttpInfo = function(listId, webhookId) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (webhookId === void 0 || webhookId === null) {
          throw new Error("Missing the required parameter 'webhookId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "webhook_id": webhookId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/webhooks/{webhook_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getListWebhook = function(listId, webhookId) {
        return this.getListWebhookWithHttpInfo(listId, webhookId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateList = function(listId, body) {
        return this.updateListWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateInterestCategoryWithHttpInfo = function(listId, interestCategoryId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateInterestCategory = function(listId, interestCategoryId, body) {
        return this.updateInterestCategoryWithHttpInfo(listId, interestCategoryId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        if (interestId === void 0 || interestId === null) {
          throw new Error("Missing the required parameter 'interestId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId,
          "interest_id": interestId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateInterestCategoryInterest = function(listId, interestCategoryId, interestId, body) {
        return this.updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {
        opts = opts || {};
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "skip_merge_validation": opts["skipMergeValidation"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListMember = function(listId, subscriberHash, body, opts) {
        return this.updateListMemberWithHttpInfo(listId, subscriberHash, body, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (noteId === void 0 || noteId === null) {
          throw new Error("Missing the required parameter 'noteId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash,
          "note_id": noteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListMemberNote = function(listId, subscriberHash, noteId, body) {
        return this.updateListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListMergeFieldWithHttpInfo = function(listId, mergeId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (mergeId === void 0 || mergeId === null) {
          throw new Error("Missing the required parameter 'mergeId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "merge_id": mergeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/merge-fields/{merge_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListMergeField = function(listId, mergeId, body) {
        return this.updateListMergeFieldWithHttpInfo(listId, mergeId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateSegmentWithHttpInfo = function(listId, segmentId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateSegment = function(listId, segmentId, body) {
        return this.updateSegmentWithHttpInfo(listId, segmentId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListWebhookWithHttpInfo = function(listId, webhookId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (webhookId === void 0 || webhookId === null) {
          throw new Error("Missing the required parameter 'webhookId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "webhook_id": webhookId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/webhooks/{webhook_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListWebhook = function(listId, webhookId, body) {
        return this.updateListWebhookWithHttpInfo(listId, webhookId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createListMemberEventWithHttpInfo = function(listId, subscriberHash, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/events", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createListMemberEvent = function(listId, subscriberHash, body) {
        return this.createListMemberEventWithHttpInfo(listId, subscriberHash, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListMemberTagsWithHttpInfo = function(listId, subscriberHash, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/tags", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListMemberTags = function(listId, subscriberHash, body) {
        return this.updateListMemberTagsWithHttpInfo(listId, subscriberHash, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createListWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createList = function(body) {
        return this.createListWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.batchListMembersWithHttpInfo = function(listId, body, opts) {
        opts = opts || {};
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "skip_merge_validation": opts["skipMergeValidation"],
          "skip_duplicate_check": opts["skipDuplicateCheck"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.batchListMembers = function(listId, body, opts) {
        return this.batchListMembersWithHttpInfo(listId, body, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createListInterestCategoryWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createListInterestCategory = function(listId, body) {
        return this.createListInterestCategoryWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (interestCategoryId === void 0 || interestCategoryId === null) {
          throw new Error("Missing the required parameter 'interestCategoryId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "interest_category_id": interestCategoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/interest-categories/{interest_category_id}/interests", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createInterestCategoryInterest = function(listId, interestCategoryId, body) {
        return this.createInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addListMemberWithHttpInfo = function(listId, body, opts) {
        opts = opts || {};
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "skip_merge_validation": opts["skipMergeValidation"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addListMember = function(listId, body, opts) {
        return this.addListMemberWithHttpInfo(listId, body, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteListMemberPermanentWithHttpInfo = function(listId, subscriberHash) {
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteListMemberPermanent = function(listId, subscriberHash) {
        return this.deleteListMemberPermanentWithHttpInfo(listId, subscriberHash).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createListMemberNoteWithHttpInfo = function(listId, subscriberHash, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}/notes", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createListMemberNote = function(listId, subscriberHash, body) {
        return this.createListMemberNoteWithHttpInfo(listId, subscriberHash, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.addListMergeFieldWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/merge-fields", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.addListMergeField = function(listId, body) {
        return this.addListMergeFieldWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createSegmentWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createSegment = function(listId, body) {
        return this.createSegmentWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.batchSegmentMembersWithHttpInfo = function(body, listId, segmentId) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.batchSegmentMembers = function(body, listId, segmentId) {
        return this.batchSegmentMembersWithHttpInfo(body, listId, segmentId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createSegmentMemberWithHttpInfo = function(listId, segmentId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (segmentId === void 0 || segmentId === null) {
          throw new Error("Missing the required parameter 'segmentId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "segment_id": segmentId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments/{segment_id}/members", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createSegmentMember = function(listId, segmentId, body) {
        return this.createSegmentMemberWithHttpInfo(listId, segmentId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateListSignupFormWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/signup-forms", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateListSignupForm = function(listId, body) {
        return this.updateListSignupFormWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createListWebhookWithHttpInfo = function(listId, body) {
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/webhooks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createListWebhook = function(listId, body) {
        return this.createListWebhookWithHttpInfo(listId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listSegmentsWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"],
          "since_created_at": opts["sinceCreatedAt"],
          "before_created_at": opts["beforeCreatedAt"],
          "include_cleaned": opts["includeCleaned"],
          "include_transactional": opts["includeTransactional"],
          "include_unsubscribed": opts["includeUnsubscribed"],
          "since_updated_at": opts["sinceUpdatedAt"],
          "before_updated_at": opts["beforeUpdatedAt"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/segments", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.listSegments = function(listId, opts) {
        return this.listSegmentsWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.setListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {
        opts = opts || {};
        var postBody = body;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "list_id": listId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "skip_merge_validation": opts["skipMergeValidation"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/members/{subscriber_hash}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.setListMember = function(listId, subscriberHash, body, opts) {
        return this.setListMemberWithHttpInfo(listId, subscriberHash, body, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.tagSearchWithHttpInfo = function(listId, opts) {
        opts = opts || {};
        var postBody = null;
        if (listId === void 0 || listId === null) {
          throw new Error("Missing the required parameter 'listId' when calling ");
        }
        var pathParams = {
          "list_id": listId
        };
        var queryParams = {
          "name": opts["name"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/lists/{list_id}/tag-search", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.tagSearch = function(listId, opts) {
        return this.tagSearchWithHttpInfo(listId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js
var require_PingApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getWithHttpInfo = function() {
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/ping", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function() {
        return this.getWithHttpInfo().then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js
var require_ReportingApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getFacebookAdsReportAllWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reporting/facebook-ads", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFacebookAdsReportAll = function(opts) {
        return this.getFacebookAdsReportAllWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFacebookAdReportWithHttpInfo = function(outreachId, opts) {
        opts = opts || {};
        var postBody = null;
        if (outreachId === void 0 || outreachId === null) {
          throw new Error("Missing the required parameter 'outreachId' when calling ");
        }
        var pathParams = {
          "outreach_id": outreachId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reporting/facebook-ads/{outreach_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFacebookAdReport = function(outreachId, opts) {
        return this.getFacebookAdReportWithHttpInfo(outreachId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getFacebookAdProductActivityReportWithHttpInfo = function(outreachId, opts) {
        opts = opts || {};
        var postBody = null;
        if (outreachId === void 0 || outreachId === null) {
          throw new Error("Missing the required parameter 'outreachId' when calling ");
        }
        var pathParams = {
          "outreach_id": outreachId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "sort_field": opts["sortField"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getFacebookAdProductActivityReport = function(outreachId, opts) {
        return this.getFacebookAdProductActivityReportWithHttpInfo(outreachId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getLandingPageReportsAllWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reporting/landing-pages", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getLandingPageReportsAll = function(opts) {
        return this.getLandingPageReportsAllWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getLandingPageReportWithHttpInfo = function(outreachId, opts) {
        opts = opts || {};
        var postBody = null;
        if (outreachId === void 0 || outreachId === null) {
          throw new Error("Missing the required parameter 'outreachId' when calling ");
        }
        var pathParams = {
          "outreach_id": outreachId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reporting/landing-pages/{outreach_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getLandingPageReport = function(outreachId, opts) {
        return this.getLandingPageReportWithHttpInfo(outreachId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js
var require_ReportsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getAllCampaignReportsWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "type": opts["type"],
          "before_send_time": opts["beforeSendTime"],
          "since_send_time": opts["sinceSendTime"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getAllCampaignReports = function(opts) {
        return this.getAllCampaignReportsWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignReportWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignReport = function(campaignId, opts) {
        return this.getCampaignReportWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignAbuseReportsWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/abuse-reports", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignAbuseReports = function(campaignId, opts) {
        return this.getCampaignAbuseReportsWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignAbuseReportWithHttpInfo = function(campaignId, reportId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (reportId === void 0 || reportId === null) {
          throw new Error("Missing the required parameter 'reportId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "report_id": reportId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/abuse-reports/{report_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignAbuseReport = function(campaignId, reportId, opts) {
        return this.getCampaignAbuseReportWithHttpInfo(campaignId, reportId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignAdviceWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/advice", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignAdvice = function(campaignId, opts) {
        return this.getCampaignAdviceWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignClickDetailsWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/click-details", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignClickDetails = function(campaignId, opts) {
        return this.getCampaignClickDetailsWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignClickDetailsForLinkWithHttpInfo = function(campaignId, linkId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (linkId === void 0 || linkId === null) {
          throw new Error("Missing the required parameter 'linkId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "link_id": linkId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/click-details/{link_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignClickDetailsForLink = function(campaignId, linkId, opts) {
        return this.getCampaignClickDetailsForLinkWithHttpInfo(campaignId, linkId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSubscribersInfoWithHttpInfo = function(campaignId, linkId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (linkId === void 0 || linkId === null) {
          throw new Error("Missing the required parameter 'linkId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "link_id": linkId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/click-details/{link_id}/members", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSubscribersInfo = function(campaignId, linkId, opts) {
        return this.getSubscribersInfoWithHttpInfo(campaignId, linkId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSubscriberInfoWithHttpInfo = function(campaignId, linkId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (linkId === void 0 || linkId === null) {
          throw new Error("Missing the required parameter 'linkId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "link_id": linkId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSubscriberInfo = function(campaignId, linkId, subscriberHash, opts) {
        return this.getSubscriberInfoWithHttpInfo(campaignId, linkId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getDomainPerformanceForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/domain-performance", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getDomainPerformanceForCampaign = function(campaignId, opts) {
        return this.getDomainPerformanceForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getEcommerceProductActivityForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "sort_field": opts["sortField"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/ecommerce-product-activity", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getEcommerceProductActivityForCampaign = function(campaignId, opts) {
        return this.getEcommerceProductActivityForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getEepurlActivityForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/eepurl", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getEepurlActivityForCampaign = function(campaignId, opts) {
        return this.getEepurlActivityForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getEmailActivityForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "since": opts["since"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/email-activity", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getEmailActivityForCampaign = function(campaignId, opts) {
        return this.getEmailActivityForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getEmailActivityForSubscriberWithHttpInfo = function(campaignId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "since": opts["since"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/email-activity/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getEmailActivityForSubscriber = function(campaignId, subscriberHash, opts) {
        return this.getEmailActivityForSubscriberWithHttpInfo(campaignId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getLocationsForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/locations", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getLocationsForCampaign = function(campaignId, opts) {
        return this.getLocationsForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignOpenDetailsWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "since": opts["since"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/open-details", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignOpenDetails = function(campaignId, opts) {
        return this.getCampaignOpenDetailsWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSubscriberInfoForOpenedCampaignWithHttpInfo = function(campaignId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/open-details/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSubscriberInfoForOpenedCampaign = function(campaignId, subscriberHash, opts) {
        return this.getSubscriberInfoForOpenedCampaignWithHttpInfo(campaignId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignRecipientsWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/sent-to", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignRecipients = function(campaignId, opts) {
        return this.getCampaignRecipientsWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getCampaignRecipientWithHttpInfo = function(campaignId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/sent-to/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getCampaignRecipient = function(campaignId, subscriberHash, opts) {
        return this.getCampaignRecipientWithHttpInfo(campaignId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getSubReportsForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/sub-reports", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getSubReportsForCampaign = function(campaignId, opts) {
        return this.getSubReportsForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getUnsubscribedListForCampaignWithHttpInfo = function(campaignId, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/unsubscribed", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getUnsubscribedListForCampaign = function(campaignId, opts) {
        return this.getUnsubscribedListForCampaignWithHttpInfo(campaignId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getUnsubscribedListMemberWithHttpInfo = function(campaignId, subscriberHash, opts) {
        opts = opts || {};
        var postBody = null;
        if (campaignId === void 0 || campaignId === null) {
          throw new Error("Missing the required parameter 'campaignId' when calling ");
        }
        if (subscriberHash === void 0 || subscriberHash === null) {
          throw new Error("Missing the required parameter 'subscriberHash' when calling ");
        }
        var pathParams = {
          "campaign_id": campaignId,
          "subscriber_hash": subscriberHash
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/reports/{campaign_id}/unsubscribed/{subscriber_hash}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getUnsubscribedListMember = function(campaignId, subscriberHash, opts) {
        return this.getUnsubscribedListMemberWithHttpInfo(campaignId, subscriberHash, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js
var require_RootApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.getRootWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getRoot = function(opts) {
        return this.getRootWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js
var require_SearchCampaignsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.searchWithHttpInfo = function(query, opts) {
        opts = opts || {};
        var postBody = null;
        if (query === void 0 || query === null) {
          throw new Error("Missing the required parameter 'query' when calling ");
        }
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "query": query
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/search-campaigns", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.search = function(query, opts) {
        return this.searchWithHttpInfo(query, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js
var require_SearchMembersApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.searchWithHttpInfo = function(query, opts) {
        opts = opts || {};
        var postBody = null;
        if (query === void 0 || query === null) {
          throw new Error("Missing the required parameter 'query' when calling ");
        }
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "query": query,
          "list_id": opts["listId"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/search-members", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.search = function(query, opts) {
        return this.searchWithHttpInfo(query, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js
var require_TemplateFoldersApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.removeWithHttpInfo = function(folderId) {
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/template-folders/{folder_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.remove = function(folderId) {
        return this.removeWithHttpInfo(folderId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/template-folders", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getWithHttpInfo = function(folderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/template-folders/{folder_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.get = function(folderId, opts) {
        return this.getWithHttpInfo(folderId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateWithHttpInfo = function(folderId, body) {
        var postBody = body;
        if (folderId === void 0 || folderId === null) {
          throw new Error("Missing the required parameter 'folderId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "folder_id": folderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/template-folders/{folder_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.update = function(folderId, body) {
        return this.updateWithHttpInfo(folderId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/template-folders", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js
var require_TemplatesApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.deleteTemplateWithHttpInfo = function(templateId) {
        var postBody = null;
        if (templateId === void 0 || templateId === null) {
          throw new Error("Missing the required parameter 'templateId' when calling ");
        }
        var pathParams = {
          "template_id": templateId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates/{template_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteTemplate = function(templateId) {
        return this.deleteTemplateWithHttpInfo(templateId).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.listWithHttpInfo = function(opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv"),
          "count": opts["count"],
          "offset": opts["offset"],
          "created_by": opts["createdBy"],
          "since_date_created": opts["sinceDateCreated"],
          "before_date_created": opts["beforeDateCreated"],
          "type": opts["type"],
          "category": opts["category"],
          "folder_id": opts["folderId"],
          "sort_field": opts["sortField"],
          "sort_dir": opts["sortDir"]
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.list = function(opts) {
        return this.listWithHttpInfo(opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getTemplateWithHttpInfo = function(templateId, opts) {
        opts = opts || {};
        var postBody = null;
        if (templateId === void 0 || templateId === null) {
          throw new Error("Missing the required parameter 'templateId' when calling ");
        }
        var pathParams = {
          "template_id": templateId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates/{template_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getTemplate = function(templateId, opts) {
        return this.getTemplateWithHttpInfo(templateId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getDefaultContentForTemplateWithHttpInfo = function(templateId, opts) {
        opts = opts || {};
        var postBody = null;
        if (templateId === void 0 || templateId === null) {
          throw new Error("Missing the required parameter 'templateId' when calling ");
        }
        var pathParams = {
          "template_id": templateId
        };
        var queryParams = {
          "fields": this.apiClient.buildCollectionParam(opts["fields"], "csv"),
          "exclude_fields": this.apiClient.buildCollectionParam(opts["excludeFields"], "csv")
        };
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates/{template_id}/default-content", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getDefaultContentForTemplate = function(templateId, opts) {
        return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.updateTemplateWithHttpInfo = function(templateId, body) {
        var postBody = body;
        if (templateId === void 0 || templateId === null) {
          throw new Error("Missing the required parameter 'templateId' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "template_id": templateId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates/{template_id}", "PATCH", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.updateTemplate = function(templateId, body) {
        return this.updateTemplateWithHttpInfo(templateId, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.createWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/templates", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.create = function(body) {
        return this.createWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js
var require_VerifiedDomainsApi = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
      this.createVerifiedDomainWithHttpInfo = function(body) {
        var postBody = body;
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/verified-domains", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.createVerifiedDomain = function(body) {
        return this.createVerifiedDomainWithHttpInfo(body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.deleteDomainWithHttpInfo = function(domainName) {
        var postBody = null;
        if (domainName === void 0 || domainName === null) {
          throw new Error("Missing the required parameter 'domainName' when calling ");
        }
        var pathParams = {
          "domain_name": domainName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/verified-domains/{domain_name}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.deleteDomain = function(domainName) {
        return this.deleteDomainWithHttpInfo(domainName).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getDomainWithHttpInfo = function(domainName) {
        var postBody = null;
        if (domainName === void 0 || domainName === null) {
          throw new Error("Missing the required parameter 'domainName' when calling ");
        }
        var pathParams = {
          "domain_name": domainName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/verified-domains/{domain_name}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getDomain = function(domainName) {
        return this.getDomainWithHttpInfo(domainName).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.getVerifiedDomainsAllWithHttpInfo = function() {
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/verified-domains", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.getVerifiedDomainsAll = function() {
        return this.getVerifiedDomainsAllWithHttpInfo().then(function(response_and_data) {
          return response_and_data.data;
        });
      };
      this.submitDomainVerificationWithHttpInfo = function(domainName, body) {
        var postBody = body;
        if (domainName === void 0 || domainName === null) {
          throw new Error("Missing the required parameter 'domainName' when calling ");
        }
        if (body === void 0 || body === null) {
          throw new Error("Missing the required parameter 'body' when calling ");
        }
        var pathParams = {
          "domain_name": domainName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var authNames = ["basicAuth"];
        var contentTypes = ["application/json"];
        var accepts = ["application/json", "application/problem+json"];
        var returnType = "application/json";
        return this.apiClient.callApi("/verified-domains/{domain_name}/actions/verify", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      };
      this.submitDomainVerification = function(domainName, body) {
        return this.submitDomainVerificationWithHttpInfo(domainName, body).then(function(response_and_data) {
          return response_and_data.data;
        });
      };
    };
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js"(exports, module2) {
    init_shims();
    var superagent = require_node2();
    var querystring = require("querystring");
    var AccountExport = require_AccountExportApi();
    var AccountExports = require_AccountExportsApi();
    var ActivityFeed = require_ActivityFeedApi();
    var AuthorizedApps = require_AuthorizedAppsApi();
    var Automations = require_AutomationsApi();
    var BatchWebhooks = require_BatchWebhooksApi();
    var Batches = require_BatchesApi();
    var CampaignFolders = require_CampaignFoldersApi();
    var Campaigns = require_CampaignsApi();
    var ConnectedSites = require_ConnectedSitesApi();
    var Conversations = require_ConversationsApi();
    var CustomerJourneys = require_CustomerJourneysApi();
    var Ecommerce = require_EcommerceApi();
    var FacebookAds = require_FacebookAdsApi();
    var FileManager = require_FileManagerApi();
    var LandingPages = require_LandingPagesApi();
    var Lists = require_ListsApi();
    var Ping = require_PingApi();
    var Reporting = require_ReportingApi();
    var Reports = require_ReportsApi();
    var Root2 = require_RootApi();
    var SearchCampaigns = require_SearchCampaignsApi();
    var SearchMembers = require_SearchMembersApi();
    var TemplateFolders = require_TemplateFoldersApi();
    var Templates = require_TemplatesApi();
    var VerifiedDomains = require_VerifiedDomainsApi();
    var exports = function() {
      this.basePath = "https://server.api.mailchimp.com/3.0".replace(/\/+$/, "");
      this.config = {
        apiKey: "",
        accessToken: "",
        server: "invalid-server"
      };
      this.defaultHeaders = {};
      this.timeout = 12e4;
      this.cache = true;
      this.enableCookies = false;
      if (typeof window === "undefined") {
        this.agent = new superagent.agent();
      }
      this.accountExport = new AccountExport(this);
      this.accountExports = new AccountExports(this);
      this.activityFeed = new ActivityFeed(this);
      this.authorizedApps = new AuthorizedApps(this);
      this.automations = new Automations(this);
      this.batchWebhooks = new BatchWebhooks(this);
      this.batches = new Batches(this);
      this.campaignFolders = new CampaignFolders(this);
      this.campaigns = new Campaigns(this);
      this.connectedSites = new ConnectedSites(this);
      this.conversations = new Conversations(this);
      this.customerJourneys = new CustomerJourneys(this);
      this.ecommerce = new Ecommerce(this);
      this.facebookAds = new FacebookAds(this);
      this.fileManager = new FileManager(this);
      this.landingPages = new LandingPages(this);
      this.lists = new Lists(this);
      this.ping = new Ping(this);
      this.reporting = new Reporting(this);
      this.reports = new Reports(this);
      this.root = new Root2(this);
      this.searchCampaigns = new SearchCampaigns(this);
      this.searchMembers = new SearchMembers(this);
      this.templateFolders = new TemplateFolders(this);
      this.templates = new Templates(this);
      this.verifiedDomains = new VerifiedDomains(this);
    };
    exports.prototype.setConfig = function(config = {}) {
      var _this = this;
      this.config = config;
    };
    exports.prototype.paramToString = function(param) {
      if (param == void 0 || param == null) {
        return "";
      }
      if (param instanceof Date) {
        return param.toJSON();
      }
      return param.toString();
    };
    exports.prototype.buildUrl = function(path, pathParams) {
      if (!path.match(/^\//)) {
        path = "/" + path;
      }
      var url = this.basePath + path;
      var _this = this;
      url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
        var value;
        if (pathParams.hasOwnProperty(key)) {
          value = _this.paramToString(pathParams[key]);
        } else {
          value = fullMatch;
        }
        return encodeURIComponent(value);
      });
      if (typeof this.config.server !== "undefined") {
        url = url.replace("server", this.config.server);
      }
      return url;
    };
    exports.prototype.isJsonMime = function(contentType) {
      return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
    };
    exports.prototype.jsonPreferredMime = function(contentTypes) {
      for (var i = 0; i < contentTypes.length; i++) {
        if (this.isJsonMime(contentTypes[i])) {
          return contentTypes[i];
        }
      }
      return contentTypes[0];
    };
    exports.prototype.isFileParam = function(param) {
      if (typeof require === "function") {
        var fs;
        try {
          fs = require("fs");
        } catch (err) {
        }
        if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
          return true;
        }
      }
      if (typeof Buffer === "function" && param instanceof Buffer) {
        return true;
      }
      if (typeof Blob === "function" && param instanceof Blob) {
        return true;
      }
      if (typeof File === "function" && param instanceof File) {
        return true;
      }
      return false;
    };
    exports.prototype.normalizeParams = function(params) {
      var newParams = {};
      for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
          var value = params[key];
          if (this.isFileParam(value) || Array.isArray(value)) {
            newParams[key] = value;
          } else {
            newParams[key] = this.paramToString(value);
          }
        }
      }
      return newParams;
    };
    exports.CollectionFormatEnum = {
      CSV: ",",
      SSV: " ",
      TSV: "	",
      PIPES: "|",
      MULTI: "multi"
    };
    exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
      if (param == null) {
        return null;
      }
      switch (collectionFormat) {
        case "csv":
          return param.map(this.paramToString).join(",");
        case "ssv":
          return param.map(this.paramToString).join(" ");
        case "tsv":
          return param.map(this.paramToString).join("	");
        case "pipes":
          return param.map(this.paramToString).join("|");
        case "multi":
          return param.map(this.paramToString);
        default:
          throw new Error("Unknown collection format: " + collectionFormat);
      }
    };
    exports.prototype.deserialize = function deserialize(response, returnType) {
      if (response == null || returnType == null || response.status == 204) {
        return null;
      }
      var data = response.body;
      if (data == null || typeof data === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
        data = response.text;
      }
      return exports.convertToType(data, returnType);
    };
    exports.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType) {
      var _this = this;
      var url = this.buildUrl(path, pathParams);
      var request = superagent(httpMethod, url);
      if (this.config.apiKey !== void 0 && this.config.apiKey !== "") {
        request.auth("user", this.config.apiKey);
      } else if (this.config.accessToken !== void 0 && this.config.accessToken !== "") {
        request.set({ "Authorization": "Bearer " + this.config.accessToken });
      }
      if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
        queryParams["_"] = new Date().getTime();
      }
      request.query(this.normalizeParams(queryParams));
      request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
      request.timeout(this.timeout);
      var contentType = this.jsonPreferredMime(contentTypes);
      if (contentType) {
        if (contentType != "multipart/form-data") {
          request.type(contentType);
        }
      } else if (!HeaderUtils.caseInsensitiveGet(request.header, "content-type")) {
        request.type("application/json");
      }
      if (contentType === "application/x-www-form-urlencoded") {
        request.send(querystring.stringify(this.normalizeParams(formParams)));
      } else if (contentType == "multipart/form-data") {
        var _formParams = this.normalizeParams(formParams);
        for (var key in _formParams) {
          if (_formParams.hasOwnProperty(key)) {
            if (this.isFileParam(_formParams[key])) {
              request.attach(key, _formParams[key]);
            } else {
              request.field(key, _formParams[key]);
            }
          }
        }
      } else if (bodyParam) {
        request.send(bodyParam);
      }
      var accept = this.jsonPreferredMime(accepts);
      if (accept) {
        request.accept(accept);
      }
      if (returnType === "Blob") {
        request.responseType("blob");
      } else if (returnType === "String") {
        request.responseType("string");
      }
      if (this.enableCookies) {
        if (typeof window === "undefined") {
          this.agent.attachCookies(request);
        } else {
          request.withCredentials();
        }
      }
      return new Promise(function(resolve2, reject) {
        request.end(function(error2, response) {
          if (error2) {
            reject(error2);
          } else {
            try {
              var data = _this.deserialize(response, returnType);
              if (_this.enableCookies && typeof window === "undefined") {
                _this.agent.saveCookies(response);
              }
              resolve2({ data, response });
            } catch (err) {
              reject(err);
            }
          }
        });
      });
    };
    exports.parseDate = function(str) {
      return new Date(str.replace(/T/i, " "));
    };
    exports.convertToType = function(data, type) {
      if (data === null || data === void 0)
        return data;
      switch (type) {
        case "Boolean":
          return Boolean(data);
        case "Integer":
          return parseInt(data, 10);
        case "Number":
          return parseFloat(data);
        case "String":
          return String(data);
        case "Date":
          return this.parseDate(String(data));
        case "Blob":
          return data;
        default:
          if (type === Object) {
            return data;
          } else if (typeof type === "function") {
            return type.constructFromObject(data);
          } else if (Array.isArray(type)) {
            var itemType = type[0];
            return data.map(function(item) {
              return exports.convertToType(item, itemType);
            });
          } else if (typeof type === "object") {
            var keyType, valueType;
            for (var k in type) {
              if (type.hasOwnProperty(k)) {
                keyType = k;
                valueType = type[k];
                break;
              }
            }
            var result = {};
            for (var k in data) {
              if (data.hasOwnProperty(k)) {
                var key = exports.convertToType(k, keyType);
                var value = exports.convertToType(data[k], valueType);
                result[key] = value;
              }
            }
            return result;
          } else {
            return data;
          }
      }
    };
    exports.constructFromObject = function(data, obj, itemType) {
      if (Array.isArray(data)) {
        for (var i = 0; i < data.length; i++) {
          if (data.hasOwnProperty(i))
            obj[i] = exports.convertToType(data[i], itemType);
        }
      } else {
        for (var k in data) {
          if (data.hasOwnProperty(k))
            obj[k] = exports.convertToType(data[k], itemType);
        }
      }
    };
    exports.instance = new exports();
    module2.exports = exports;
  }
});

// node_modules/@mailchimp/mailchimp_marketing/src/index.js
var require_src2 = __commonJS({
  "node_modules/@mailchimp/mailchimp_marketing/src/index.js"(exports, module2) {
    init_shims();
    var ApiClient = require_ApiClient();
    module2.exports = ApiClient.instance;
  }
});

// .svelte-kit/output/server/chunks/mailchimp-b53b11ec.js
var mailchimp_b53b11ec_exports = {};
__export(mailchimp_b53b11ec_exports, {
  default: () => Mailchimp
});
var import_mailchimp_marketing, import_cookie4, Mailchimp;
var init_mailchimp_b53b11ec = __esm({
  ".svelte-kit/output/server/chunks/mailchimp-b53b11ec.js"() {
    init_shims();
    init_app_518424f3();
    import_mailchimp_marketing = __toModule(require_src2());
    import_cookie4 = __toModule(require_cookie());
    init_dist();
    import_mailchimp_marketing.default.setConfig({
      apiKey: "123444c62655a5158dd90c6e967d78ac-us20",
      server: "us20"
    });
    Mailchimp = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `<ul></ul>`;
    });
  }
});

// .svelte-kit/output/server/chunks/facebook-d032bb1d.js
var facebook_d032bb1d_exports = {};
__export(facebook_d032bb1d_exports, {
  default: () => Facebook
});
var import_cookie5, Facebook;
var init_facebook_d032bb1d = __esm({
  ".svelte-kit/output/server/chunks/facebook-d032bb1d.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie5 = __toModule(require_cookie());
    init_dist();
    Facebook = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return ``;
    });
  }
});

// .svelte-kit/output/server/chunks/twitter-8f6e9bcb.js
var twitter_8f6e9bcb_exports = {};
__export(twitter_8f6e9bcb_exports, {
  default: () => Twitter
});
var import_cookie6, Twitter;
var init_twitter_8f6e9bcb = __esm({
  ".svelte-kit/output/server/chunks/twitter-8f6e9bcb.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie6 = __toModule(require_cookie());
    init_dist();
    Twitter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return ``;
    });
  }
});

// .svelte-kit/output/server/chunks/custom-c146350f.js
var custom_c146350f_exports = {};
__export(custom_c146350f_exports, {
  default: () => Custom
});
var import_cookie7, Custom;
var init_custom_c146350f = __esm({
  ".svelte-kit/output/server/chunks/custom-c146350f.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie7 = __toModule(require_cookie());
    init_dist();
    Custom = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return ``;
    });
  }
});

// .svelte-kit/output/server/chunks/about-d27b9234.js
var about_d27b9234_exports = {};
__export(about_d27b9234_exports, {
  default: () => About,
  hydrate: () => hydrate,
  prerender: () => prerender2,
  router: () => router
});
var import_cookie8, browser, dev, css3, hydrate, router, prerender2, About;
var init_about_d27b9234 = __esm({
  ".svelte-kit/output/server/chunks/about-d27b9234.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie8 = __toModule(require_cookie());
    init_dist();
    browser = false;
    dev = false;
    css3 = {
      code: ".content.svelte-cf77e8{width:100%;max-width:var(--column-width);margin:var(--column-margin-top) auto 0 auto}",
      map: null
    };
    hydrate = dev;
    router = browser;
    prerender2 = true;
    About = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      $$result.css.add(css3);
      return `${$$result.head += `${$$result.title = `<title>About</title>`, ""}`, ""}

<div class="${"content svelte-cf77e8"}"><h1>About this app</h1>

	<p>This is a <a href="${"https://kit.svelte.dev"}">SvelteKit</a> app. You can make your own by typing the
		following into your command line and following the prompts:
	</p>

	
	<pre>npm init svelte@next</pre>

	<p>The page you&#39;re looking at is purely static HTML, with no client-side interactivity needed.
		Because of that, we don&#39;t need to load any JavaScript. Try viewing the page&#39;s source, or opening
		the devtools network panel and reloading.
	</p>

	<p>The <a href="${"/todos"}">TODOs</a> page illustrates SvelteKit&#39;s data loading and form handling. Try using
		it with JavaScript disabled!
	</p>
</div>`;
    });
  }
});

// .svelte-kit/output/server/chunks/index-bb5869e8.js
var index_bb5869e8_exports = {};
__export(index_bb5869e8_exports, {
  default: () => Todos,
  load: () => load2
});
var import_cookie9, css4, load2, Todos;
var init_index_bb5869e8 = __esm({
  ".svelte-kit/output/server/chunks/index-bb5869e8.js"() {
    init_shims();
    init_app_518424f3();
    import_cookie9 = __toModule(require_cookie());
    init_dist();
    css4 = {
      code: `.todos.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{width:100%;max-width:var(--column-width);margin:var(--column-margin-top) auto 0 auto;line-height:1}.new.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{margin:0 0 0.5rem 0}input.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{border:1px solid transparent}input.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd:focus-visible{box-shadow:inset 1px 1px 6px rgba(0, 0, 0, 0.1);border:1px solid #ff3e00 !important;outline:none}.new.svelte-dmxqmd input.svelte-dmxqmd.svelte-dmxqmd{font-size:28px;width:100%;padding:0.5em 1em 0.3em 1em;box-sizing:border-box;background:rgba(255, 255, 255, 0.05);border-radius:8px;text-align:center}.todo.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{display:grid;grid-template-columns:2rem 1fr 2rem;grid-gap:0.5rem;align-items:center;margin:0 0 0.5rem 0;padding:0.5rem;background-color:white;border-radius:8px;filter:drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.1));transform:translate(-1px, -1px);transition:filter 0.2s, transform 0.2s}.done.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{transform:none;opacity:0.4;filter:drop-shadow(0px 0px 1px rgba(0, 0, 0, 0.1))}form.text.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{position:relative;display:flex;align-items:center;flex:1}.todo.svelte-dmxqmd input.svelte-dmxqmd.svelte-dmxqmd{flex:1;padding:0.5em 2em 0.5em 0.8em;border-radius:3px}.todo.svelte-dmxqmd button.svelte-dmxqmd.svelte-dmxqmd{width:2em;height:2em;border:none;background-color:transparent;background-position:50% 50%;background-repeat:no-repeat}button.toggle.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{border:1px solid rgba(0, 0, 0, 0.2);border-radius:50%;box-sizing:border-box;background-size:1em auto}.done.svelte-dmxqmd .toggle.svelte-dmxqmd.svelte-dmxqmd{background-image:url("data:image/svg+xml,%3Csvg width='22' height='16' viewBox='0 0 22 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M20.5 1.5L7.4375 14.5L1.5 8.5909' stroke='%23676778' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E")}.delete.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{background-image:url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4.5 5V22H19.5V5H4.5Z' fill='%23676778' stroke='%23676778' stroke-width='1.5' stroke-linejoin='round'/%3E%3Cpath d='M10 10V16.5' stroke='white' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M14 10V16.5' stroke='white' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M2 5H22' stroke='%23676778' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M8 5L9.6445 2H14.3885L16 5H8Z' fill='%23676778' stroke='%23676778' stroke-width='1.5' stroke-linejoin='round'/%3E%3C/svg%3E%0A");opacity:0.2}.delete.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd:hover,.delete.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd:focus{transition:opacity 0.2s;opacity:1}.save.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd{position:absolute;right:0;opacity:0;background-image:url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M20.5 2H3.5C2.67158 2 2 2.67157 2 3.5V20.5C2 21.3284 2.67158 22 3.5 22H20.5C21.3284 22 22 21.3284 22 20.5V3.5C22 2.67157 21.3284 2 20.5 2Z' fill='%23676778' stroke='%23676778' stroke-width='1.5' stroke-linejoin='round'/%3E%3Cpath d='M17 2V11H7.5V2H17Z' fill='white' stroke='white' stroke-width='1.5' stroke-linejoin='round'/%3E%3Cpath d='M13.5 5.5V7.5' stroke='%23676778' stroke-width='1.5' stroke-linecap='round'/%3E%3Cpath d='M5.99844 2H18.4992' stroke='%23676778' stroke-width='1.5' stroke-linecap='round'/%3E%3C/svg%3E%0A")}.todo.svelte-dmxqmd input.svelte-dmxqmd:focus+.save.svelte-dmxqmd,.save.svelte-dmxqmd.svelte-dmxqmd.svelte-dmxqmd:focus{transition:opacity 0.2s;opacity:1}`,
      map: null
    };
    load2 = async ({ fetch: fetch2 }) => {
      const res = await fetch2("/todos.json");
      if (res.ok) {
        const todos = await res.json();
        return { props: { todos } };
      }
      const { message } = await res.json();
      return { error: new Error(message) };
    };
    Todos = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { todos } = $$props;
      if ($$props.todos === void 0 && $$bindings.todos && todos !== void 0)
        $$bindings.todos(todos);
      $$result.css.add(css4);
      return `${$$result.head += `${$$result.title = `<title>Todos</title>`, ""}`, ""}

<div class="${"todos svelte-dmxqmd"}"><h1>Todos</h1>

	<form class="${"new svelte-dmxqmd"}" action="${"/todos.json"}" method="${"post"}"><input name="${"text"}" aria-label="${"Add todo"}" placeholder="${"+ tap to add a todo"}" class="${"svelte-dmxqmd"}"></form>

	${each(todos, (todo) => `<div class="${["todo svelte-dmxqmd", todo.done ? "done" : ""].join(" ").trim()}"><form action="${"/todos/" + escape(todo.uid) + ".json?_method=patch"}" method="${"post"}"><input type="${"hidden"}" name="${"done"}"${add_attribute("value", todo.done ? "" : "true", 0)} class="${"svelte-dmxqmd"}">
				<button class="${"toggle svelte-dmxqmd"}" aria-label="${"Mark todo as " + escape(todo.done ? "not done" : "done")}"></button></form>

			<form class="${"text svelte-dmxqmd"}" action="${"/todos/" + escape(todo.uid) + ".json?_method=patch"}" method="${"post"}"><input aria-label="${"Edit todo"}" type="${"text"}" name="${"text"}"${add_attribute("value", todo.text, 0)} class="${"svelte-dmxqmd"}">
				<button class="${"save svelte-dmxqmd"}" aria-label="${"Save todo"}"></button></form>

			<form action="${"/todos/" + escape(todo.uid) + ".json?_method=delete"}" method="${"post"}"><button class="${"delete svelte-dmxqmd"}" aria-label="${"Delete todo"}" ${todo.pending_delete ? "disabled" : ""}></button></form>
		</div>`)}
</div>`;
    });
  }
});

// .svelte-kit/output/server/chunks/app-518424f3.js
function get_single_valued_header(headers, key) {
  const value = headers[key];
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return void 0;
    }
    if (value.length > 1) {
      throw new Error(`Multiple headers provided for ${key}. Multiple may be provided only for set-cookie`);
    }
    return value[0];
  }
  return value;
}
function resolve(base22, path) {
  if (scheme.test(path))
    return path;
  const base_match = absolute.exec(base22);
  const path_match = absolute.exec(path);
  if (!base_match) {
    throw new Error(`bad base path: "${base22}"`);
  }
  const baseparts = path_match ? [] : base22.slice(base_match[0].length).split("/");
  const pathparts = path_match ? path.slice(path_match[0].length).split("/") : path.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  const prefix = path_match && path_match[0] || base_match && base_match[0] || "";
  return `${prefix}${baseparts.join("/")}`;
}
function is_root_relative(path) {
  return path[0] === "/" && path[1] !== "/";
}
function coalesce_to_error(err) {
  return err instanceof Error || err && err.name && err.message ? err : new Error(JSON.stringify(err));
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function error(body) {
  return {
    status: 500,
    body,
    headers: {}
  };
}
function is_string(s2) {
  return typeof s2 === "string" || s2 instanceof String;
}
function is_content_type_textual(content_type) {
  if (!content_type)
    return true;
  const [type] = content_type.split(";");
  return type === "text/plain" || type === "application/json" || type === "application/x-www-form-urlencoded" || type === "multipart/form-data";
}
async function render_endpoint(request, route, match) {
  const mod = await route.load();
  const handler2 = mod[request.method.toLowerCase().replace("delete", "del")];
  if (!handler2) {
    return;
  }
  const params = route.params(match);
  const response = await handler2({ ...request, params });
  const preface = `Invalid response from route ${request.path}`;
  if (!response) {
    return;
  }
  if (typeof response !== "object") {
    return error(`${preface}: expected an object, got ${typeof response}`);
  }
  let { status = 200, body, headers = {} } = response;
  headers = lowercase_keys(headers);
  const type = get_single_valued_header(headers, "content-type");
  const is_type_textual = is_content_type_textual(type);
  if (!is_type_textual && !(body instanceof Uint8Array || is_string(body))) {
    return error(`${preface}: body must be an instance of string or Uint8Array if content-type is not a supported textual content-type`);
  }
  let normalized_body;
  if ((typeof body === "object" || typeof body === "undefined") && !(body instanceof Uint8Array) && (!type || type.startsWith("application/json"))) {
    headers = { ...headers, "content-type": "application/json; charset=utf-8" };
    normalized_body = JSON.stringify(typeof body === "undefined" ? {} : body);
  } else {
    normalized_body = body;
  }
  return { status, body: normalized_body, headers };
}
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type = getType(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name, thing) {
      params_1.push(name);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name + "[" + i + "]=" + stringify(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify(k) + ", " + stringify(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code >= 55296 && code <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop$1() {
}
function safe_not_equal$1(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function writable2(value, start = noop$1) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal$1(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue2.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue2.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue2.length; i += 2) {
            subscriber_queue2[i][0](subscriber_queue2[i + 1]);
          }
          subscriber_queue2.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$1) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop$1;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function hash(value) {
  let hash2 = 5381;
  let i = value.length;
  if (typeof value === "string") {
    while (i)
      hash2 = hash2 * 33 ^ value.charCodeAt(--i);
  } else {
    while (i)
      hash2 = hash2 * 33 ^ value[--i];
  }
  return (hash2 >>> 0).toString(36);
}
function escape_json_string_in_html(str) {
  return escape$1(str, escape_json_string_in_html_dict, (code) => `\\u${code.toString(16).toUpperCase()}`);
}
function escape_html_attr(str) {
  return '"' + escape$1(str, escape_html_attr_dict, (code) => `&#${code};`) + '"';
}
function escape$1(str, dict, unicode_encoder) {
  let result = "";
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char in dict) {
      result += dict[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += unicode_encoder(code);
      }
    } else {
      result += char;
    }
  }
  return result;
}
async function render_response({
  branch,
  options: options2,
  $session,
  page_config,
  status,
  error: error2,
  page: page2
}) {
  const css22 = new Set(options2.entry.css);
  const js = new Set(options2.entry.js);
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (error2) {
    error2.stack = options2.get_stack(error2);
  }
  if (page_config.ssr) {
    branch.forEach(({ node, loaded, fetched, uses_credentials }) => {
      if (node.css)
        node.css.forEach((url) => css22.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    const session = writable2($session);
    const props = {
      stores: {
        page: writable2(null),
        navigating: writable2(null),
        session
      },
      page: page2,
      components: branch.map(({ node }) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options2.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  const include_js = page_config.router || page_config.hydrate;
  if (!include_js)
    js.clear();
  const links = options2.amp ? styles.size > 0 || rendered.css.code.length > 0 ? `<style amp-custom>${Array.from(styles).concat(rendered.css.code).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css22).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options2.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"><\/script>`;
    init2 += options2.service_worker ? '<script async custom-element="amp-install-serviceworker" src="https://cdn.ampproject.org/v0/amp-install-serviceworker-0.1.js"><\/script>' : "";
  } else if (include_js) {
    init2 = `<script type="module">
			import { start } from ${s$1(options2.entry.file)};
			start({
				target: ${options2.target ? `document.querySelector(${s$1(options2.target)})` : "document.body"},
				paths: ${s$1(options2.paths)},
				session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
				host: ${page2 && page2.host ? s$1(page2.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				trailing_slash: ${s$1(options2.trailing_slash)},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error2)},
					nodes: [
						${(branch || []).map(({ node }) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page2 && page2.host ? s$1(page2.host) : "location.host"}, // TODO this is redundant
						path: ${page2 && page2.path ? try_serialize(page2.path, (error3) => {
      throw new Error(`Failed to serialize page.path: ${error3.message}`);
    }) : null},
						query: new URLSearchParams(${page2 && page2.query ? s$1(page2.query.toString()) : ""}),
						params: ${page2 && page2.params ? try_serialize(page2.params, (error3) => {
      throw new Error(`Failed to serialize page.params: ${error3.message}`);
    }) : null}
					}
				}` : "null"}
			});
		<\/script>`;
  }
  if (options2.service_worker) {
    init2 += options2.amp ? `<amp-install-serviceworker src="${options2.service_worker}" layout="nodisplay"></amp-install-serviceworker>` : `<script>
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.register('${options2.service_worker}');
			}
		<\/script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options2.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options2.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({ url, body: body2, json }) => {
    let attributes = `type="application/json" data-type="svelte-data" data-url=${escape_html_attr(url)}`;
    if (body2)
      attributes += ` data-body="${hash(body2)}"`;
    return `<script ${attributes}>${json}<\/script>`;
  }).join("\n\n	")}
		`;
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  if (!options2.floc) {
    headers["permissions-policy"] = "interest-cohort=()";
  }
  return {
    status,
    headers,
    body: options2.template({ head, body })
  };
}
function try_serialize(data, fail) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail)
      fail(coalesce_to_error(err));
    return null;
  }
}
function serialize_error(error2) {
  if (!error2)
    return null;
  let serialized = try_serialize(error2);
  if (!serialized) {
    const { name, message, stack } = error2;
    serialized = try_serialize({ ...error2, name, message, stack });
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function normalize(loaded) {
  const has_error_status = loaded.status && loaded.status >= 400 && loaded.status <= 599 && !loaded.redirect;
  if (loaded.error || has_error_status) {
    const status = loaded.status;
    if (!loaded.error && has_error_status) {
      return {
        status: status || 500,
        error: new Error()
      };
    }
    const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    if (!(error2 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return { status: 500, error: error2 };
    }
    return { status, error: error2 };
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  if (loaded.context) {
    throw new Error('You are returning "context" from a load function. "context" was renamed to "stuff", please adjust your code accordingly.');
  }
  return loaded;
}
async function load_node({
  request,
  options: options2,
  state,
  route,
  page: page2,
  node,
  $session,
  stuff,
  prerender_enabled,
  is_leaf,
  is_error,
  status,
  error: error2
}) {
  const { module: module2 } = node;
  let uses_credentials = false;
  const fetched = [];
  let set_cookie_headers = [];
  let loaded;
  const page_proxy = new Proxy(page2, {
    get: (target, prop, receiver) => {
      if (prop === "query" && prerender_enabled) {
        throw new Error("Cannot access query on a page with prerendering enabled");
      }
      return Reflect.get(target, prop, receiver);
    }
  });
  if (module2.load) {
    const load_input = {
      page: page_proxy,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        const resolved = resolve(request.path, url.split("?")[0]);
        let response;
        const prefix = options2.paths.assets || options2.paths.base;
        const filename = (resolved.startsWith(prefix) ? resolved.slice(prefix.length) : resolved).slice(1);
        const filename_html = `${filename}/index.html`;
        const asset = options2.manifest.assets.find((d2) => d2.file === filename || d2.file === filename_html);
        if (asset) {
          response = options2.read ? new Response(options2.read(asset.file), {
            headers: asset.type ? { "content-type": asset.type } : {}
          }) : await fetch(`http://${page2.host}/${asset.file}`, opts);
        } else if (is_root_relative(resolved)) {
          const relative = resolved;
          const headers = {
            ...opts.headers
          };
          if (opts.credentials !== "omit") {
            uses_credentials = true;
            headers.cookie = request.headers.cookie;
            if (!headers.authorization) {
              headers.authorization = request.headers.authorization;
            }
          }
          if (opts.body && typeof opts.body !== "string") {
            throw new Error("Request body must be a string");
          }
          const search = url.includes("?") ? url.slice(url.indexOf("?") + 1) : "";
          const rendered = await respond({
            host: request.host,
            method: opts.method || "GET",
            headers,
            path: relative,
            rawBody: opts.body == null ? null : new TextEncoder().encode(opts.body),
            query: new URLSearchParams(search)
          }, options2, {
            fetched: url,
            initiator: route
          });
          if (rendered) {
            if (state.prerender) {
              state.prerender.dependencies.set(relative, rendered);
            }
            response = new Response(rendered.body, {
              status: rendered.status,
              headers: rendered.headers
            });
          }
        } else {
          if (resolved.startsWith("//")) {
            throw new Error(`Cannot request protocol-relative URL (${url}) in server-side fetch`);
          }
          if (typeof request.host !== "undefined") {
            const { hostname: fetch_hostname } = new URL(url);
            const [server_hostname] = request.host.split(":");
            if (`.${fetch_hostname}`.endsWith(`.${server_hostname}`) && opts.credentials !== "omit") {
              uses_credentials = true;
              opts.headers = {
                ...opts.headers,
                cookie: request.headers.cookie
              };
            }
          }
          const external_request = new Request(url, opts);
          response = await options2.hooks.externalFetch.call(null, external_request);
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, _receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key2, value] of response2.headers) {
                  if (key2 === "set-cookie") {
                    set_cookie_headers = set_cookie_headers.concat(value);
                  } else if (key2 !== "etag") {
                    headers[key2] = value;
                  }
                }
                if (!opts.body || typeof opts.body === "string") {
                  fetched.push({
                    url,
                    body: opts.body,
                    json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":"${escape_json_string_in_html(body)}"}`
                  });
                }
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, response2);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      stuff: { ...stuff }
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error2;
    }
    loaded = await module2.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  if (!loaded) {
    throw new Error(`${node.entry} - load must return a value except for page fall through`);
  }
  return {
    node,
    loaded: normalize(loaded),
    stuff: loaded.stuff || stuff,
    fetched,
    set_cookie_headers,
    uses_credentials
  };
}
async function respond_with_error({ request, options: options2, state, $session, status, error: error2 }) {
  const default_layout = await options2.load_component(options2.manifest.layout);
  const default_error = await options2.load_component(options2.manifest.error);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options: options2,
    state,
    route: null,
    page: page2,
    node: default_layout,
    $session,
    stuff: {},
    prerender_enabled: is_prerender_enabled(options2, default_error, state),
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options: options2,
      state,
      route: null,
      page: page2,
      node: default_error,
      $session,
      stuff: loaded ? loaded.stuff : {},
      prerender_enabled: is_prerender_enabled(options2, default_error, state),
      is_leaf: false,
      is_error: true,
      status,
      error: error2
    })
  ];
  try {
    return await render_response({
      options: options2,
      $session,
      page_config: {
        hydrate: options2.hydrate,
        router: options2.router,
        ssr: options2.ssr
      },
      status,
      error: error2,
      branch,
      page: page2
    });
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return {
      status: 500,
      headers: {},
      body: error3.stack
    };
  }
}
function is_prerender_enabled(options2, node, state) {
  return options2.prerender && (!!node.module.prerender || !!state.prerender && state.prerender.all);
}
async function respond$1(opts) {
  const { request, options: options2, state, $session, route } = opts;
  let nodes;
  try {
    nodes = await Promise.all(route.a.map((id) => id ? options2.load_component(id) : void 0));
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error3
    });
  }
  const leaf = nodes[nodes.length - 1].module;
  let page_config = get_page_config(leaf, options2);
  if (!leaf.prerender && state.prerender && !state.prerender.all) {
    return {
      status: 204,
      headers: {}
    };
  }
  let branch = [];
  let status = 200;
  let error2;
  let set_cookie_headers = [];
  ssr:
    if (page_config.ssr) {
      let stuff = {};
      for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              ...opts,
              node,
              stuff,
              prerender_enabled: is_prerender_enabled(options2, node, state),
              is_leaf: i === nodes.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            set_cookie_headers = set_cookie_headers.concat(loaded.set_cookie_headers);
            if (loaded.loaded.redirect) {
              return with_cookies({
                status: loaded.loaded.status,
                headers: {
                  location: encodeURI(loaded.loaded.redirect)
                }
              }, set_cookie_headers);
            }
            if (loaded.loaded.error) {
              ({ status, error: error2 } = loaded.loaded);
            }
          } catch (err) {
            const e = coalesce_to_error(err);
            options2.handle_error(e, request);
            status = 500;
            error2 = e;
          }
          if (loaded && !error2) {
            branch.push(loaded);
          }
          if (error2) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options2.load_component(route.b[i]);
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  const error_loaded = await load_node({
                    ...opts,
                    node: error_node,
                    stuff: node_loaded.stuff,
                    prerender_enabled: is_prerender_enabled(options2, error_node, state),
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error2
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  page_config = get_page_config(error_node.module, options2);
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (err) {
                  const e = coalesce_to_error(err);
                  options2.handle_error(e, request);
                  continue;
                }
              }
            }
            return with_cookies(await respond_with_error({
              request,
              options: options2,
              state,
              $session,
              status,
              error: error2
            }), set_cookie_headers);
          }
        }
        if (loaded && loaded.loaded.stuff) {
          stuff = {
            ...stuff,
            ...loaded.loaded.stuff
          };
        }
      }
    }
  try {
    return with_cookies(await render_response({
      ...opts,
      page_config,
      status,
      error: error2,
      branch: branch.filter(Boolean)
    }), set_cookie_headers);
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return with_cookies(await respond_with_error({
      ...opts,
      status: 500,
      error: error3
    }), set_cookie_headers);
  }
}
function get_page_config(leaf, options2) {
  return {
    ssr: "ssr" in leaf ? !!leaf.ssr : options2.ssr,
    router: "router" in leaf ? !!leaf.router : options2.router,
    hydrate: "hydrate" in leaf ? !!leaf.hydrate : options2.hydrate
  };
}
function with_cookies(response, set_cookie_headers) {
  if (set_cookie_headers.length) {
    response.headers["set-cookie"] = set_cookie_headers;
  }
  return response;
}
async function render_page(request, route, match, options2, state) {
  if (state.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const params = route.params(match);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  const $session = await options2.hooks.getSession(request);
  const response = await respond$1({
    request,
    options: options2,
    state,
    $session,
    route,
    page: page2
  });
  if (response) {
    return response;
  }
  if (state.fetched) {
    return {
      status: 500,
      headers: {},
      body: `Bad request in load function: failed to fetch ${state.fetched}`
    };
  }
}
function read_only_form_data() {
  const map = new Map();
  return {
    append(key, value) {
      if (map.has(key)) {
        (map.get(key) || []).push(value);
      } else {
        map.set(key, [value]);
      }
    },
    data: new ReadOnlyFormData(map)
  };
}
function parse_body(raw, headers) {
  if (!raw)
    return raw;
  const content_type = headers["content-type"];
  const [type, ...directives] = content_type ? content_type.split(/;\s*/) : [];
  const text = () => new TextDecoder(headers["content-encoding"] || "utf-8").decode(raw);
  switch (type) {
    case "text/plain":
      return text();
    case "application/json":
      return JSON.parse(text());
    case "application/x-www-form-urlencoded":
      return get_urlencoded(text());
    case "multipart/form-data": {
      const boundary = directives.find((directive) => directive.startsWith("boundary="));
      if (!boundary)
        throw new Error("Missing boundary");
      return get_multipart(text(), boundary.slice("boundary=".length));
    }
    default:
      return raw;
  }
}
function get_urlencoded(text) {
  const { data, append } = read_only_form_data();
  text.replace(/\+/g, " ").split("&").forEach((str) => {
    const [key, value] = str.split("=");
    append(decodeURIComponent(key), decodeURIComponent(value));
  });
  return data;
}
function get_multipart(text, boundary) {
  const parts = text.split(`--${boundary}`);
  if (parts[0] !== "" || parts[parts.length - 1].trim() !== "--") {
    throw new Error("Malformed form data");
  }
  const { data, append } = read_only_form_data();
  parts.slice(1, -1).forEach((part) => {
    const match = /\s*([\s\S]+?)\r\n\r\n([\s\S]*)\s*/.exec(part);
    if (!match) {
      throw new Error("Malformed form data");
    }
    const raw_headers = match[1];
    const body = match[2].trim();
    let key;
    const headers = {};
    raw_headers.split("\r\n").forEach((str) => {
      const [raw_header, ...raw_directives] = str.split("; ");
      let [name, value] = raw_header.split(": ");
      name = name.toLowerCase();
      headers[name] = value;
      const directives = {};
      raw_directives.forEach((raw_directive) => {
        const [name2, value2] = raw_directive.split("=");
        directives[name2] = JSON.parse(value2);
      });
      if (name === "content-disposition") {
        if (value !== "form-data")
          throw new Error("Malformed form data");
        if (directives.filename) {
          throw new Error("File upload is not yet implemented");
        }
        if (directives.name) {
          key = directives.name;
        }
      }
    });
    if (!key)
      throw new Error("Malformed form data");
    append(key, body);
  });
  return data;
}
async function respond(incoming, options2, state = {}) {
  if (incoming.path !== "/" && options2.trailing_slash !== "ignore") {
    const has_trailing_slash = incoming.path.endsWith("/");
    if (has_trailing_slash && options2.trailing_slash === "never" || !has_trailing_slash && options2.trailing_slash === "always" && !(incoming.path.split("/").pop() || "").includes(".")) {
      const path = has_trailing_slash ? incoming.path.slice(0, -1) : incoming.path + "/";
      const q = incoming.query.toString();
      return {
        status: 301,
        headers: {
          location: options2.paths.base + path + (q ? `?${q}` : "")
        }
      };
    }
  }
  const headers = lowercase_keys(incoming.headers);
  const request = {
    ...incoming,
    headers,
    body: parse_body(incoming.rawBody, headers),
    params: {},
    locals: {}
  };
  try {
    return await options2.hooks.handle({
      request,
      resolve: async (request2) => {
        if (state.prerender && state.prerender.fallback) {
          return await render_response({
            options: options2,
            $session: await options2.hooks.getSession(request2),
            page_config: { ssr: false, router: true, hydrate: true },
            status: 200,
            branch: []
          });
        }
        const decoded = decodeURI(request2.path);
        for (const route of options2.manifest.routes) {
          const match = route.pattern.exec(decoded);
          if (!match)
            continue;
          const response = route.type === "endpoint" ? await render_endpoint(request2, route, match) : await render_page(request2, route, match, options2, state);
          if (response) {
            if (response.status === 200) {
              const cache_control = get_single_valued_header(response.headers, "cache-control");
              if (!cache_control || !/(no-store|immutable)/.test(cache_control)) {
                let if_none_match_value = request2.headers["if-none-match"];
                if (if_none_match_value?.startsWith('W/"')) {
                  if_none_match_value = if_none_match_value.substring(2);
                }
                const etag = `"${hash(response.body || "")}"`;
                if (if_none_match_value === etag) {
                  return {
                    status: 304,
                    headers: {}
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        const $session = await options2.hooks.getSession(request2);
        return await respond_with_error({
          request: request2,
          options: options2,
          state,
          $session,
          status: 404,
          error: new Error(`Not found: ${request2.path}`)
        });
      }
    });
  } catch (err) {
    const e = coalesce_to_error(err);
    options2.handle_error(e, request);
    return {
      status: 500,
      headers: {},
      body: options2.dev ? e.stack : e.message
    };
  }
}
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function escape(html) {
  return String(html).replace(/["'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component;
}
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css22) => css22.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}
function afterUpdate() {
}
function set_paths(paths) {
  base2 = paths.base;
  assets = paths.assets || base2;
}
function set_prerendering(value) {
}
function init(settings = default_settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  const hooks = get_hooks(user_hooks);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: assets + "/_app/start-7c9d07a9.js",
      css: [assets + "/_app/assets/start-61d1577b.css"],
      js: [assets + "/_app/start-7c9d07a9.js", assets + "/_app/chunks/vendor-8e8dafb4.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => assets + "/_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2, request) => {
      hooks.handleError({ error: error2, request });
      error2.stack = options.get_stack(error2);
    },
    hooks,
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    prerender: true,
    read: settings.read,
    root: Root,
    service_worker: null,
    router: true,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
async function load_component(file) {
  const { entry, css: css22, js, styles } = metadata_lookup[file];
  return {
    module: await module_lookup[file](),
    entry: assets + "/_app/" + entry,
    css: css22.map((dep) => assets + "/_app/" + dep),
    js: js.map((dep) => assets + "/_app/" + dep),
    styles
  };
}
function render(request, {
  prerender: prerender3
} = {}) {
  const host = request.headers["host"];
  return respond({ ...request, host }, options, { prerender: prerender3 });
}
var import_cookie10, __accessCheck, __privateGet, __privateAdd, __privateSet, _map, absolute, scheme, chars, unsafeChars, reserved, escaped$1, objectProtoOwnPropertyNames, subscriber_queue2, escape_json_string_in_html_dict, escape_html_attr_dict, s$1, s, ReadOnlyFormData, is_client, now, raf, tasks, current_component, escaped, missing_component, on_destroy, css5, Root, base2, assets, handle, user_hooks, template, options, default_settings, d, empty, manifest, get_hooks, module_lookup, metadata_lookup;
var init_app_518424f3 = __esm({
  ".svelte-kit/output/server/chunks/app-518424f3.js"() {
    init_shims();
    import_cookie10 = __toModule(require_cookie());
    init_dist();
    __accessCheck = (obj, member, msg) => {
      if (!member.has(obj))
        throw TypeError("Cannot " + msg);
    };
    __privateGet = (obj, member, getter) => {
      __accessCheck(obj, member, "read from private field");
      return getter ? getter.call(obj) : member.get(obj);
    };
    __privateAdd = (obj, member, value) => {
      if (member.has(obj))
        throw TypeError("Cannot add the same private member more than once");
      member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    };
    __privateSet = (obj, member, value, setter) => {
      __accessCheck(obj, member, "write to private field");
      setter ? setter.call(obj, value) : member.set(obj, value);
      return value;
    };
    absolute = /^([a-z]+:)?\/?\//;
    scheme = /^[a-z]+:/;
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
    unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
    reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
    escaped$1 = {
      "<": "\\u003C",
      ">": "\\u003E",
      "/": "\\u002F",
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
    Promise.resolve();
    subscriber_queue2 = [];
    escape_json_string_in_html_dict = {
      '"': '\\"',
      "<": "\\u003C",
      ">": "\\u003E",
      "/": "\\u002F",
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    escape_html_attr_dict = {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    s$1 = JSON.stringify;
    s = JSON.stringify;
    ReadOnlyFormData = class {
      constructor(map) {
        __privateAdd(this, _map, void 0);
        __privateSet(this, _map, map);
      }
      get(key) {
        const value = __privateGet(this, _map).get(key);
        return value && value[0];
      }
      getAll(key) {
        return __privateGet(this, _map).get(key);
      }
      has(key) {
        return __privateGet(this, _map).has(key);
      }
      *[Symbol.iterator]() {
        for (const [key, value] of __privateGet(this, _map)) {
          for (let i = 0; i < value.length; i += 1) {
            yield [key, value[i]];
          }
        }
      }
      *entries() {
        for (const [key, value] of __privateGet(this, _map)) {
          for (let i = 0; i < value.length; i += 1) {
            yield [key, value[i]];
          }
        }
      }
      *keys() {
        for (const [key] of __privateGet(this, _map))
          yield key;
      }
      *values() {
        for (const [, value] of __privateGet(this, _map)) {
          for (let i = 0; i < value.length; i += 1) {
            yield value[i];
          }
        }
      }
    };
    _map = new WeakMap();
    is_client = typeof window !== "undefined";
    now = is_client ? () => window.performance.now() : () => Date.now();
    raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
    tasks = new Set();
    Promise.resolve();
    escaped = {
      '"': "&quot;",
      "'": "&#39;",
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;"
    };
    missing_component = {
      $$render: () => ""
    };
    css5 = {
      code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
      map: null
    };
    Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { stores } = $$props;
      let { page: page2 } = $$props;
      let { components } = $$props;
      let { props_0 = null } = $$props;
      let { props_1 = null } = $$props;
      let { props_2 = null } = $$props;
      setContext("__svelte__", stores);
      afterUpdate(stores.page.notify);
      if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
        $$bindings.stores(stores);
      if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
        $$bindings.page(page2);
      if ($$props.components === void 0 && $$bindings.components && components !== void 0)
        $$bindings.components(components);
      if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
        $$bindings.props_0(props_0);
      if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
        $$bindings.props_1(props_1);
      if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
        $$bindings.props_2(props_2);
      $$result.css.add(css5);
      {
        stores.page.set(page2);
      }
      return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
        default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
          default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
        })}` : ``}`
      })}

${``}`;
    });
    base2 = "";
    assets = "";
    handle = async ({ request, resolve: resolve2 }) => {
      const cookies = import_cookie10.default.parse(request.headers.cookie || "");
      request.locals.userid = cookies.userid || v4();
      if (request.query.has("_method")) {
        request.method = request.query.get("_method").toUpperCase();
      }
      const response = await resolve2(request);
      if (!cookies.userid) {
        response.headers["set-cookie"] = import_cookie10.default.serialize("userid", request.locals.userid, {
          path: "/",
          httpOnly: true
        });
      }
      return response;
    };
    user_hooks = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      [Symbol.toStringTag]: "Module",
      handle
    });
    template = ({ head, body }) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<meta name="description" content="Svelte demo app" />\n		<link rel="icon" href="/favicon.png" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
    options = null;
    default_settings = { paths: { "base": "", "assets": "" } };
    d = (s2) => s2.replace(/%23/g, "#").replace(/%3[Bb]/g, ";").replace(/%2[Cc]/g, ",").replace(/%2[Ff]/g, "/").replace(/%3[Ff]/g, "?").replace(/%3[Aa]/g, ":").replace(/%40/g, "@").replace(/%26/g, "&").replace(/%3[Dd]/g, "=").replace(/%2[Bb]/g, "+").replace(/%24/g, "$");
    empty = () => ({});
    manifest = {
      assets: [{ "file": "favicon.png", "size": 1571, "type": "image/png" }, { "file": "robots.txt", "size": 67, "type": "text/plain" }, { "file": "svelte-welcome.png", "size": 360807, "type": "image/png" }, { "file": "svelte-welcome.webp", "size": 115470, "type": "image/webp" }],
      layout: "src/routes/__layout.svelte",
      error: ".svelte-kit/build/components/error.svelte",
      routes: [
        {
          type: "page",
          pattern: /^\/$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "page",
          pattern: /^\/mailchimp\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/mailchimp.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "page",
          pattern: /^\/facebook\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/facebook.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "page",
          pattern: /^\/twitter\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/twitter.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "page",
          pattern: /^\/custom\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/custom.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "page",
          pattern: /^\/about\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/about.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "endpoint",
          pattern: /^\/todos\.json$/,
          params: empty,
          load: () => Promise.resolve().then(() => (init_index_json_784727b1(), index_json_784727b1_exports))
        },
        {
          type: "page",
          pattern: /^\/todos\/?$/,
          params: empty,
          a: ["src/routes/__layout.svelte", "src/routes/todos/index.svelte"],
          b: [".svelte-kit/build/components/error.svelte"]
        },
        {
          type: "endpoint",
          pattern: /^\/todos\/([^/]+?)\.json$/,
          params: (m) => ({ uid: d(m[1]) }),
          load: () => Promise.resolve().then(() => (init_uid_json_039b6f30(), uid_json_039b6f30_exports))
        }
      ]
    };
    get_hooks = (hooks) => ({
      getSession: hooks.getSession || (() => ({})),
      handle: hooks.handle || (({ request, resolve: resolve2 }) => resolve2(request)),
      handleError: hooks.handleError || (({ error: error2 }) => console.error(error2.stack)),
      externalFetch: hooks.externalFetch || fetch
    });
    module_lookup = {
      "src/routes/__layout.svelte": () => Promise.resolve().then(() => (init_layout_2206ff22(), layout_2206ff22_exports)),
      ".svelte-kit/build/components/error.svelte": () => Promise.resolve().then(() => (init_error_0a6ae754(), error_0a6ae754_exports)),
      "src/routes/index.svelte": () => Promise.resolve().then(() => (init_index_50a4ef0d(), index_50a4ef0d_exports)),
      "src/routes/mailchimp.svelte": () => Promise.resolve().then(() => (init_mailchimp_b53b11ec(), mailchimp_b53b11ec_exports)),
      "src/routes/facebook.svelte": () => Promise.resolve().then(() => (init_facebook_d032bb1d(), facebook_d032bb1d_exports)),
      "src/routes/twitter.svelte": () => Promise.resolve().then(() => (init_twitter_8f6e9bcb(), twitter_8f6e9bcb_exports)),
      "src/routes/custom.svelte": () => Promise.resolve().then(() => (init_custom_c146350f(), custom_c146350f_exports)),
      "src/routes/about.svelte": () => Promise.resolve().then(() => (init_about_d27b9234(), about_d27b9234_exports)),
      "src/routes/todos/index.svelte": () => Promise.resolve().then(() => (init_index_bb5869e8(), index_bb5869e8_exports))
    };
    metadata_lookup = { "src/routes/__layout.svelte": { "entry": "pages/__layout.svelte-efd681ae.js", "css": ["assets/pages/__layout.svelte-a5e0b417.css"], "js": ["pages/__layout.svelte-efd681ae.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, ".svelte-kit/build/components/error.svelte": { "entry": "error.svelte-d5ebaf1d.js", "css": [], "js": ["error.svelte-d5ebaf1d.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/index.svelte": { "entry": "pages/index.svelte-6dafb03a.js", "css": ["assets/pages/index.svelte-c63fe1c6.css"], "js": ["pages/index.svelte-6dafb03a.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/mailchimp.svelte": { "entry": "pages/mailchimp.svelte-bb06ad4f.js", "css": [], "js": ["pages/mailchimp.svelte-bb06ad4f.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/facebook.svelte": { "entry": "pages/facebook.svelte-ba6a67c4.js", "css": [], "js": ["pages/facebook.svelte-ba6a67c4.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/twitter.svelte": { "entry": "pages/twitter.svelte-21ead2a1.js", "css": [], "js": ["pages/twitter.svelte-21ead2a1.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/custom.svelte": { "entry": "pages/custom.svelte-a8fed619.js", "css": [], "js": ["pages/custom.svelte-a8fed619.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/about.svelte": { "entry": "pages/about.svelte-20e3ac13.js", "css": ["assets/pages/about.svelte-bf4528fa.css"], "js": ["pages/about.svelte-20e3ac13.js", "chunks/vendor-8e8dafb4.js"], "styles": [] }, "src/routes/todos/index.svelte": { "entry": "pages/todos/index.svelte-08173f04.js", "css": ["assets/pages/todos/index.svelte-784042c1.css"], "js": ["pages/todos/index.svelte-08173f04.js", "chunks/vendor-8e8dafb4.js"], "styles": [] } };
  }
});

// .svelte-kit/netlify/entry.js
__export(exports, {
  handler: () => handler
});
init_shims();

// .svelte-kit/output/server/app.js
init_shims();
init_app_518424f3();
var import_cookie11 = __toModule(require_cookie());
init_dist();

// .svelte-kit/netlify/entry.js
init();
async function handler(event) {
  const { path, httpMethod, headers, rawQuery, body, isBase64Encoded } = event;
  const query = new URLSearchParams(rawQuery);
  const encoding = isBase64Encoded ? "base64" : headers["content-encoding"] || "utf-8";
  const rawBody = typeof body === "string" ? Buffer.from(body, encoding) : body;
  const rendered = await render({
    method: httpMethod,
    headers,
    path,
    query,
    rawBody
  });
  if (!rendered) {
    return {
      statusCode: 404,
      body: "Not found"
    };
  }
  const partial_response = {
    statusCode: rendered.status,
    ...split_headers(rendered.headers)
  };
  if (rendered.body instanceof Uint8Array) {
    return {
      ...partial_response,
      isBase64Encoded: true,
      body: Buffer.from(rendered.body).toString("base64")
    };
  }
  return {
    ...partial_response,
    body: rendered.body
  };
}
function split_headers(headers) {
  const h = {};
  const m = {};
  for (const key in headers) {
    const value = headers[key];
    const target = Array.isArray(value) ? m : h;
    target[key] = value;
  }
  return {
    headers: h,
    multiValueHeaders: m
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
